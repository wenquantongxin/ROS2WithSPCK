!file.version=3.6! Removing this line will make the file unreadable

!**********************************************************************
! Simpack Version Information
!**********************************************************************
version.number = 20210100
version.desc   = ''
version.build  = 107

!**********************************************************************
!  Global parameters
!**********************************************************************
searchpath (              1                                       ) = '../database'
gravity (                 1                                       ) = 0.00000000000000000E+00 ! Gravity
gravity (                 2                                       ) = 0.00000000000000000E+00 ! Gravity
gravity (                 3                                       ) = 9.81000000000000050E+00 ! Gravity
vehicle.startvel                                                    = { 20 km/h }             ! Vehicle initial velocity
vehicle.applystartvel                                               = 1                       ! Apply vehicle initial velocity at solver start
glob.compat.flxnodeori                                              = 0                       ! Flexbody Node Orientation Method
glob.compat.afcf                                                    = 0                       ! References Frame for Joint and Force Element Forces and Torques
rw.cont.meth                                                        = 2                       ! MISCPAR_RW_CONTACT_METHOD
rw.linear                                                           = 0                       ! MISCPAR_RW_PROFILE_LINEARIZATION_METHOD
time                                                                = 0.00000000000000000E+00 ! Time
slv.active                                                          = $SLV_SolverSettings     ! Active SolverSettings element
track.active                                                        = $Trk_Track              ! Active Track element
prop3d.bg.base.color.r                                              = 2.55000000000000000E+02 ! Background color (red component)
prop3d.bg.base.color.g                                              = 2.55000000000000000E+02 ! Background color (green component)
prop3d.bg.base.color.b                                              = 2.55000000000000000E+02 ! Background color (blue component)
prop3d.bg.base.color.t                                              = 0.00000000000000000E+00 ! Background color (transparency component)
prop3d.bg.grad.color.r                                              = 2.55000000000000000E+02 ! Gradient color (red component)
prop3d.bg.grad.color.g                                              = 2.55000000000000000E+02 ! Gradient color (green component)
prop3d.bg.grad.color.b                                              = 2.55000000000000000E+02 ! Gradient color (blue component)
prop3d.bg.grad.color.t                                              = 0.00000000000000000E+00 ! Gradient color (transparency component)
prop3d.bg.gradient                                                  = 0                       ! 0 = constant, 1 = gradient
prop3d.marker.size                                                  = 0.00000000000000000E+00 ! length of Marker axes, if value is zero, use "auto"
prop3d.marker.auto                                                  = 1                       ! 0 = user defined, 1 = auto size determination
prop3d.marker.color.r                                               = 0.00000000000000000E+00 ! Marker color (red component)
prop3d.marker.color.g                                               = 0.00000000000000000E+00 ! Marker color (green component)
prop3d.marker.color.b                                               = 0.00000000000000000E+00 ! Marker color (blue component)
prop3d.marker.color.t                                               = 0.00000000000000000E+00 ! Marker color (transparency component)
prop3d.display                                                      = 1                       ! 1 = shaded,  2 = wireframe, 3 = hidden line
prop3d.bbox                                                         = 0                       ! 0 = exclude all refsys objects, 1 = include all refsys objects
prop2d.joint.visible                                                = 1                       ! Joints visible
prop2d.force.visible                                                = 1                       ! Forces visible
prop2d.constr.visible                                               = 1                       ! Constraints visible
prop2d.sensor.visible                                               = 0                       ! Sensors visible
prop2d.grid.visible                                                 = 0                       ! Show grid
prop2d.grid.hor.start                                               = 0.00000000000000000E+00 ! Horizontal offset
prop2d.grid.hor.step                                                = 1.00000000000000000E+01 ! Horizontal step
prop2d.grid.vert.start                                              = 0.00000000000000000E+00 ! Vertical offset
prop2d.grid.vert.step                                               = 1.00000000000000000E+01 ! Vertical step
prop2d.line.width                                                   = 0                       ! Line width
prop2d.proj.dir                                                     = 2                       ! Projection direction


!**********************************************************************
! Substructures
!**********************************************************************
substr.file (                       $S_IRW_Front                  ) = './IRW_4WDBv31.spck'    ! Filename
substr.id (                         $S_IRW_Front                  ) = '1'                     ! Substructure Id
substr.add.searchpath (   1 ,       $S_IRW_Front                  ) = '../database'           ! Substructure-specific search path

substr.file (                       $S_IRW_Rear                   ) = './IRW_4WDBv31.spck'    ! Filename
substr.id (                         $S_IRW_Rear                   ) = '2'                     ! Substructure Id
substr.add.searchpath (   1 ,       $S_IRW_Rear                   ) = '../database'           ! Substructure-specific search path

!**********************************************************************
! Views
!**********************************************************************
view.type (                         $V_WorkingView                ) = 0                       ! Projection type
view.pos (                1 ,       $V_WorkingView                ) = -4.46344518661498402E+00 ! Position
view.pos (                2 ,       $V_WorkingView                ) = -5.87139606475830078E-01 ! Position
view.pos (                3 ,       $V_WorkingView                ) = -3.46159672737121848E+00 ! Position
view.orient (             1 ,       $V_WorkingView                ) = 5.85218605770832734E-01 ! Orientation
view.orient (             2 ,       $V_WorkingView                ) = 6.47353407835320138E-01 ! Orientation
view.orient (             3 ,       $V_WorkingView                ) = -3.71915785800656429E-01 ! Orientation
view.orient (             4 ,       $V_WorkingView                ) = -3.16435454865475918E-01 ! Orientation
view.angle (                        $V_WorkingView                ) = 7.85398185253143311E-01 ! Lens angle
view.fclip.auto (                   $V_WorkingView                ) = 1                       ! Front clipping plane auto
view.bclip.auto (                   $V_WorkingView                ) = 1                       ! Back clipping plane auto
view.fclip.value (                  $V_WorkingView                ) = 2.00503706932067871E+00 ! Front clipping plane value
view.bclip.value (                  $V_WorkingView                ) = 2.00503686523437500E+03 ! Back clipping plane value
view.rotcenter.type (               $V_WorkingView                ) = 0                       ! Rotation center type
view.rotcenter.adjust (             $V_WorkingView                ) = 1                       ! Adjust rotation center
view.motion.active (                $V_WorkingView                ) = 1                       ! Camera is moved
view.motion.ref (                   $V_WorkingView                ) = $M_Frame_BRF            ! Marker
view.motion.x (                     $V_WorkingView                ) = 1                       ! Moved camera direction x
view.motion.y (                     $V_WorkingView                ) = 1                       ! Moved camera direction y
view.motion.z (                     $V_WorkingView                ) = 1                       ! Moved camera direction z
view.motion.al (                    $V_WorkingView                ) = 1                       ! Moved camera direction alpha
view.motion.be (                    $V_WorkingView                ) = 1                       ! Moved camera direction beta
view.motion.ga (                    $V_WorkingView                ) = 1                       ! Moved camera direction gamma
view.motion.pos (         1 ,       $V_WorkingView                ) = -4.46344518661498402E+00 ! Relative position
view.motion.pos (         2 ,       $V_WorkingView                ) = -5.87139606475830078E-01 ! Relative position
view.motion.pos (         3 ,       $V_WorkingView                ) = -3.03159672737121832E+00 ! Relative position
view.motion.orient (      1 ,       $V_WorkingView                ) = 5.85218605770832734E-01 ! Relative orientation
view.motion.orient (      2 ,       $V_WorkingView                ) = 6.47353407835320138E-01 ! Relative orientation
view.motion.orient (      3 ,       $V_WorkingView                ) = -3.71915785800656429E-01 ! Relative orientation
view.motion.orient (      4 ,       $V_WorkingView                ) = -3.16435454865475918E-01 ! Relative orientation

view.type (                         $V_Perspective_Moved          ) = 0                       ! Projection type
view.pos (                1 ,       $V_Perspective_Moved          ) = -1.14629710518056527E+00 ! Position
view.pos (                2 ,       $V_Perspective_Moved          ) = 5.40825615142239258E-01 ! Position
view.pos (                3 ,       $V_Perspective_Moved          ) = -3.16154684855064261E-01 ! Position
view.orient (             1 ,       $V_Perspective_Moved          ) = -6.13824307918548584E-01 ! Orientation
view.orient (             2 ,       $V_Perspective_Moved          ) = -4.47064399719238281E-01 ! Orientation
view.orient (             3 ,       $V_Perspective_Moved          ) = 3.80551487207412720E-01 ! Orientation
view.orient (             4 ,       $V_Perspective_Moved          ) = 5.27762949466705322E-01 ! Orientation
view.angle (                        $V_Perspective_Moved          ) = 7.85398185253143311E-01 ! Lens angle
view.fclip.auto (                   $V_Perspective_Moved          ) = 1                       ! Front clipping plane auto
view.bclip.auto (                   $V_Perspective_Moved          ) = 1                       ! Back clipping plane auto
view.rotcenter.type (               $V_Perspective_Moved          ) = 0                       ! Rotation center type
view.rotcenter.adjust (             $V_Perspective_Moved          ) = 1                       ! Adjust rotation center
view.motion.active (                $V_Perspective_Moved          ) = 1                       ! Camera is moved
view.motion.ref (                   $V_Perspective_Moved          ) = $M_Isys_Track_Moved     ! Marker
view.motion.x (                     $V_Perspective_Moved          ) = 1                       ! Moved camera direction x
view.motion.y (                     $V_Perspective_Moved          ) = 1                       ! Moved camera direction y
view.motion.z (                     $V_Perspective_Moved          ) = 1                       ! Moved camera direction z
view.motion.al (                    $V_Perspective_Moved          ) = 1                       ! Moved camera direction alpha
view.motion.be (                    $V_Perspective_Moved          ) = 1                       ! Moved camera direction beta
view.motion.ga (                    $V_Perspective_Moved          ) = 1                       ! Moved camera direction gamma
view.motion.pos (         1 ,       $V_Perspective_Moved          ) = -1.14629710518056527E+00 ! Relative position
view.motion.pos (         2 ,       $V_Perspective_Moved          ) = 5.40825615142239258E-01 ! Relative position
view.motion.pos (         3 ,       $V_Perspective_Moved          ) = -3.16154684855064261E-01 ! Relative position
view.motion.orient (      1 ,       $V_Perspective_Moved          ) = 6.13824300634425168E-01 ! Relative orientation
view.motion.orient (      2 ,       $V_Perspective_Moved          ) = 4.47064394414019628E-01 ! Relative orientation
view.motion.orient (      3 ,       $V_Perspective_Moved          ) = -3.80551482691488641E-01 ! Relative orientation
view.motion.orient (      4 ,       $V_Perspective_Moved          ) = -5.27762943203853974E-01 ! Relative orientation

view.type (                         $V_Side_Orthographic_Moved    ) = 1                       ! Projection type
view.pos (                1 ,       $V_Side_Orthographic_Moved    ) = 0.00000000000000000E+00 ! Position
view.pos (                2 ,       $V_Side_Orthographic_Moved    ) = 5.99845588207244873E-01 ! Position
view.pos (                3 ,       $V_Side_Orthographic_Moved    ) = -1.02445483207702637E-08 ! Position
view.orient (             1 ,       $V_Side_Orthographic_Moved    ) = 7.07106888294219971E-01 ! Orientation
view.orient (             2 ,       $V_Side_Orthographic_Moved    ) = 0.00000000000000000E+00 ! Orientation
view.orient (             3 ,       $V_Side_Orthographic_Moved    ) = 0.00000000000000000E+00 ! Orientation
view.orient (             4 ,       $V_Side_Orthographic_Moved    ) = -7.07106709480285645E-01 ! Orientation
view.height (                       $V_Side_Orthographic_Moved    ) = 8.00000000000000044E-01 ! View height
view.fclip.auto (                   $V_Side_Orthographic_Moved    ) = 1                       ! Front clipping plane auto
view.bclip.auto (                   $V_Side_Orthographic_Moved    ) = 1                       ! Back clipping plane auto
view.rotcenter.type (               $V_Side_Orthographic_Moved    ) = 0                       ! Rotation center type
view.rotcenter.adjust (             $V_Side_Orthographic_Moved    ) = 1                       ! Adjust rotation center
view.motion.active (                $V_Side_Orthographic_Moved    ) = 1                       ! Camera is moved
view.motion.ref (                   $V_Side_Orthographic_Moved    ) = $M_Isys_Track_Moved     ! Marker
view.motion.x (                     $V_Side_Orthographic_Moved    ) = 1                       ! Moved camera direction x
view.motion.y (                     $V_Side_Orthographic_Moved    ) = 1                       ! Moved camera direction y
view.motion.z (                     $V_Side_Orthographic_Moved    ) = 1                       ! Moved camera direction z
view.motion.al (                    $V_Side_Orthographic_Moved    ) = 1                       ! Moved camera direction alpha
view.motion.be (                    $V_Side_Orthographic_Moved    ) = 1                       ! Moved camera direction beta
view.motion.ga (                    $V_Side_Orthographic_Moved    ) = 1                       ! Moved camera direction gamma
view.motion.pos (         1 ,       $V_Side_Orthographic_Moved    ) = 0.00000000000000000E+00 ! Relative position
view.motion.pos (         2 ,       $V_Side_Orthographic_Moved    ) = 5.99845588207244873E-01 ! Relative position
view.motion.pos (         3 ,       $V_Side_Orthographic_Moved    ) = -1.02445483207702637E-08 ! Relative position
view.motion.orient (      1 ,       $V_Side_Orthographic_Moved    ) = 7.07106870593506742E-01 ! Relative orientation
view.motion.orient (      2 ,       $V_Side_Orthographic_Moved    ) = 0.00000000000000000E+00 ! Relative orientation
view.motion.orient (      3 ,       $V_Side_Orthographic_Moved    ) = 0.00000000000000000E+00 ! Relative orientation
view.motion.orient (      4 ,       $V_Side_Orthographic_Moved    ) = -7.07106691779576968E-01 ! Relative orientation

view.type (                         $V_Top_Orthographic_Moved     ) = 1                       ! Projection type
view.pos (                1 ,       $V_Top_Orthographic_Moved     ) = 0.00000000000000000E+00 ! Position
view.pos (                2 ,       $V_Top_Orthographic_Moved     ) = -5.06639480590820312E-07 ! Position
view.pos (                3 ,       $V_Top_Orthographic_Moved     ) = -9.67873191833496094E+00 ! Position
view.orient (             1 ,       $V_Top_Orthographic_Moved     ) = 1.00000000000000000E+00 ! Orientation
view.orient (             2 ,       $V_Top_Orthographic_Moved     ) = 0.00000000000000000E+00 ! Orientation
view.orient (             3 ,       $V_Top_Orthographic_Moved     ) = 0.00000000000000000E+00 ! Orientation
view.orient (             4 ,       $V_Top_Orthographic_Moved     ) = 1.05239450931549072E-07 ! Orientation
view.height (                       $V_Top_Orthographic_Moved     ) = 2.27604870733313946E+00 ! View height
view.fclip.auto (                   $V_Top_Orthographic_Moved     ) = 1                       ! Front clipping plane auto
view.bclip.auto (                   $V_Top_Orthographic_Moved     ) = 1                       ! Back clipping plane auto
view.rotcenter.type (               $V_Top_Orthographic_Moved     ) = 0                       ! Rotation center type
view.rotcenter.adjust (             $V_Top_Orthographic_Moved     ) = 1                       ! Adjust rotation center
view.motion.active (                $V_Top_Orthographic_Moved     ) = 1                       ! Camera is moved
view.motion.ref (                   $V_Top_Orthographic_Moved     ) = $M_Isys_Track_Moved     ! Marker
view.motion.x (                     $V_Top_Orthographic_Moved     ) = 1                       ! Moved camera direction x
view.motion.y (                     $V_Top_Orthographic_Moved     ) = 1                       ! Moved camera direction y
view.motion.z (                     $V_Top_Orthographic_Moved     ) = 1                       ! Moved camera direction z
view.motion.al (                    $V_Top_Orthographic_Moved     ) = 1                       ! Moved camera direction alpha
view.motion.be (                    $V_Top_Orthographic_Moved     ) = 1                       ! Moved camera direction beta
view.motion.ga (                    $V_Top_Orthographic_Moved     ) = 1                       ! Moved camera direction gamma
view.motion.pos (         1 ,       $V_Top_Orthographic_Moved     ) = 0.00000000000000000E+00 ! Relative position
view.motion.pos (         2 ,       $V_Top_Orthographic_Moved     ) = -5.06639480590820312E-07 ! Relative position
view.motion.pos (         3 ,       $V_Top_Orthographic_Moved     ) = -9.67873191833496094E+00 ! Relative position
view.motion.orient (      1 ,       $V_Top_Orthographic_Moved     ) = 9.99999999999994449E-01 ! Relative orientation
view.motion.orient (      2 ,       $V_Top_Orthographic_Moved     ) = 0.00000000000000000E+00 ! Relative orientation
view.motion.orient (      3 ,       $V_Top_Orthographic_Moved     ) = 0.00000000000000000E+00 ! Relative orientation
view.motion.orient (      4 ,       $V_Top_Orthographic_Moved     ) = 1.05239450931548490E-07 ! Relative orientation

!**********************************************************************
! Solver Settings
!**********************************************************************
slv.kin.task (                      $SLV_SolverSettings           ) = 3                       ! KIN_INTPAR_TASK
slv.kin.tout.n (                    $SLV_SolverSettings           ) = 201                     ! KIN_INTPAR_NUM_STEPS
slv.kin.tol (                       $SLV_SolverSettings           ) = 9.99999999999999955E-07 ! Kinematics tolerance
slv.integ.fix.driftstab (           $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_INTPAR_FIXINT_CONSTAB
slv.integ.fix.jac.update (          $SLV_SolverSettings           ) = 3                       ! TIME_INTEG_PAR_FIXINT_JACOBIAN_EVAL
slv.integ.fix.part.type (           $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_INTPAR_FIXINT_JAC_PART_TYPE
slv.integ.fix.order (               $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_PAR_FIXINT_METHOD_ORDER
slv.integ.fix.posup (               $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_PAR_FIXINT_POS_COORD_UPDATE
slv.integ.sodasrt.formalism (       $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_PAR_FORMALISM
slv.integ.type (                    $SLV_SolverSettings           ) = 1                       ! Integrator type
slv.integ.jac.struc (               $SLV_SolverSettings           ) = 3                       ! SOLVER_TIME_INTEG_PAR_JACOBIAN_STRUC
slv.integ.jac.incr.type (           $SLV_SolverSettings           ) = 2                       ! Jacobian increment type
slv.integ.linalg.slv (              $SLV_SolverSettings           ) = 1                       ! 1 = dense ; 2 = sparse (UMFPACK) ; 3 = sparse (PARDISO)
slv.integ.lsode.meth (              $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_PAR_LSODE_INTEG_METHOD
slv.integ.lsode.jac.struc (         $SLV_SolverSettings           ) = 3                       ! SOLVER_TIME_INTEG_PAR_LSODE_JACOBIAN_STRUC
slv.integ.lsode.maxord (            $SLV_SolverSettings           ) = 5                       ! TIME_INTEG_INTPAR_LSODE_MAX_ORDER
slv.integ.maxrhs (                  $SLV_SolverSettings           ) = -1                      ! TIME_INTEG_INTPAR_MAX_RHS
slv.integ.maxstp (                  $SLV_SolverSettings           ) = -1                      ! TIME_INTEG_INTPAR_MAX_TIME_STEPS
slv.integ.newton.maxit (            $SLV_SolverSettings           ) = 7                       ! TIME_INTEG_INTPAR_NEWTON_ITERS
slv.integ.tout.n (                  $SLV_SolverSettings           ) = 101                     ! TIME_INTEG_INTPAR_OUTPUT_NUM_POINTS
slv.integ.sodasrt2.iestsc (         $SLV_SolverSettings           ) = 2                       ! TIME_INTEG_PAR_SODASRT20_ERROR_EST_SCALE_METHOD
slv.integ.sodasrt.maxord (          $SLV_SolverSettings           ) = 5                       ! TIME_INTEG_INTPAR_SODASRT_MAX_ORDER
slv.integ.sodasrt1.errnorm (        $SLV_SolverSettings           ) = 3                       ! TIME_INTEG_PAR_SODASRT_NORM_TYPE
slv.integ.tout.mode (               $SLV_SolverSettings           ) = 0                       ! TIME_INTEG_INTPAR_TOUT_MODE
slv.integ.meetop (                  $SLV_SolverSettings           ) = 0                       ! TIME_INTEG_BOOLPAR_EVAL_MOTION_EQ_AT_COMM_POINTS
slv.integ.driftstab (               $SLV_SolverSettings           ) = 2                       ! TIME_INTEG_BOOLPAR_ACCEPT_DRIFT
slv.integ.root (                    $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_BOOLPAR_DETECT_IMPLICIT_DISCONTINUITIES
slv.integ.jac.part (                $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_BOOLPAR_PARTITIONED_EVAL_JACOBIAN
slv.integ.addrhscall (              $SLV_SolverSettings           ) = 0                       ! TIME_INTEG_BOOLPAR_EXTRA_EVAL_AFTER_SUCCESSFUL_STEP
slv.integ.linalg.red2nd (           $SLV_SolverSettings           ) = 1                       ! Linear equations second order reduction
slv.integ.fix.oneleg (              $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_BOOLPAR_FIXINT_IMPLICIT_ONE_LEG_OLC
slv.integ.fix.conforce (            $SLV_SolverSettings           ) = 0                       ! TIME_INTEG_BOOLPAR_FIXINT_CONFORCE
slv.integ.fix.clss (                $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_BOOLPAR_FIXINT_METHOD_CLASS
slv.integ.sodasrt1.scal.lam (       $SLV_SolverSettings           ) = 9.99999999999999955E-08 ! TIME_INTEG_SCALARPAR_SCALE_CONSTRAINT_FORCES
slv.integ.sodasrt1.scal.acc (       $SLV_SolverSettings           ) = 1.00000000000000000E+00 ! TIME_INTEG_SCALARPAR_SCALE_ACCELERATIONS
slv.integ.newton.eps (              $SLV_SolverSettings           ) = 3.33000000000000018E-01 ! TIME_INTEG_SCALARPAR_NEWTON_ERROR_BOUND
slv.integ.fix.utcpar (              $SLV_SolverSettings           ) = 1.00000000000000000E+00 ! TIME_INTEG_SCALARPAR_FIXINT_EULER_UTC
slv.integ.fix.olcpar (              $SLV_SolverSettings           ) = 5.00000000000000000E-01 ! TIME_INTEG_SCALARPAR_FIXINT_ONE_LEG_OLC
slv.integ.sodasrt2.estfac (         $SLV_SolverSettings           ) = 9.99999999999999955E-07 ! TIME_INTEG_SCALARPAR_SODASRT20_ERROR_EST_SCALE_FACTOR
slv.integ.tout.freq (               $SLV_SolverSettings           ) = { 100 Hz }              ! TIME_INTEG_PAR_OUTPUT_FREQ
slv.integ.tend.time (               $SLV_SolverSettings           ) = { 40 s }                ! TIME_INTEG_TIMEPAR_END_TIME
slv.integ.atol.gen (                $SLV_SolverSettings           ) = 1.00000000000000008E-05 ! TIME_INTEG_PARSTATE_DEFAULT
slv.integ.atol.vel (                $SLV_SolverSettings           ) = 1.00000000000000005E-04 ! TIME_INTEG_PARSTATE_VEL
slv.integ.rtol.gen (                $SLV_SolverSettings           ) = 1.00000000000000004E-10 ! TIME_INTEG_PARSTATE_DEFAULT
slv.integ.rtol.vel (                $SLV_SolverSettings           ) = 1.00000000000000005E-04 ! TIME_INTEG_PARSTATE_VEL
slv.meas.geo (                      $SLV_SolverSettings           ) = 1                       ! Animation data to result file
slv.meas.sensor.pos (               $SLV_SolverSettings           ) = 1                       ! Sensor position to result file
slv.meas.sensor.vel (               $SLV_SolverSettings           ) = 1                       ! Sensor velocity to result file
slv.meas.sensor.acc (               $SLV_SolverSettings           ) = 1                       ! Sensor acceleration to result file
slv.meas.force.af (                 $SLV_SolverSettings           ) = 1                       ! applied forces to result file
slv.meas.force.ov (                 $SLV_SolverSettings           ) = 1                       ! Force output values to result file
slv.meas.force.st.dyn (             $SLV_SolverSettings           ) = 1                       ! Force dynamic states to result file
slv.meas.force.st.alg (             $SLV_SolverSettings           ) = 1                       ! Force algebraic states to result file
slv.meas.joint.st.pos (             $SLV_SolverSettings           ) = 1                       ! Joint position to result file
slv.meas.joint.st.vel (             $SLV_SolverSettings           ) = 1                       ! Joint velocity to result file
slv.meas.joint.st.acc (             $SLV_SolverSettings           ) = 1                       ! Joint acceleration to result file
slv.meas.joint.cf (                 $SLV_SolverSettings           ) = 1                       ! Joint constraining forces to result file
slv.meas.body.pos (                 $SLV_SolverSettings           ) = 1                       ! Body position to result file
slv.meas.body.flx.st.pos (          $SLV_SolverSettings           ) = 1                       ! Body elastic state position to result file
slv.meas.body.flx.st.vel (          $SLV_SolverSettings           ) = 1                       ! Body elastic state velocity to result file
slv.meas.body.flx.st.acc (          $SLV_SolverSettings           ) = 1                       ! Body elastic state acceleration to result file
slv.meas.marker.st.alg (            $SLV_SolverSettings           ) = 1                       ! Marker algebraic state to result file
slv.meas.constr.cf (                $SLV_SolverSettings           ) = 1                       ! Constraint constrained state to result file
slv.meas.yout (                     $SLV_SolverSettings           ) = 1                       ! y-Outputs to result file
slv.meas.result (                   $SLV_SolverSettings           ) = 1                       ! Result elements to result file
slv.meas.subvar (                   $SLV_SolverSettings           ) = 1                       ! MEAS_BOOLPAR_SUBVAR
slv.assmbl.task (                   $SLV_SolverSettings           ) = 3                       ! ASSMBL_PAR_SOLVER_MODE
slv.output.path.type (              $SLV_SolverSettings           ) = 1                       ! OUTPUT_PATH_PAR_TYPE
slv.output.file.desc (              $SLV_SolverSettings           ) = ''                      ! Description written to the output file if supported
slv.compat.solver (                 $SLV_SolverSettings           ) = 0                       ! 0 = no (new solver); 1 = yes (classic solver)
slv.txt (                           $SLV_SolverSettings           ) = ''                      ! Comment

!**********************************************************************
! SubVars
!**********************************************************************
subvar.str (                        $_VelCtrl_P                   ) = '200'                   ! Definition

subvar.str (                        $_VelCtrl_I                   ) = '60'                    ! Definition

!**********************************************************************
! Reference systems
!**********************************************************************
refsys.type (                       $R_Isys                       ) = 1                       ! Type
refsys.attr.2d.pos.x (              $R_Isys                       ) = -9.00000000000000000E+01
refsys.attr.2d.pos.y (              $R_Isys                       ) = -1.00000000000000000E+01
refsys.attr.2d.width (              $R_Isys                       ) = 2.40000000000000000E+02
refsys.attr.2d.height (             $R_Isys                       ) = 2.20000000000000000E+02

marker.type (                       $M_Isys                       ) = 1                       ! Type
marker.parent (                     $M_Isys                       ) = $R_Isys                 ! Reference system

marker.type (                       $M_Isys_Track_Moved           ) = -98                     ! Type
marker.parent (                     $M_Isys_Track_Moved           ) = $R_Isys                 ! Reference system
marker.par (              1 ,       $M_Isys_Track_Moved           ) = $J_Frame                ! [-] Track Connection/Joint
marker.par (              3 ,       $M_Isys_Track_Moved           ) = 0.00000000000000000E+00 ! [-] Disregard Track elevation
marker.par (              4 ,       $M_Isys_Track_Moved           ) = 0.00000000000000000E+00 ! [-] Disregard Track roll
marker.par (              5 ,       $M_Isys_Track_Moved           ) = 0.00000000000000000E+00 ! [-] Disregard Track pitch
marker.par (              6 ,       $M_Isys_Track_Moved           ) = 0.00000000000000000E+00 ! [m] Offset in x of Track frame
marker.par (              7 ,       $M_Isys_Track_Moved           ) = 0.00000000000000000E+00 ! [m] Offset in y of Track frame
marker.par (              8 ,       $M_Isys_Track_Moved           ) = 0.00000000000000000E+00 ! [m] Offset in z of Track frame
marker.par (              9 ,       $M_Isys_Track_Moved           ) = 0.00000000000000000E+00 ! [m] Offset in s along Track
marker.par (             10 ,       $M_Isys_Track_Moved           ) = 0.00000000000000000E+00 ! [-] Calculate derivatives

marker.type (                       $M_Isys_DumIsHere             ) = 2                       ! Type
marker.parent (                     $M_Isys_DumIsHere             ) = $R_Isys                 ! Reference system
marker.pos (              3 ,       $M_Isys_DumIsHere             ) = -1.00000000000000000E+00 ! Position

prim.type (                         $P_Isys                       ) = 30                      ! Type
prim.ref (                          $P_Isys                       ) = $M_Isys                 ! Reference Marker
prim.color.r (            1 ,       $P_Isys                       ) = 1.48000000000000000E+02 ! Colors (red component)
prim.color.g (            1 ,       $P_Isys                       ) = 1.48000000000000000E+02 ! Colors (green component)
prim.color.b (            1 ,       $P_Isys                       ) = 1.48000000000000000E+02 ! Colors (blue component)
prim.color.t (            1 ,       $P_Isys                       ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.par (                3 ,       $P_Isys                       ) = 1.00000000000000006E-01 ! [m] Length

prim.type (                         $P_R_Isys_Track               ) = 41                      ! Type
prim.ref (                          $P_R_Isys_Track               ) = $M_Isys                 ! Reference Marker


!**********************************************************************
! Bodies
!**********************************************************************
body.m (                            $B_Frame                      ) = 5.00000000000000000E+03 ! Mass of the Body
body.mp (                           $B_Frame                      ) = 0                       ! 0=manual; 1=auto (based on geometry); 2=mass manual, CG & Inertia auto
body.I.tens (             1 ,   1 , $B_Frame                      ) = 2.00000000000000000E+03 ! Moments of inertia
body.I.tens (             2 ,   2 , $B_Frame                      ) = 3.00000000000000000E+03 ! Moments of inertia
body.I.tens (             3 ,   3 , $B_Frame                      ) = 5.00000000000000000E+03 ! Moments of inertia
body.attr.2d.pos.x (                $B_Frame                      ) = -3.00000000000000000E+01
body.attr.2d.pos.y (                $B_Frame                      ) = 3.00000000000000000E+01
body.attr.2d.width (                $B_Frame                      ) = 1.10000000000000000E+02
body.attr.2d.height (               $B_Frame                      ) = 8.00000000000000000E+01

marker.type (                       $M_Frame_BRF                  ) = 1                       ! Type
marker.parent (                     $M_Frame_BRF                  ) = $B_Frame                ! Body
marker.flx.type (                   $M_Frame_BRF                  ) = 4                       ! Flexible type

marker.type (                       $M_Frame_PS_Spring_baseA1     ) = 2                       ! Type
marker.parent (                     $M_Frame_PS_Spring_baseA1     ) = $B_Frame                ! Body
marker.pos (              1 ,       $M_Frame_PS_Spring_baseA1     ) = { 3050/2000 }           ! Position
marker.pos (              2 ,       $M_Frame_PS_Spring_baseA1     ) = { -450/1000 }           ! Position
marker.pos (              3 ,       $M_Frame_PS_Spring_baseA1     ) = { -200/1000-0.0015+0.15 } ! Position
marker.ang (              1 ,       $M_Frame_PS_Spring_baseA1     ) = 0.00000000000000000E+00 ! Angles
marker.ang (              2 ,       $M_Frame_PS_Spring_baseA1     ) = 0.00000000000000000E+00 ! Angles
marker.txt (                        $M_Frame_PS_Spring_baseA1     ) = 'z由-197/1000调整为-200/1000' ! Comment

marker.type (                       $M_Frame_PS_Dmp_baseB         ) = 2                       ! Type
marker.parent (                     $M_Frame_PS_Dmp_baseB         ) = $B_Frame                ! Body
marker.pos (              1 ,       $M_Frame_PS_Dmp_baseB         ) = { 3430/2000 }           ! Position
marker.pos (              2 ,       $M_Frame_PS_Dmp_baseB         ) = { 450/1000 }            ! Position
marker.pos (              3 ,       $M_Frame_PS_Dmp_baseB         ) = -7.64999999999999986E-02 ! Position
marker.ang (              1 ,       $M_Frame_PS_Dmp_baseB         ) = 0.00000000000000000E+00 ! Angles
marker.ang (              2 ,       $M_Frame_PS_Dmp_baseB         ) = 0.00000000000000000E+00 ! Angles
marker.txt (                        $M_Frame_PS_Dmp_baseB         ) = 'z由-197/1000调整为-200/1000' ! Comment

marker.type (                       $M_Frame_PS_Spring_baseA2     ) = 2                       ! Type
marker.parent (                     $M_Frame_PS_Spring_baseA2     ) = $B_Frame                ! Body
marker.pos (              1 ,       $M_Frame_PS_Spring_baseA2     ) = { 1950/2000 }           ! Position
marker.pos (              2 ,       $M_Frame_PS_Spring_baseA2     ) = { -450/1000 }           ! Position
marker.pos (              3 ,       $M_Frame_PS_Spring_baseA2     ) = { -200/1000-0.0015+0.15 } ! Position
marker.ang (              1 ,       $M_Frame_PS_Spring_baseA2     ) = 0.00000000000000000E+00 ! Angles
marker.ang (              2 ,       $M_Frame_PS_Spring_baseA2     ) = 0.00000000000000000E+00 ! Angles
marker.txt (                        $M_Frame_PS_Spring_baseA2     ) = 'z由-197/1000调整为-200/1000' ! Comment

marker.type (                       $M_Frame_PS_Spring_baseB1     ) = 2                       ! Type
marker.parent (                     $M_Frame_PS_Spring_baseB1     ) = $B_Frame                ! Body
marker.pos (              1 ,       $M_Frame_PS_Spring_baseB1     ) = { 3050/2000 }           ! Position
marker.pos (              2 ,       $M_Frame_PS_Spring_baseB1     ) = { 450/1000 }            ! Position
marker.pos (              3 ,       $M_Frame_PS_Spring_baseB1     ) = { -200/1000-0.0015+0.15 } ! Position
marker.ang (              1 ,       $M_Frame_PS_Spring_baseB1     ) = 0.00000000000000000E+00 ! Angles
marker.ang (              2 ,       $M_Frame_PS_Spring_baseB1     ) = 0.00000000000000000E+00 ! Angles
marker.txt (                        $M_Frame_PS_Spring_baseB1     ) = 'z由-197/1000调整为-200/1000' ! Comment

marker.type (                       $M_Frame_PS_Spring_baseB2     ) = 2                       ! Type
marker.parent (                     $M_Frame_PS_Spring_baseB2     ) = $B_Frame                ! Body
marker.pos (              1 ,       $M_Frame_PS_Spring_baseB2     ) = { 1950/2000 }           ! Position
marker.pos (              2 ,       $M_Frame_PS_Spring_baseB2     ) = { 450/1000 }            ! Position
marker.pos (              3 ,       $M_Frame_PS_Spring_baseB2     ) = { -200/1000-0.0015+0.15 } ! Position
marker.ang (              1 ,       $M_Frame_PS_Spring_baseB2     ) = 0.00000000000000000E+00 ! Angles
marker.ang (              2 ,       $M_Frame_PS_Spring_baseB2     ) = 0.00000000000000000E+00 ! Angles
marker.txt (                        $M_Frame_PS_Spring_baseB2     ) = 'z由-197/1000调整为-200/1000' ! Comment

marker.type (                       $M_Frame_PS_Spring_baseC1     ) = 2                       ! Type
marker.parent (                     $M_Frame_PS_Spring_baseC1     ) = $B_Frame                ! Body
marker.pos (              1 ,       $M_Frame_PS_Spring_baseC1     ) = { -3050/2000 }          ! Position
marker.pos (              2 ,       $M_Frame_PS_Spring_baseC1     ) = { -450/1000 }           ! Position
marker.pos (              3 ,       $M_Frame_PS_Spring_baseC1     ) = { -200/1000-0.0015+0.15 } ! Position
marker.ang (              1 ,       $M_Frame_PS_Spring_baseC1     ) = 0.00000000000000000E+00 ! Angles
marker.ang (              2 ,       $M_Frame_PS_Spring_baseC1     ) = 0.00000000000000000E+00 ! Angles
marker.txt (                        $M_Frame_PS_Spring_baseC1     ) = 'z由-197/1000调整为-200/1000' ! Comment

marker.type (                       $M_Frame_PS_Spring_baseC2     ) = 2                       ! Type
marker.parent (                     $M_Frame_PS_Spring_baseC2     ) = $B_Frame                ! Body
marker.pos (              1 ,       $M_Frame_PS_Spring_baseC2     ) = { -1950/2000 }          ! Position
marker.pos (              2 ,       $M_Frame_PS_Spring_baseC2     ) = { -450/1000 }           ! Position
marker.pos (              3 ,       $M_Frame_PS_Spring_baseC2     ) = { -200/1000-0.0015+0.15 } ! Position
marker.ang (              1 ,       $M_Frame_PS_Spring_baseC2     ) = 0.00000000000000000E+00 ! Angles
marker.ang (              2 ,       $M_Frame_PS_Spring_baseC2     ) = 0.00000000000000000E+00 ! Angles
marker.txt (                        $M_Frame_PS_Spring_baseC2     ) = 'z由-197/1000调整为-200/1000' ! Comment

marker.type (                       $M_Frame_PS_Spring_baseD1     ) = 2                       ! Type
marker.parent (                     $M_Frame_PS_Spring_baseD1     ) = $B_Frame                ! Body
marker.pos (              1 ,       $M_Frame_PS_Spring_baseD1     ) = { -3050/2000 }          ! Position
marker.pos (              2 ,       $M_Frame_PS_Spring_baseD1     ) = { 450/1000 }            ! Position
marker.pos (              3 ,       $M_Frame_PS_Spring_baseD1     ) = { -200/1000-0.0015+0.15 } ! Position
marker.ang (              1 ,       $M_Frame_PS_Spring_baseD1     ) = 0.00000000000000000E+00 ! Angles
marker.ang (              2 ,       $M_Frame_PS_Spring_baseD1     ) = 0.00000000000000000E+00 ! Angles
marker.txt (                        $M_Frame_PS_Spring_baseD1     ) = 'z由-197/1000调整为-200/1000' ! Comment

marker.type (                       $M_Frame_PS_Spring_baseD2     ) = 2                       ! Type
marker.parent (                     $M_Frame_PS_Spring_baseD2     ) = $B_Frame                ! Body
marker.pos (              1 ,       $M_Frame_PS_Spring_baseD2     ) = { -1950/2000 }          ! Position
marker.pos (              2 ,       $M_Frame_PS_Spring_baseD2     ) = { 450/1000 }            ! Position
marker.pos (              3 ,       $M_Frame_PS_Spring_baseD2     ) = { -200/1000-0.0015+0.15 } ! Position
marker.ang (              1 ,       $M_Frame_PS_Spring_baseD2     ) = 0.00000000000000000E+00 ! Angles
marker.ang (              2 ,       $M_Frame_PS_Spring_baseD2     ) = 0.00000000000000000E+00 ! Angles
marker.txt (                        $M_Frame_PS_Spring_baseD2     ) = 'z由-197/1000调整为-200/1000' ! Comment

marker.type (                       $M_Frame_PS_Dmp_baseA         ) = 2                       ! Type
marker.parent (                     $M_Frame_PS_Dmp_baseA         ) = $B_Frame                ! Body
marker.pos (              1 ,       $M_Frame_PS_Dmp_baseA         ) = { 3430/2000 }           ! Position
marker.pos (              2 ,       $M_Frame_PS_Dmp_baseA         ) = { -450/1000 }           ! Position
marker.pos (              3 ,       $M_Frame_PS_Dmp_baseA         ) = -7.64999999999999986E-02 ! Position
marker.ang (              1 ,       $M_Frame_PS_Dmp_baseA         ) = 0.00000000000000000E+00 ! Angles
marker.ang (              2 ,       $M_Frame_PS_Dmp_baseA         ) = 0.00000000000000000E+00 ! Angles
marker.txt (                        $M_Frame_PS_Dmp_baseA         ) = 'z由-197/1000调整为-200/1000' ! Comment

marker.type (                       $M_Frame_PS_Dmp_baseC         ) = 2                       ! Type
marker.parent (                     $M_Frame_PS_Dmp_baseC         ) = $B_Frame                ! Body
marker.pos (              1 ,       $M_Frame_PS_Dmp_baseC         ) = { -3430/2000 }          ! Position
marker.pos (              2 ,       $M_Frame_PS_Dmp_baseC         ) = { -450/1000 }           ! Position
marker.pos (              3 ,       $M_Frame_PS_Dmp_baseC         ) = -7.64999999999999986E-02 ! Position
marker.ang (              1 ,       $M_Frame_PS_Dmp_baseC         ) = 0.00000000000000000E+00 ! Angles
marker.ang (              2 ,       $M_Frame_PS_Dmp_baseC         ) = 0.00000000000000000E+00 ! Angles
marker.txt (                        $M_Frame_PS_Dmp_baseC         ) = 'z由-197/1000调整为-200/1000' ! Comment

marker.type (                       $M_Frame_PS_Dmp_baseD         ) = 2                       ! Type
marker.parent (                     $M_Frame_PS_Dmp_baseD         ) = $B_Frame                ! Body
marker.pos (              1 ,       $M_Frame_PS_Dmp_baseD         ) = { -3430/2000 }          ! Position
marker.pos (              2 ,       $M_Frame_PS_Dmp_baseD         ) = { 450/1000 }            ! Position
marker.pos (              3 ,       $M_Frame_PS_Dmp_baseD         ) = -7.64999999999999986E-02 ! Position
marker.ang (              1 ,       $M_Frame_PS_Dmp_baseD         ) = 0.00000000000000000E+00 ! Angles
marker.ang (              2 ,       $M_Frame_PS_Dmp_baseD         ) = 0.00000000000000000E+00 ! Angles
marker.txt (                        $M_Frame_PS_Dmp_baseD         ) = 'z由-197/1000调整为-200/1000' ! Comment

marker.type (                       $M_Frame_AirSpring_A          ) = 2                       ! Type
marker.parent (                     $M_Frame_AirSpring_A          ) = $B_Frame                ! Body
marker.pos (              2 ,       $M_Frame_AirSpring_A          ) = { -1420/2000 }          ! Position
marker.pos (              3 ,       $M_Frame_AirSpring_A          ) = -3.59999999999999987E-01 ! Position
marker.txt (                        $M_Frame_AirSpring_A          ) = '-0.3575'               ! Comment

marker.type (                       $M_Frame_AirSpring_B          ) = 2                       ! Type
marker.parent (                     $M_Frame_AirSpring_B          ) = $B_Frame                ! Body
marker.pos (              2 ,       $M_Frame_AirSpring_B          ) = { 1420/2000 }           ! Position
marker.pos (              3 ,       $M_Frame_AirSpring_B          ) = -3.59999999999999987E-01 ! Position

marker.type (                       $M_Frame_SSLatDmp             ) = 2                       ! Type
marker.parent (                     $M_Frame_SSLatDmp             ) = $B_Frame                ! Body
marker.pos (              3 ,       $M_Frame_SSLatDmp             ) = -1.70000000000000012E-01 ! Position
marker.txt (                        $M_Frame_SSLatDmp             ) = '构架 - 二系横向减振器' ! Comment

marker.type (                       $M_Frame_AntiRoll             ) = 2                       ! Type
marker.parent (                     $M_Frame_AntiRoll             ) = $B_Frame                ! Body
marker.pos (              3 ,       $M_Frame_AntiRoll             ) = { 0.13-0.2 }            ! Position

marker.type (                       $M_Frame_TractionRod_A        ) = 2                       ! Type
marker.parent (                     $M_Frame_TractionRod_A        ) = $B_Frame                ! Body
marker.pos (              1 ,       $M_Frame_TractionRod_A        ) = -4.09999999999999976E-01 ! Position
marker.pos (              2 ,       $M_Frame_TractionRod_A        ) = -1.84999999999999998E-01 ! Position
marker.pos (              3 ,       $M_Frame_TractionRod_A        ) = -2.20000000000000001E-01 ! Position

marker.type (                       $M_Frame_TractionRod_B        ) = 2                       ! Type
marker.parent (                     $M_Frame_TractionRod_B        ) = $B_Frame                ! Body
marker.pos (              1 ,       $M_Frame_TractionRod_B        ) = 4.09999999999999976E-01 ! Position
marker.pos (              2 ,       $M_Frame_TractionRod_B        ) = 1.84999999999999998E-01 ! Position
marker.pos (              3 ,       $M_Frame_TractionRod_B        ) = -2.20000000000000001E-01 ! Position

marker.type (                       $M_Frame_LongiBar_A           ) = 2                       ! Type
marker.parent (                     $M_Frame_LongiBar_A           ) = $B_Frame                ! Body
marker.pos (              1 ,       $M_Frame_LongiBar_A           ) = { 855/2000 }            ! Position
marker.pos (              2 ,       $M_Frame_LongiBar_A           ) = { -260/2000 }           ! Position
marker.pos (              3 ,       $M_Frame_LongiBar_A           ) = 7.00000000000000067E-02 ! Position

marker.type (                       $M_Frame_LongiBar_B           ) = 2                       ! Type
marker.parent (                     $M_Frame_LongiBar_B           ) = $B_Frame                ! Body
marker.pos (              1 ,       $M_Frame_LongiBar_B           ) = { 855/2000 }            ! Position
marker.pos (              2 ,       $M_Frame_LongiBar_B           ) = { 260/2000 }            ! Position
marker.pos (              3 ,       $M_Frame_LongiBar_B           ) = 7.00000000000000067E-02 ! Position

marker.type (                       $M_Frame_LongiBar_C           ) = 2                       ! Type
marker.parent (                     $M_Frame_LongiBar_C           ) = $B_Frame                ! Body
marker.pos (              1 ,       $M_Frame_LongiBar_C           ) = { -855/2000 }           ! Position
marker.pos (              2 ,       $M_Frame_LongiBar_C           ) = { -260/2000 }           ! Position
marker.pos (              3 ,       $M_Frame_LongiBar_C           ) = 7.00000000000000067E-02 ! Position

marker.type (                       $M_Frame_LongiBar_D           ) = 2                       ! Type
marker.parent (                     $M_Frame_LongiBar_D           ) = $B_Frame                ! Body
marker.pos (              1 ,       $M_Frame_LongiBar_D           ) = { -855/2000 }           ! Position
marker.pos (              2 ,       $M_Frame_LongiBar_D           ) = { 260/2000 }            ! Position
marker.pos (              3 ,       $M_Frame_LongiBar_D           ) = 7.00000000000000067E-02 ! Position

marker.type (                       $M_Frame_AntiHuntingDmp_A     ) = 2                       ! Type
marker.parent (                     $M_Frame_AntiHuntingDmp_A     ) = $B_Frame                ! Body
marker.pos (              2 ,       $M_Frame_AntiHuntingDmp_A     ) = { -2260/2000 }          ! Position
marker.pos (              3 ,       $M_Frame_AntiHuntingDmp_A     ) = -3.69999999999999996E-01 ! Position

marker.type (                       $M_Frame_AntiHuntingDmp_B     ) = 2                       ! Type
marker.parent (                     $M_Frame_AntiHuntingDmp_B     ) = $B_Frame                ! Body
marker.pos (              2 ,       $M_Frame_AntiHuntingDmp_B     ) = { 2260/2000 }           ! Position
marker.pos (              3 ,       $M_Frame_AntiHuntingDmp_B     ) = -3.69999999999999996E-01 ! Position

marker.type (                       $M_Frame_Motor_A              ) = 2                       ! Type
marker.parent (                     $M_Frame_Motor_A              ) = $B_Frame                ! Body
marker.pos (              1 ,       $M_Frame_Motor_A              ) = { 2.5/2 }               ! Position
marker.pos (              2 ,       $M_Frame_Motor_A              ) = { -2050/2000 }          ! Position

marker.type (                       $M_Frame_Motor_B              ) = 2                       ! Type
marker.parent (                     $M_Frame_Motor_B              ) = $B_Frame                ! Body
marker.pos (              1 ,       $M_Frame_Motor_B              ) = { 2.5/2 }               ! Position
marker.pos (              2 ,       $M_Frame_Motor_B              ) = { 2050/2000 }           ! Position

marker.type (                       $M_Frame_Motor_C              ) = 2                       ! Type
marker.parent (                     $M_Frame_Motor_C              ) = $B_Frame                ! Body
marker.pos (              1 ,       $M_Frame_Motor_C              ) = { -2.5/2 }              ! Position
marker.pos (              2 ,       $M_Frame_Motor_C              ) = { -2050/2000 }          ! Position

marker.type (                       $M_Frame_Motor_D              ) = 2                       ! Type
marker.parent (                     $M_Frame_Motor_D              ) = $B_Frame                ! Body
marker.pos (              1 ,       $M_Frame_Motor_D              ) = { -2.5/2 }              ! Position
marker.pos (              2 ,       $M_Frame_Motor_D              ) = { 2050/2000 }           ! Position

joint.from (                        $J_Frame                      ) = $M_Isys                 ! From Marker
joint.to (                          $J_Frame                      ) = $M_Frame_BRF            ! To Marker
joint.type (                        $J_Frame                      ) = 7                       ! Type
joint.st.pos (            1 ,       $J_Frame                      ) = 0.00000000000000000E+00 ! Position
joint.st.pos (            2 ,       $J_Frame                      ) = 0.00000000000000000E+00 ! Position
joint.st.pos (            3 ,       $J_Frame                      ) = { -860/2000 }           ! Position
joint.st.pos (            4 ,       $J_Frame                      ) = 0.00000000000000000E+00 ! Position
joint.st.pos (            5 ,       $J_Frame                      ) = 0.00000000000000000E+00 ! Position
joint.st.pos (            6 ,       $J_Frame                      ) = 0.00000000000000000E+00 ! Position
joint.st.vel (            1 ,       $J_Frame                      ) = 5.55555555555555536E+00 ! Velocity
joint.st.vel (            2 ,       $J_Frame                      ) = 0.00000000000000000E+00 ! Velocity
joint.st.vel (            3 ,       $J_Frame                      ) = 0.00000000000000000E+00 ! Velocity
joint.st.vel (            4 ,       $J_Frame                      ) = 0.00000000000000000E+00 ! Velocity
joint.st.vel (            5 ,       $J_Frame                      ) = 0.00000000000000000E+00 ! Velocity
joint.st.vel (            6 ,       $J_Frame                      ) = 0.00000000000000000E+00 ! Velocity
joint.par (               3 ,       $J_Frame                      ) = 0.00000000000000000E+00 ! [-] Degrees of freedom
joint.par (              19 ,       $J_Frame                      ) = 0.00000000000000000E+00 ! [m] Longitudinal position offset
joint.attr.2d.pos.x (     1 ,       $J_Frame                      ) = 20
joint.attr.2d.pos.y (     1 ,       $J_Frame                      ) = 170
joint.attr.2d.ori (       1 ,       $J_Frame                      ) = 270

prim.type (                         $P_Frame                      ) = 39                      ! Type
prim.ref (                          $P_Frame                      ) = $M_Frame_BRF            ! Reference Marker
prim.pos (                1 ,       $P_Frame                      ) = 0.00000000000000000E+00 ! Position
prim.ang (                1 ,       $P_Frame                      ) = { 180 deg }             ! Angles
prim.color.r (            1 ,       $P_Frame                      ) = 2.55000000000000000E+02 ! Colors (red component)
prim.color.g (            1 ,       $P_Frame                      ) = 1.85000000000000000E+02 ! Colors (green component)
prim.color.b (            1 ,       $P_Frame                      ) = 1.50000000000000000E+01 ! Colors (blue component)
prim.color.t (            1 ,       $P_Frame                      ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.transparency (                 $P_Frame                      ) = 0.00000000000000000E+00 ! Transparency
prim.mp.dens.solid (                $P_Frame                      ) = { 7850 kg/m^3 }         ! Density
prim.par (                2 ,       $P_Frame                      ) = './几何模型_STL版本_构架.STL' ! [-] CAD file name
prim.par (                9 ,       $P_Frame                      ) = { 1/1000 }              ! [-] Global scaling factor
prim.par (               10 ,       $P_Frame                      ) = 0.00000000000000000E+00 ! [-] Scaling factor in x direction
prim.par (               11 ,       $P_Frame                      ) = 0.00000000000000000E+00 ! [-] Scaling factor in y direction
prim.par (               12 ,       $P_Frame                      ) = 0.00000000000000000E+00 ! [-] Scaling factor in z direction
prim.par (               13 ,       $P_Frame                      ) = 0.00000000000000000E+00 ! [-] Mirror in x direction
prim.par (               14 ,       $P_Frame                      ) = 0.00000000000000000E+00 ! [-] Mirror in y direction
prim.par (               15 ,       $P_Frame                      ) = 0.00000000000000000E+00 ! [-] Mirror in z direction
prim.par (               16 ,       $P_Frame                      ) = 0.00000000000000000E+00 ! [-] Switch vertex normals
prim.par (               17 ,       $P_Frame                      ) = 0.00000000000000000E+00 ! [-] Switch face normals
prim.par (               18 ,       $P_Frame                      ) = 0.00000000000000000E+00 ! [-] Repeat shape
prim.par (               30 ,       $P_Frame                      ) = 0.00000000000000000E+00 ! [-] Wireframe representation
prim.par (               31 ,       $P_Frame                      ) = 5.23598775598298816E-01 ! [rad] Sharp edge angle
prim.par (               32 ,       $P_Frame                      ) = 0.00000000000000000E+00 ! [-] Vertex normal (re-)computation


body.m (                            $B_DUM                        ) = 1.00000000000000000E+00 ! Mass of the Body
body.I.tens (             1 ,   1 , $B_DUM                        ) = 1.00000000000000000E+00 ! Moments of inertia
body.I.tens (             2 ,   2 , $B_DUM                        ) = 1.00000000000000000E+00 ! Moments of inertia
body.I.tens (             3 ,   3 , $B_DUM                        ) = 1.00000000000000000E+00 ! Moments of inertia
body.I.kind (                       $B_DUM                        ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker

marker.type (                       $M_DUM_BRF                    ) = 1                       ! Type
marker.parent (                     $M_DUM_BRF                    ) = $B_DUM                  ! Body
marker.flx.type (                   $M_DUM_BRF                    ) = 4                       ! Flexible type

marker.type (                       $M_DUM_AirSpring_A            ) = 2                       ! Type
marker.parent (                     $M_DUM_AirSpring_A            ) = $B_DUM                  ! Body
marker.pos (              2 ,       $M_DUM_AirSpring_A            ) = { -1420/2000 }          ! Position
marker.pos (              3 ,       $M_DUM_AirSpring_A            ) = 2.09999999999999992E-01 ! Position

marker.type (                       $M_DUM_AirSpring_B            ) = 2                       ! Type
marker.parent (                     $M_DUM_AirSpring_B            ) = $B_DUM                  ! Body
marker.pos (              2 ,       $M_DUM_AirSpring_B            ) = { 1420/2000 }           ! Position
marker.pos (              3 ,       $M_DUM_AirSpring_B            ) = 2.09999999999999992E-01 ! Position

marker.type (                       $M_DUM_SSLatDmp               ) = 2                       ! Type
marker.parent (                     $M_DUM_SSLatDmp               ) = $B_DUM                  ! Body
marker.pos (              3 ,       $M_DUM_SSLatDmp               ) = 4.00000000000000022E-01 ! Position
marker.txt (                        $M_DUM_SSLatDmp               ) = '虚车体 - 二系横向减振器' ! Comment

marker.type (                       $M_DUM_AntiRoll               ) = 2                       ! Type
marker.parent (                     $M_DUM_AntiRoll               ) = $B_DUM                  ! Body
marker.pos (              3 ,       $M_DUM_AntiRoll               ) = { 0.7-0.2 }             ! Position

marker.type (                       $M_DUM_TractionRod_A          ) = 2                       ! Type
marker.parent (                     $M_DUM_TractionRod_A          ) = $B_DUM                  ! Body
marker.pos (              1 ,       $M_DUM_TractionRod_A          ) = { -410/1000 }           ! Position
marker.pos (              2 ,       $M_DUM_TractionRod_A          ) = { -370/2000 }           ! Position
marker.pos (              3 ,       $M_DUM_TractionRod_A          ) = 3.49999999999999978E-01 ! Position

marker.type (                       $M_DUM_TractionRod_B          ) = 2                       ! Type
marker.parent (                     $M_DUM_TractionRod_B          ) = $B_DUM                  ! Body
marker.pos (              1 ,       $M_DUM_TractionRod_B          ) = { 410/1000 }            ! Position
marker.pos (              2 ,       $M_DUM_TractionRod_B          ) = { 370/2000 }            ! Position
marker.pos (              3 ,       $M_DUM_TractionRod_B          ) = 3.49999999999999978E-01 ! Position

marker.type (                       $M_DUM_AntiHuntingDmp_A       ) = 2                       ! Type
marker.parent (                     $M_DUM_AntiHuntingDmp_A       ) = $B_DUM                  ! Body
marker.pos (              2 ,       $M_DUM_AntiHuntingDmp_A       ) = { -2260/2000 }          ! Position
marker.pos (              3 ,       $M_DUM_AntiHuntingDmp_A       ) = 2.00000000000000011E-01 ! Position

marker.type (                       $M_DUM_AntiHuntingDmp_B       ) = 2                       ! Type
marker.parent (                     $M_DUM_AntiHuntingDmp_B       ) = $B_DUM                  ! Body
marker.pos (              2 ,       $M_DUM_AntiHuntingDmp_B       ) = { 2260/2000 }           ! Position
marker.pos (              3 ,       $M_DUM_AntiHuntingDmp_B       ) = 2.00000000000000011E-01 ! Position

joint.from (                        $J_DUM                        ) = $M_Isys_DumIsHere       ! From Marker
joint.to (                          $J_DUM                        ) = $M_DUM_BRF              ! To Marker
joint.type (                        $J_DUM                        ) = 7                       ! Type
joint.st.pos (            1 ,       $J_DUM                        ) = 0.00000000000000000E+00 ! Position
joint.st.pos (            2 ,       $J_DUM                        ) = 0.00000000000000000E+00 ! Position
joint.st.pos (            3 ,       $J_DUM                        ) = 0.00000000000000000E+00 ! Position
joint.st.pos (            4 ,       $J_DUM                        ) = 0.00000000000000000E+00 ! Position
joint.st.pos (            5 ,       $J_DUM                        ) = 0.00000000000000000E+00 ! Position
joint.st.pos (            6 ,       $J_DUM                        ) = 0.00000000000000000E+00 ! Position
joint.st.vel (            1 ,       $J_DUM                        ) = 5.55555555555555536E+00 ! Velocity
joint.st.vel (            2 ,       $J_DUM                        ) = 0.00000000000000000E+00 ! Velocity
joint.st.vel (            3 ,       $J_DUM                        ) = 0.00000000000000000E+00 ! Velocity
joint.st.vel (            4 ,       $J_DUM                        ) = 0.00000000000000000E+00 ! Velocity
joint.st.vel (            5 ,       $J_DUM                        ) = 0.00000000000000000E+00 ! Velocity
joint.st.vel (            6 ,       $J_DUM                        ) = 0.00000000000000000E+00 ! Velocity
joint.par (               3 ,       $J_DUM                        ) = 0.00000000000000000E+00 ! [-] Degrees of freedom
joint.par (              19 ,       $J_DUM                        ) = 0.00000000000000000E+00 ! [m] Longitudinal position offset

prim.type (                         $P_DUM                        ) = 1                       ! Type
prim.ref (                          $P_DUM                        ) = $M_DUM_BRF              ! Reference Marker
prim.color.r (            1 ,       $P_DUM                        ) = 1.28000000000000000E+02 ! Colors (red component)
prim.color.g (            1 ,       $P_DUM                        ) = 1.28000000000000000E+02 ! Colors (green component)
prim.color.b (            1 ,       $P_DUM                        ) = 1.28000000000000000E+02 ! Colors (blue component)
prim.color.t (            1 ,       $P_DUM                        ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.drawstyle (                    $P_DUM                        ) = 2                       ! Draw style
prim.par (                2 ,       $P_DUM                        ) = 5.00000000000000000E-01 ! [m] Length in X
prim.par (                3 ,       $P_DUM                        ) = 2.00000000000000000E+00 ! [m] Length in Y
prim.par (                4 ,       $P_DUM                        ) = 2.00000000000000011E-01 ! [m] Length in Z


body.m (                            $B_LongiBar_A                 ) = 1.00000000000000000E+00 ! Mass of the Body
body.mp (                           $B_LongiBar_A                 ) = 1                       ! 0=manual; 1=auto (based on geometry); 2=mass manual, CG & Inertia auto
body.I.tens (             1 ,   1 , $B_LongiBar_A                 ) = 1.00000000000000000E+00 ! Moments of inertia
body.I.tens (             2 ,   2 , $B_LongiBar_A                 ) = 1.00000000000000000E+00 ! Moments of inertia
body.I.tens (             3 ,   3 , $B_LongiBar_A                 ) = 1.00000000000000000E+00 ! Moments of inertia
body.I.kind (                       $B_LongiBar_A                 ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker

marker.type (                       $M_LongiBar_A_BRF             ) = 1                       ! Type
marker.parent (                     $M_LongiBar_A_BRF             ) = $B_LongiBar_A           ! Body
marker.flx.type (                   $M_LongiBar_A_BRF             ) = 4                       ! Flexible type

marker.type (                       $M_LongiBar_A_FrameSide       ) = 2                       ! Type
marker.parent (                     $M_LongiBar_A_FrameSide       ) = $B_LongiBar_A           ! Body
marker.pos (              2 ,       $M_LongiBar_A_FrameSide       ) = { -sqrt(0.8225^2+0.08^2)/2 } ! Position

marker.type (                       $M_LongiBar_A_WheelSide       ) = 2                       ! Type
marker.parent (                     $M_LongiBar_A_WheelSide       ) = $B_LongiBar_A           ! Body
marker.pos (              2 ,       $M_LongiBar_A_WheelSide       ) = { sqrt(0.8225^2+0.08^2)/2 } ! Position

joint.from (                        $J_LongiBar_A                 ) = $S_IRW_Front.$M_AxleBridge_LongiBar_A ! From Marker
joint.to (                          $J_LongiBar_A                 ) = $M_LongiBar_A_WheelSide ! To Marker
joint.type (                        $J_LongiBar_A                 ) = 10                      ! Type
joint.st.pos (            1 ,       $J_LongiBar_A                 ) = 0.00000000000000000E+00 ! Position
joint.st.pos (            2 ,       $J_LongiBar_A                 ) = 0.00000000000000000E+00 ! Position
joint.st.pos (            3 ,       $J_LongiBar_A                 ) = { -atan(0.08/0.8225)+pi/2+pi } ! Position
joint.st.vel (            1 ,       $J_LongiBar_A                 ) = 0.00000000000000000E+00 ! Velocity
joint.st.vel (            2 ,       $J_LongiBar_A                 ) = 0.00000000000000000E+00 ! Velocity
joint.st.vel (            3 ,       $J_LongiBar_A                 ) = 0.00000000000000000E+00 ! Velocity

prim.type (                         $P_LongiBar_A                 ) = 2                       ! Type
prim.ref (                          $P_LongiBar_A                 ) = $M_LongiBar_A_BRF       ! Reference Marker
prim.color.r (            1 ,       $P_LongiBar_A                 ) = 2.55000000000000000E+02 ! Colors (red component)
prim.color.r (            2 ,       $P_LongiBar_A                 ) = 1.28000000000000000E+02 ! Colors (red component)
prim.color.g (            1 ,       $P_LongiBar_A                 ) = 2.50000000000000000E+02 ! Colors (green component)
prim.color.g (            2 ,       $P_LongiBar_A                 ) = 1.28000000000000000E+02 ! Colors (green component)
prim.color.b (            1 ,       $P_LongiBar_A                 ) = 2.05000000000000000E+02 ! Colors (blue component)
prim.color.b (            2 ,       $P_LongiBar_A                 ) = 1.28000000000000000E+02 ! Colors (blue component)
prim.color.t (            1 ,       $P_LongiBar_A                 ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.color.t (            2 ,       $P_LongiBar_A                 ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.mp.dens.solid (                $P_LongiBar_A                 ) = 7.85000000000000000E+03 ! Density
prim.par (                2 ,       $P_LongiBar_A                 ) = { sqrt(0.8225^2+0.08^2) } ! [m] Height
prim.par (                3 ,       $P_LongiBar_A                 ) = { 70/1000 }             ! [m] Outer diameter
prim.par (                4 ,       $P_LongiBar_A                 ) = 0.00000000000000000E+00 ! [m] Inner diameter
prim.par (                5 ,       $P_LongiBar_A                 ) = 1.20000000000000000E+01 ! [-] Number of planes
prim.par (                6 ,       $P_LongiBar_A                 ) = 0.00000000000000000E+00 ! [-] Number of highlighted planes
prim.par (                7 ,       $P_LongiBar_A                 ) = 1.00000000000000000E+00 ! [-] Show bottom cap
prim.par (                8 ,       $P_LongiBar_A                 ) = 1.00000000000000000E+00 ! [-] Show top cap
prim.par (                9 ,       $P_LongiBar_A                 ) = 0.00000000000000000E+00 ! [rad] Start angle
prim.par (               10 ,       $P_LongiBar_A                 ) = 0.00000000000000000E+00 ! [rad] Delta angle
prim.par (               11 ,       $P_LongiBar_A                 ) = 0.00000000000000000E+00 ! [-] Close geometry with


body.m (                            $B_LongiBar_B                 ) = 1.00000000000000000E+00 ! Mass of the Body
body.mp (                           $B_LongiBar_B                 ) = 1                       ! 0=manual; 1=auto (based on geometry); 2=mass manual, CG & Inertia auto
body.I.tens (             1 ,   1 , $B_LongiBar_B                 ) = 1.00000000000000000E+00 ! Moments of inertia
body.I.tens (             2 ,   2 , $B_LongiBar_B                 ) = 1.00000000000000000E+00 ! Moments of inertia
body.I.tens (             3 ,   3 , $B_LongiBar_B                 ) = 1.00000000000000000E+00 ! Moments of inertia
body.I.kind (                       $B_LongiBar_B                 ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker

marker.type (                       $M_LongiBar_B_BRF             ) = 1                       ! Type
marker.parent (                     $M_LongiBar_B_BRF             ) = $B_LongiBar_B           ! Body
marker.flx.type (                   $M_LongiBar_B_BRF             ) = 4                       ! Flexible type

marker.type (                       $M_LongiBar_B_FrameSide       ) = 2                       ! Type
marker.parent (                     $M_LongiBar_B_FrameSide       ) = $B_LongiBar_B           ! Body
marker.pos (              2 ,       $M_LongiBar_B_FrameSide       ) = { -sqrt(0.8225^2+0.08^2)/2 } ! Position

marker.type (                       $M_LongiBar_B_WheelSide       ) = 2                       ! Type
marker.parent (                     $M_LongiBar_B_WheelSide       ) = $B_LongiBar_B           ! Body
marker.pos (              2 ,       $M_LongiBar_B_WheelSide       ) = { sqrt(0.8225^2+0.08^2)/2 } ! Position

joint.from (                        $J_LongiBar_B                 ) = $S_IRW_Front.$M_AxleBridge_LongiBar_B ! From Marker
joint.to (                          $J_LongiBar_B                 ) = $M_LongiBar_B_WheelSide ! To Marker
joint.type (                        $J_LongiBar_B                 ) = 10                      ! Type
joint.st.pos (            1 ,       $J_LongiBar_B                 ) = 0.00000000000000000E+00 ! Position
joint.st.pos (            2 ,       $J_LongiBar_B                 ) = 0.00000000000000000E+00 ! Position
joint.st.pos (            3 ,       $J_LongiBar_B                 ) = { atan(0.08/0.8225)+pi/2+pi } ! Position
joint.st.vel (            1 ,       $J_LongiBar_B                 ) = 0.00000000000000000E+00 ! Velocity
joint.st.vel (            2 ,       $J_LongiBar_B                 ) = 0.00000000000000000E+00 ! Velocity
joint.st.vel (            3 ,       $J_LongiBar_B                 ) = 0.00000000000000000E+00 ! Velocity

prim.type (                         $P_LongiBar_B                 ) = 2                       ! Type
prim.ref (                          $P_LongiBar_B                 ) = $M_LongiBar_B_BRF       ! Reference Marker
prim.color.r (            1 ,       $P_LongiBar_B                 ) = 2.55000000000000000E+02 ! Colors (red component)
prim.color.r (            2 ,       $P_LongiBar_B                 ) = 1.28000000000000000E+02 ! Colors (red component)
prim.color.g (            1 ,       $P_LongiBar_B                 ) = 2.50000000000000000E+02 ! Colors (green component)
prim.color.g (            2 ,       $P_LongiBar_B                 ) = 1.28000000000000000E+02 ! Colors (green component)
prim.color.b (            1 ,       $P_LongiBar_B                 ) = 2.05000000000000000E+02 ! Colors (blue component)
prim.color.b (            2 ,       $P_LongiBar_B                 ) = 1.28000000000000000E+02 ! Colors (blue component)
prim.color.t (            1 ,       $P_LongiBar_B                 ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.color.t (            2 ,       $P_LongiBar_B                 ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.mp.dens.solid (                $P_LongiBar_B                 ) = 7.85000000000000000E+03 ! Density
prim.par (                2 ,       $P_LongiBar_B                 ) = { sqrt(0.8225^2+0.08^2) } ! [m] Height
prim.par (                3 ,       $P_LongiBar_B                 ) = { 70/1000 }             ! [m] Outer diameter
prim.par (                4 ,       $P_LongiBar_B                 ) = 0.00000000000000000E+00 ! [m] Inner diameter
prim.par (                5 ,       $P_LongiBar_B                 ) = 1.20000000000000000E+01 ! [-] Number of planes
prim.par (                6 ,       $P_LongiBar_B                 ) = 0.00000000000000000E+00 ! [-] Number of highlighted planes
prim.par (                7 ,       $P_LongiBar_B                 ) = 1.00000000000000000E+00 ! [-] Show bottom cap
prim.par (                8 ,       $P_LongiBar_B                 ) = 1.00000000000000000E+00 ! [-] Show top cap
prim.par (                9 ,       $P_LongiBar_B                 ) = 0.00000000000000000E+00 ! [rad] Start angle
prim.par (               10 ,       $P_LongiBar_B                 ) = 0.00000000000000000E+00 ! [rad] Delta angle
prim.par (               11 ,       $P_LongiBar_B                 ) = 0.00000000000000000E+00 ! [-] Close geometry with


body.m (                            $B_LongiBar_C                 ) = 1.00000000000000000E+00 ! Mass of the Body
body.mp (                           $B_LongiBar_C                 ) = 1                       ! 0=manual; 1=auto (based on geometry); 2=mass manual, CG & Inertia auto
body.I.tens (             1 ,   1 , $B_LongiBar_C                 ) = 1.00000000000000000E+00 ! Moments of inertia
body.I.tens (             2 ,   2 , $B_LongiBar_C                 ) = 1.00000000000000000E+00 ! Moments of inertia
body.I.tens (             3 ,   3 , $B_LongiBar_C                 ) = 1.00000000000000000E+00 ! Moments of inertia
body.I.kind (                       $B_LongiBar_C                 ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker

marker.type (                       $M_LongiBar_C_BRF             ) = 1                       ! Type
marker.parent (                     $M_LongiBar_C_BRF             ) = $B_LongiBar_C           ! Body
marker.flx.type (                   $M_LongiBar_C_BRF             ) = 4                       ! Flexible type

marker.type (                       $M_LongiBar_C_FrameSide       ) = 2                       ! Type
marker.parent (                     $M_LongiBar_C_FrameSide       ) = $B_LongiBar_C           ! Body
marker.pos (              2 ,       $M_LongiBar_C_FrameSide       ) = { -sqrt(0.8225^2+0.08^2)/2 } ! Position

marker.type (                       $M_LongiBar_C_WheelSide       ) = 2                       ! Type
marker.parent (                     $M_LongiBar_C_WheelSide       ) = $B_LongiBar_C           ! Body
marker.pos (              2 ,       $M_LongiBar_C_WheelSide       ) = { sqrt(0.8225^2+0.08^2)/2 } ! Position

joint.from (                        $J_LongiBar_C                 ) = $S_IRW_Rear.$M_AxleBridge_LongiBar_A ! From Marker
joint.to (                          $J_LongiBar_C                 ) = $M_LongiBar_C_WheelSide ! To Marker
joint.type (                        $J_LongiBar_C                 ) = 10                      ! Type
joint.st.pos (            1 ,       $J_LongiBar_C                 ) = 0.00000000000000000E+00 ! Position
joint.st.pos (            2 ,       $J_LongiBar_C                 ) = 0.00000000000000000E+00 ! Position
joint.st.pos (            3 ,       $J_LongiBar_C                 ) = { atan(0.08/0.8225)+pi/2 } ! Position
joint.st.vel (            1 ,       $J_LongiBar_C                 ) = 0.00000000000000000E+00 ! Velocity
joint.st.vel (            2 ,       $J_LongiBar_C                 ) = 0.00000000000000000E+00 ! Velocity
joint.st.vel (            3 ,       $J_LongiBar_C                 ) = 0.00000000000000000E+00 ! Velocity

prim.type (                         $P_LongiBar_C                 ) = 2                       ! Type
prim.ref (                          $P_LongiBar_C                 ) = $M_LongiBar_C_BRF       ! Reference Marker
prim.color.r (            1 ,       $P_LongiBar_C                 ) = 2.55000000000000000E+02 ! Colors (red component)
prim.color.r (            2 ,       $P_LongiBar_C                 ) = 1.28000000000000000E+02 ! Colors (red component)
prim.color.g (            1 ,       $P_LongiBar_C                 ) = 2.50000000000000000E+02 ! Colors (green component)
prim.color.g (            2 ,       $P_LongiBar_C                 ) = 1.28000000000000000E+02 ! Colors (green component)
prim.color.b (            1 ,       $P_LongiBar_C                 ) = 2.05000000000000000E+02 ! Colors (blue component)
prim.color.b (            2 ,       $P_LongiBar_C                 ) = 1.28000000000000000E+02 ! Colors (blue component)
prim.color.t (            1 ,       $P_LongiBar_C                 ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.color.t (            2 ,       $P_LongiBar_C                 ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.mp.dens.solid (                $P_LongiBar_C                 ) = 7.85000000000000000E+03 ! Density
prim.par (                2 ,       $P_LongiBar_C                 ) = { sqrt(0.8225^2+0.08^2) } ! [m] Height
prim.par (                3 ,       $P_LongiBar_C                 ) = { 70/1000 }             ! [m] Outer diameter
prim.par (                4 ,       $P_LongiBar_C                 ) = 0.00000000000000000E+00 ! [m] Inner diameter
prim.par (                5 ,       $P_LongiBar_C                 ) = 1.20000000000000000E+01 ! [-] Number of planes
prim.par (                6 ,       $P_LongiBar_C                 ) = 0.00000000000000000E+00 ! [-] Number of highlighted planes
prim.par (                7 ,       $P_LongiBar_C                 ) = 1.00000000000000000E+00 ! [-] Show bottom cap
prim.par (                8 ,       $P_LongiBar_C                 ) = 1.00000000000000000E+00 ! [-] Show top cap
prim.par (                9 ,       $P_LongiBar_C                 ) = 0.00000000000000000E+00 ! [rad] Start angle
prim.par (               10 ,       $P_LongiBar_C                 ) = 0.00000000000000000E+00 ! [rad] Delta angle
prim.par (               11 ,       $P_LongiBar_C                 ) = 0.00000000000000000E+00 ! [-] Close geometry with


body.m (                            $B_LongiBar_D                 ) = 1.00000000000000000E+00 ! Mass of the Body
body.mp (                           $B_LongiBar_D                 ) = 1                       ! 0=manual; 1=auto (based on geometry); 2=mass manual, CG & Inertia auto
body.I.tens (             1 ,   1 , $B_LongiBar_D                 ) = 1.00000000000000000E+00 ! Moments of inertia
body.I.tens (             2 ,   2 , $B_LongiBar_D                 ) = 1.00000000000000000E+00 ! Moments of inertia
body.I.tens (             3 ,   3 , $B_LongiBar_D                 ) = 1.00000000000000000E+00 ! Moments of inertia
body.I.kind (                       $B_LongiBar_D                 ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker

marker.type (                       $M_LongiBar_D_BRF             ) = 1                       ! Type
marker.parent (                     $M_LongiBar_D_BRF             ) = $B_LongiBar_D           ! Body
marker.flx.type (                   $M_LongiBar_D_BRF             ) = 4                       ! Flexible type

marker.type (                       $M_LongiBar_D_FrameSide       ) = 2                       ! Type
marker.parent (                     $M_LongiBar_D_FrameSide       ) = $B_LongiBar_D           ! Body
marker.pos (              2 ,       $M_LongiBar_D_FrameSide       ) = { -sqrt(0.8225^2+0.08^2)/2 } ! Position

marker.type (                       $M_LongiBar_D_WheelSide       ) = 2                       ! Type
marker.parent (                     $M_LongiBar_D_WheelSide       ) = $B_LongiBar_D           ! Body
marker.pos (              2 ,       $M_LongiBar_D_WheelSide       ) = { sqrt(0.8225^2+0.08^2)/2 } ! Position

joint.from (                        $J_LongiBar_D                 ) = $S_IRW_Rear.$M_AxleBridge_LongiBar_B ! From Marker
joint.to (                          $J_LongiBar_D                 ) = $M_LongiBar_D_WheelSide ! To Marker
joint.type (                        $J_LongiBar_D                 ) = 10                      ! Type
joint.st.pos (            1 ,       $J_LongiBar_D                 ) = 0.00000000000000000E+00 ! Position
joint.st.pos (            2 ,       $J_LongiBar_D                 ) = 0.00000000000000000E+00 ! Position
joint.st.pos (            3 ,       $J_LongiBar_D                 ) = { -atan(0.08/0.8225)+pi/2 } ! Position
joint.st.vel (            1 ,       $J_LongiBar_D                 ) = 0.00000000000000000E+00 ! Velocity
joint.st.vel (            2 ,       $J_LongiBar_D                 ) = 0.00000000000000000E+00 ! Velocity
joint.st.vel (            3 ,       $J_LongiBar_D                 ) = 0.00000000000000000E+00 ! Velocity

prim.type (                         $P_LongiBar_D                 ) = 2                       ! Type
prim.ref (                          $P_LongiBar_D                 ) = $M_LongiBar_D_BRF       ! Reference Marker
prim.color.r (            1 ,       $P_LongiBar_D                 ) = 2.55000000000000000E+02 ! Colors (red component)
prim.color.r (            2 ,       $P_LongiBar_D                 ) = 1.28000000000000000E+02 ! Colors (red component)
prim.color.g (            1 ,       $P_LongiBar_D                 ) = 2.50000000000000000E+02 ! Colors (green component)
prim.color.g (            2 ,       $P_LongiBar_D                 ) = 1.28000000000000000E+02 ! Colors (green component)
prim.color.b (            1 ,       $P_LongiBar_D                 ) = 2.05000000000000000E+02 ! Colors (blue component)
prim.color.b (            2 ,       $P_LongiBar_D                 ) = 1.28000000000000000E+02 ! Colors (blue component)
prim.color.t (            1 ,       $P_LongiBar_D                 ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.color.t (            2 ,       $P_LongiBar_D                 ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.mp.dens.solid (                $P_LongiBar_D                 ) = 7.85000000000000000E+03 ! Density
prim.par (                2 ,       $P_LongiBar_D                 ) = { sqrt(0.8225^2+0.08^2) } ! [m] Height
prim.par (                3 ,       $P_LongiBar_D                 ) = { 70/1000 }             ! [m] Outer diameter
prim.par (                4 ,       $P_LongiBar_D                 ) = 0.00000000000000000E+00 ! [m] Inner diameter
prim.par (                5 ,       $P_LongiBar_D                 ) = 1.20000000000000000E+01 ! [-] Number of planes
prim.par (                6 ,       $P_LongiBar_D                 ) = 0.00000000000000000E+00 ! [-] Number of highlighted planes
prim.par (                7 ,       $P_LongiBar_D                 ) = 1.00000000000000000E+00 ! [-] Show bottom cap
prim.par (                8 ,       $P_LongiBar_D                 ) = 1.00000000000000000E+00 ! [-] Show top cap
prim.par (                9 ,       $P_LongiBar_D                 ) = 0.00000000000000000E+00 ! [rad] Start angle
prim.par (               10 ,       $P_LongiBar_D                 ) = 0.00000000000000000E+00 ! [rad] Delta angle
prim.par (               11 ,       $P_LongiBar_D                 ) = 0.00000000000000000E+00 ! [-] Close geometry with


!**********************************************************************
! Constraints
!**********************************************************************
constr.from (                       $L_LockLR_A                   ) = $S_IRW_Front.$M_IRW_L_BRF ! From Marker
constr.to (                         $L_LockLR_A                   ) = $S_IRW_Front.$M_IRW_R_BRF ! To Marker
constr.type (                       $L_LockLR_A                   ) = 0                       ! Type
constr.par (              3 ,       $L_LockLR_A                   ) = 0.00000000000000000E+00 ! [m] Translation in x
constr.par (              4 ,       $L_LockLR_A                   ) = 0.00000000000000000E+00 ! [m] Translation in y
constr.par (              5 ,       $L_LockLR_A                   ) = 0.00000000000000000E+00 ! [m] Translation in z
constr.par (              6 ,       $L_LockLR_A                   ) = 0.00000000000000000E+00 ! [-] Rotation sequence
constr.par (              7 ,       $L_LockLR_A                   ) = 0.00000000000000000E+00 ! [rad] Rotation about al
constr.par (              8 ,       $L_LockLR_A                   ) = 0.00000000000000000E+00 ! [rad] Rotation about be
constr.par (              9 ,       $L_LockLR_A                   ) = 0.00000000000000000E+00 ! [rad] Rotation about ga

constr.from (                       $L_LockLR_B                   ) = $S_IRW_Rear.$M_IRW_L_BRF ! From Marker
constr.to (                         $L_LockLR_B                   ) = $S_IRW_Rear.$M_IRW_R_BRF ! To Marker
constr.type (                       $L_LockLR_B                   ) = 0                       ! Type
constr.par (              3 ,       $L_LockLR_B                   ) = 0.00000000000000000E+00 ! [m] Translation in x
constr.par (              4 ,       $L_LockLR_B                   ) = 0.00000000000000000E+00 ! [m] Translation in y
constr.par (              5 ,       $L_LockLR_B                   ) = 0.00000000000000000E+00 ! [m] Translation in z
constr.par (              6 ,       $L_LockLR_B                   ) = 0.00000000000000000E+00 ! [-] Rotation sequence
constr.par (              7 ,       $L_LockLR_B                   ) = 0.00000000000000000E+00 ! [rad] Rotation about al
constr.par (              8 ,       $L_LockLR_B                   ) = 0.00000000000000000E+00 ! [rad] Rotation about be
constr.par (              9 ,       $L_LockLR_B                   ) = 0.00000000000000000E+00 ! [rad] Rotation about ga

!**********************************************************************
! Force Elements
!**********************************************************************
force.type (                        $F_PS_Spring_A1               ) = 86                      ! Type
force.from (                        $F_PS_Spring_A1               ) = $M_Frame_PS_Spring_baseA1 ! From Marker
force.to (                          $F_PS_Spring_A1               ) = $S_IRW_Front.$M_AxleBridge_PS_Spring_baseA ! To Marker
force.st.equi (           1 ,       $F_PS_Spring_A1               ) = 0                       ! Equilibrium
force.st.equi (           2 ,       $F_PS_Spring_A1               ) = 0                       ! Equilibrium
force.preld.calc (        4 ,       $F_PS_Spring_A1               ) = 1                       ! Select Preload cal.
force.par (               2 ,       $F_PS_Spring_A1               ) = 0.00000000000000000E+00 ! [N] Nominal force F_nom_x
force.par (               3 ,       $F_PS_Spring_A1               ) = 0.00000000000000000E+00 ! [N] Nominal force F_nom_y
force.par (               4 ,       $F_PS_Spring_A1               ) = -3.30987391695511906E+03 ! [N] Nominal force F_nom_z
force.par (               5 ,       $F_PS_Spring_A1               ) = 0.00000000000000000E+00 ! [Nm] Nominal torque T_nom_al
force.par (               6 ,       $F_PS_Spring_A1               ) = 0.00000000000000000E+00 ! [Nm] Nominal torque T_nom_be
force.par (               7 ,       $F_PS_Spring_A1               ) = 0.00000000000000000E+00 ! [Nm] Nominal torque T_nom_ga
force.par (               8 ,       $F_PS_Spring_A1               ) = 0.00000000000000000E+00 ! [N/m] Transl. ser. stiffness cs_x
force.par (               9 ,       $F_PS_Spring_A1               ) = 0.00000000000000000E+00 ! [N/m] Transl. ser. stiffness cs_y
force.par (              10 ,       $F_PS_Spring_A1               ) = 0.00000000000000000E+00 ! [N/m] Transl. ser. stiffness cs_z
force.par (              11 ,       $F_PS_Spring_A1               ) = 0.00000000000000000E+00 ! [Nm/rad] Rotat.  ser. stiffness cs_al
force.par (              12 ,       $F_PS_Spring_A1               ) = 0.00000000000000000E+00 ! [Nm/rad] Rotat.  ser. stiffness cs_be
force.par (              13 ,       $F_PS_Spring_A1               ) = 0.00000000000000000E+00 ! [Nm/rad] Rotat.  ser. stiffness cs_ga
force.par (              20 ,       $F_PS_Spring_A1               ) = 8.00000000000000000E+05 ! [N/m] Transl. par. stiffness cp_x
force.par (              21 ,       $F_PS_Spring_A1               ) = 8.00000000000000000E+05 ! [N/m] Transl. par. stiffness cp_y
force.par (              22 ,       $F_PS_Spring_A1               ) = 6.00000000000000000E+05 ! [N/m] Transl. par. stiffness cp_z
force.par (              23 ,       $F_PS_Spring_A1               ) = 0.00000000000000000E+00 ! [Nm/rad] Rotat.  par. stiffness cp_al
force.par (              24 ,       $F_PS_Spring_A1               ) = 0.00000000000000000E+00 ! [Nm/rad] Rotat.  par. stiffness cp_be
force.par (              25 ,       $F_PS_Spring_A1               ) = 0.00000000000000000E+00 ! [Nm/rad] Rotat.  par. stiffness cp_ga
force.par (              26 ,       $F_PS_Spring_A1               ) = 0.00000000000000000E+00 ! [Ns/m] Transl. par. damping dp_x
force.par (              27 ,       $F_PS_Spring_A1               ) = 0.00000000000000000E+00 ! [Ns/m] Transl. par. damping dp_y
force.par (              28 ,       $F_PS_Spring_A1               ) = 0.00000000000000000E+00 ! [Ns/m] Transl. par. damping dp_z
force.par (              29 ,       $F_PS_Spring_A1               ) = 0.00000000000000000E+00 ! [Nms/rad] Rotat.  par. damping dp_al
force.par (              30 ,       $F_PS_Spring_A1               ) = 0.00000000000000000E+00 ! [Nms/rad] Rotat.  par. damping dp_be
force.par (              31 ,       $F_PS_Spring_A1               ) = 0.00000000000000000E+00 ! [Nms/rad] Rotat.  par. damping dp_ga
force.par (              32 ,       $F_PS_Spring_A1               ) = 0.00000000000000000E+00 ! [m] Nominal length x_nom
force.par (              33 ,       $F_PS_Spring_A1               ) = 0.00000000000000000E+00 ! [m] Nominal length y_nom
force.par (              34 ,       $F_PS_Spring_A1               ) = 0.00000000000000000E+00 ! [m] Nominal length z_nom
force.par (              35 ,       $F_PS_Spring_A1               ) = 0.00000000000000000E+00 ! [rad] Nominal angle al_nom
force.par (              36 ,       $F_PS_Spring_A1               ) = 0.00000000000000000E+00 ! [rad] Nominal angle be_nom
force.par (              37 ,       $F_PS_Spring_A1               ) = 0.00000000000000000E+00 ! [rad] Nominal angle ga_nom
force.par (              38 ,       $F_PS_Spring_A1               ) = 0.00000000000000000E+00 ! [-] Mode of angle calculation

force.type (                        $F_PS_Spring_B1               ) = 86                      ! Type
force.from (                        $F_PS_Spring_B1               ) = $M_Frame_PS_Spring_baseB1 ! From Marker
force.to (                          $F_PS_Spring_B1               ) = $S_IRW_Front.$M_AxleBridge_PS_Spring_baseB ! To Marker
force.st.equi (           1 ,       $F_PS_Spring_B1               ) = 0                       ! Equilibrium
force.st.equi (           2 ,       $F_PS_Spring_B1               ) = 0                       ! Equilibrium
force.preld.calc (        4 ,       $F_PS_Spring_B1               ) = 1                       ! Select Preload cal.
force.par (               2 ,       $F_PS_Spring_B1               ) = 0.00000000000000000E+00 ! [N] Nominal force F_nom_x
force.par (               3 ,       $F_PS_Spring_B1               ) = 0.00000000000000000E+00 ! [N] Nominal force F_nom_y
force.par (               4 ,       $F_PS_Spring_B1               ) = -3.30987415526764198E+03 ! [N] Nominal force F_nom_z
force.par (               5 ,       $F_PS_Spring_B1               ) = 0.00000000000000000E+00 ! [Nm] Nominal torque T_nom_al
force.par (               6 ,       $F_PS_Spring_B1               ) = 0.00000000000000000E+00 ! [Nm] Nominal torque T_nom_be
force.par (               7 ,       $F_PS_Spring_B1               ) = 0.00000000000000000E+00 ! [Nm] Nominal torque T_nom_ga
force.par (               8 ,       $F_PS_Spring_B1               ) = 0.00000000000000000E+00 ! [N/m] Transl. ser. stiffness cs_x
force.par (               9 ,       $F_PS_Spring_B1               ) = 0.00000000000000000E+00 ! [N/m] Transl. ser. stiffness cs_y
force.par (              10 ,       $F_PS_Spring_B1               ) = 0.00000000000000000E+00 ! [N/m] Transl. ser. stiffness cs_z
force.par (              11 ,       $F_PS_Spring_B1               ) = 0.00000000000000000E+00 ! [Nm/rad] Rotat.  ser. stiffness cs_al
force.par (              12 ,       $F_PS_Spring_B1               ) = 0.00000000000000000E+00 ! [Nm/rad] Rotat.  ser. stiffness cs_be
force.par (              13 ,       $F_PS_Spring_B1               ) = 0.00000000000000000E+00 ! [Nm/rad] Rotat.  ser. stiffness cs_ga
force.par (              20 ,       $F_PS_Spring_B1               ) = 8.00000000000000000E+05 ! [N/m] Transl. par. stiffness cp_x
force.par (              21 ,       $F_PS_Spring_B1               ) = 8.00000000000000000E+05 ! [N/m] Transl. par. stiffness cp_y
force.par (              22 ,       $F_PS_Spring_B1               ) = 6.00000000000000000E+05 ! [N/m] Transl. par. stiffness cp_z
force.par (              23 ,       $F_PS_Spring_B1               ) = 0.00000000000000000E+00 ! [Nm/rad] Rotat.  par. stiffness cp_al
force.par (              24 ,       $F_PS_Spring_B1               ) = 0.00000000000000000E+00 ! [Nm/rad] Rotat.  par. stiffness cp_be
force.par (              25 ,       $F_PS_Spring_B1               ) = 0.00000000000000000E+00 ! [Nm/rad] Rotat.  par. stiffness cp_ga
force.par (              26 ,       $F_PS_Spring_B1               ) = 0.00000000000000000E+00 ! [Ns/m] Transl. par. damping dp_x
force.par (              27 ,       $F_PS_Spring_B1               ) = 0.00000000000000000E+00 ! [Ns/m] Transl. par. damping dp_y
force.par (              28 ,       $F_PS_Spring_B1               ) = 0.00000000000000000E+00 ! [Ns/m] Transl. par. damping dp_z
force.par (              29 ,       $F_PS_Spring_B1               ) = 0.00000000000000000E+00 ! [Nms/rad] Rotat.  par. damping dp_al
force.par (              30 ,       $F_PS_Spring_B1               ) = 0.00000000000000000E+00 ! [Nms/rad] Rotat.  par. damping dp_be
force.par (              31 ,       $F_PS_Spring_B1               ) = 0.00000000000000000E+00 ! [Nms/rad] Rotat.  par. damping dp_ga
force.par (              32 ,       $F_PS_Spring_B1               ) = 0.00000000000000000E+00 ! [m] Nominal length x_nom
force.par (              33 ,       $F_PS_Spring_B1               ) = 0.00000000000000000E+00 ! [m] Nominal length y_nom
force.par (              34 ,       $F_PS_Spring_B1               ) = 0.00000000000000000E+00 ! [m] Nominal length z_nom
force.par (              35 ,       $F_PS_Spring_B1               ) = 0.00000000000000000E+00 ! [rad] Nominal angle al_nom
force.par (              36 ,       $F_PS_Spring_B1               ) = 0.00000000000000000E+00 ! [rad] Nominal angle be_nom
force.par (              37 ,       $F_PS_Spring_B1               ) = 0.00000000000000000E+00 ! [rad] Nominal angle ga_nom
force.par (              38 ,       $F_PS_Spring_B1               ) = 0.00000000000000000E+00 ! [-] Mode of angle calculation

force.type (                        $F_PS_Spring_C1               ) = 86                      ! Type
force.from (                        $F_PS_Spring_C1               ) = $M_Frame_PS_Spring_baseC1 ! From Marker
force.to (                          $F_PS_Spring_C1               ) = $S_IRW_Rear.$M_AxleBridge_PS_Spring_baseC ! To Marker
force.st.equi (           1 ,       $F_PS_Spring_C1               ) = 0                       ! Equilibrium
force.st.equi (           2 ,       $F_PS_Spring_C1               ) = 0                       ! Equilibrium
force.preld.calc (        4 ,       $F_PS_Spring_C1               ) = 1                       ! Select Preload cal.
force.par (               2 ,       $F_PS_Spring_C1               ) = 0.00000000000000000E+00 ! [N] Nominal force F_nom_x
force.par (               3 ,       $F_PS_Spring_C1               ) = 0.00000000000000000E+00 ! [N] Nominal force F_nom_y
force.par (               4 ,       $F_PS_Spring_C1               ) = -3.30987410362696028E+03 ! [N] Nominal force F_nom_z
force.par (               5 ,       $F_PS_Spring_C1               ) = 0.00000000000000000E+00 ! [Nm] Nominal torque T_nom_al
force.par (               6 ,       $F_PS_Spring_C1               ) = 0.00000000000000000E+00 ! [Nm] Nominal torque T_nom_be
force.par (               7 ,       $F_PS_Spring_C1               ) = 0.00000000000000000E+00 ! [Nm] Nominal torque T_nom_ga
force.par (               8 ,       $F_PS_Spring_C1               ) = 0.00000000000000000E+00 ! [N/m] Transl. ser. stiffness cs_x
force.par (               9 ,       $F_PS_Spring_C1               ) = 0.00000000000000000E+00 ! [N/m] Transl. ser. stiffness cs_y
force.par (              10 ,       $F_PS_Spring_C1               ) = 0.00000000000000000E+00 ! [N/m] Transl. ser. stiffness cs_z
force.par (              11 ,       $F_PS_Spring_C1               ) = 0.00000000000000000E+00 ! [Nm/rad] Rotat.  ser. stiffness cs_al
force.par (              12 ,       $F_PS_Spring_C1               ) = 0.00000000000000000E+00 ! [Nm/rad] Rotat.  ser. stiffness cs_be
force.par (              13 ,       $F_PS_Spring_C1               ) = 0.00000000000000000E+00 ! [Nm/rad] Rotat.  ser. stiffness cs_ga
force.par (              20 ,       $F_PS_Spring_C1               ) = 8.00000000000000000E+05 ! [N/m] Transl. par. stiffness cp_x
force.par (              21 ,       $F_PS_Spring_C1               ) = 8.00000000000000000E+05 ! [N/m] Transl. par. stiffness cp_y
force.par (              22 ,       $F_PS_Spring_C1               ) = 6.00000000000000000E+05 ! [N/m] Transl. par. stiffness cp_z
force.par (              23 ,       $F_PS_Spring_C1               ) = 0.00000000000000000E+00 ! [Nm/rad] Rotat.  par. stiffness cp_al
force.par (              24 ,       $F_PS_Spring_C1               ) = 0.00000000000000000E+00 ! [Nm/rad] Rotat.  par. stiffness cp_be
force.par (              25 ,       $F_PS_Spring_C1               ) = 0.00000000000000000E+00 ! [Nm/rad] Rotat.  par. stiffness cp_ga
force.par (              26 ,       $F_PS_Spring_C1               ) = 0.00000000000000000E+00 ! [Ns/m] Transl. par. damping dp_x
force.par (              27 ,       $F_PS_Spring_C1               ) = 0.00000000000000000E+00 ! [Ns/m] Transl. par. damping dp_y
force.par (              28 ,       $F_PS_Spring_C1               ) = 0.00000000000000000E+00 ! [Ns/m] Transl. par. damping dp_z
force.par (              29 ,       $F_PS_Spring_C1               ) = 0.00000000000000000E+00 ! [Nms/rad] Rotat.  par. damping dp_al
force.par (              30 ,       $F_PS_Spring_C1               ) = 0.00000000000000000E+00 ! [Nms/rad] Rotat.  par. damping dp_be
force.par (              31 ,       $F_PS_Spring_C1               ) = 0.00000000000000000E+00 ! [Nms/rad] Rotat.  par. damping dp_ga
force.par (              32 ,       $F_PS_Spring_C1               ) = 0.00000000000000000E+00 ! [m] Nominal length x_nom
force.par (              33 ,       $F_PS_Spring_C1               ) = 0.00000000000000000E+00 ! [m] Nominal length y_nom
force.par (              34 ,       $F_PS_Spring_C1               ) = 0.00000000000000000E+00 ! [m] Nominal length z_nom
force.par (              35 ,       $F_PS_Spring_C1               ) = 0.00000000000000000E+00 ! [rad] Nominal angle al_nom
force.par (              36 ,       $F_PS_Spring_C1               ) = 0.00000000000000000E+00 ! [rad] Nominal angle be_nom
force.par (              37 ,       $F_PS_Spring_C1               ) = 0.00000000000000000E+00 ! [rad] Nominal angle ga_nom
force.par (              38 ,       $F_PS_Spring_C1               ) = 0.00000000000000000E+00 ! [-] Mode of angle calculation

force.type (                        $F_PS_Spring_D1               ) = 86                      ! Type
force.from (                        $F_PS_Spring_D1               ) = $M_Frame_PS_Spring_baseD1 ! From Marker
force.to (                          $F_PS_Spring_D1               ) = $S_IRW_Rear.$M_AxleBridge_PS_Spring_baseD ! To Marker
force.st.equi (           1 ,       $F_PS_Spring_D1               ) = 0                       ! Equilibrium
force.st.equi (           2 ,       $F_PS_Spring_D1               ) = 0                       ! Equilibrium
force.preld.calc (        4 ,       $F_PS_Spring_D1               ) = 1                       ! Select Preload cal.
force.par (               2 ,       $F_PS_Spring_D1               ) = 0.00000000000000000E+00 ! [N] Nominal force F_nom_x
force.par (               3 ,       $F_PS_Spring_D1               ) = 0.00000000000000000E+00 ! [N] Nominal force F_nom_y
force.par (               4 ,       $F_PS_Spring_D1               ) = -3.30987386531281663E+03 ! [N] Nominal force F_nom_z
force.par (               5 ,       $F_PS_Spring_D1               ) = 0.00000000000000000E+00 ! [Nm] Nominal torque T_nom_al
force.par (               6 ,       $F_PS_Spring_D1               ) = 0.00000000000000000E+00 ! [Nm] Nominal torque T_nom_be
force.par (               7 ,       $F_PS_Spring_D1               ) = 0.00000000000000000E+00 ! [Nm] Nominal torque T_nom_ga
force.par (               8 ,       $F_PS_Spring_D1               ) = 0.00000000000000000E+00 ! [N/m] Transl. ser. stiffness cs_x
force.par (               9 ,       $F_PS_Spring_D1               ) = 0.00000000000000000E+00 ! [N/m] Transl. ser. stiffness cs_y
force.par (              10 ,       $F_PS_Spring_D1               ) = 0.00000000000000000E+00 ! [N/m] Transl. ser. stiffness cs_z
force.par (              11 ,       $F_PS_Spring_D1               ) = 0.00000000000000000E+00 ! [Nm/rad] Rotat.  ser. stiffness cs_al
force.par (              12 ,       $F_PS_Spring_D1               ) = 0.00000000000000000E+00 ! [Nm/rad] Rotat.  ser. stiffness cs_be
force.par (              13 ,       $F_PS_Spring_D1               ) = 0.00000000000000000E+00 ! [Nm/rad] Rotat.  ser. stiffness cs_ga
force.par (              20 ,       $F_PS_Spring_D1               ) = 8.00000000000000000E+05 ! [N/m] Transl. par. stiffness cp_x
force.par (              21 ,       $F_PS_Spring_D1               ) = 8.00000000000000000E+05 ! [N/m] Transl. par. stiffness cp_y
force.par (              22 ,       $F_PS_Spring_D1               ) = 6.00000000000000000E+05 ! [N/m] Transl. par. stiffness cp_z
force.par (              23 ,       $F_PS_Spring_D1               ) = 0.00000000000000000E+00 ! [Nm/rad] Rotat.  par. stiffness cp_al
force.par (              24 ,       $F_PS_Spring_D1               ) = 0.00000000000000000E+00 ! [Nm/rad] Rotat.  par. stiffness cp_be
force.par (              25 ,       $F_PS_Spring_D1               ) = 0.00000000000000000E+00 ! [Nm/rad] Rotat.  par. stiffness cp_ga
force.par (              26 ,       $F_PS_Spring_D1               ) = 0.00000000000000000E+00 ! [Ns/m] Transl. par. damping dp_x
force.par (              27 ,       $F_PS_Spring_D1               ) = 0.00000000000000000E+00 ! [Ns/m] Transl. par. damping dp_y
force.par (              28 ,       $F_PS_Spring_D1               ) = 0.00000000000000000E+00 ! [Ns/m] Transl. par. damping dp_z
force.par (              29 ,       $F_PS_Spring_D1               ) = 0.00000000000000000E+00 ! [Nms/rad] Rotat.  par. damping dp_al
force.par (              30 ,       $F_PS_Spring_D1               ) = 0.00000000000000000E+00 ! [Nms/rad] Rotat.  par. damping dp_be
force.par (              31 ,       $F_PS_Spring_D1               ) = 0.00000000000000000E+00 ! [Nms/rad] Rotat.  par. damping dp_ga
force.par (              32 ,       $F_PS_Spring_D1               ) = 0.00000000000000000E+00 ! [m] Nominal length x_nom
force.par (              33 ,       $F_PS_Spring_D1               ) = 0.00000000000000000E+00 ! [m] Nominal length y_nom
force.par (              34 ,       $F_PS_Spring_D1               ) = 0.00000000000000000E+00 ! [m] Nominal length z_nom
force.par (              35 ,       $F_PS_Spring_D1               ) = 0.00000000000000000E+00 ! [rad] Nominal angle al_nom
force.par (              36 ,       $F_PS_Spring_D1               ) = 0.00000000000000000E+00 ! [rad] Nominal angle be_nom
force.par (              37 ,       $F_PS_Spring_D1               ) = 0.00000000000000000E+00 ! [rad] Nominal angle ga_nom
force.par (              38 ,       $F_PS_Spring_D1               ) = 0.00000000000000000E+00 ! [-] Mode of angle calculation

force.type (                        $F_PS_Spring_A2               ) = 86                      ! Type
force.from (                        $F_PS_Spring_A2               ) = $M_Frame_PS_Spring_baseA2 ! From Marker
force.to (                          $F_PS_Spring_A2               ) = $S_IRW_Front.$M_AxleBridge_PS_Spring_baseC ! To Marker
force.st.equi (           1 ,       $F_PS_Spring_A2               ) = 0                       ! Equilibrium
force.st.equi (           2 ,       $F_PS_Spring_A2               ) = 0                       ! Equilibrium
force.preld.calc (        4 ,       $F_PS_Spring_A2               ) = 1                       ! Select Preload cal.
force.par (               2 ,       $F_PS_Spring_A2               ) = 0.00000000000000000E+00 ! [N] Nominal force F_nom_x
force.par (               3 ,       $F_PS_Spring_A2               ) = 0.00000000000000000E+00 ! [N] Nominal force F_nom_y
force.par (               4 ,       $F_PS_Spring_A2               ) = -6.87773962694177499E+03 ! [N] Nominal force F_nom_z
force.par (               5 ,       $F_PS_Spring_A2               ) = 0.00000000000000000E+00 ! [Nm] Nominal torque T_nom_al
force.par (               6 ,       $F_PS_Spring_A2               ) = 0.00000000000000000E+00 ! [Nm] Nominal torque T_nom_be
force.par (               7 ,       $F_PS_Spring_A2               ) = 0.00000000000000000E+00 ! [Nm] Nominal torque T_nom_ga
force.par (               8 ,       $F_PS_Spring_A2               ) = 0.00000000000000000E+00 ! [N/m] Transl. ser. stiffness cs_x
force.par (               9 ,       $F_PS_Spring_A2               ) = 0.00000000000000000E+00 ! [N/m] Transl. ser. stiffness cs_y
force.par (              10 ,       $F_PS_Spring_A2               ) = 0.00000000000000000E+00 ! [N/m] Transl. ser. stiffness cs_z
force.par (              11 ,       $F_PS_Spring_A2               ) = 0.00000000000000000E+00 ! [Nm/rad] Rotat.  ser. stiffness cs_al
force.par (              12 ,       $F_PS_Spring_A2               ) = 0.00000000000000000E+00 ! [Nm/rad] Rotat.  ser. stiffness cs_be
force.par (              13 ,       $F_PS_Spring_A2               ) = 0.00000000000000000E+00 ! [Nm/rad] Rotat.  ser. stiffness cs_ga
force.par (              20 ,       $F_PS_Spring_A2               ) = 8.00000000000000000E+05 ! [N/m] Transl. par. stiffness cp_x
force.par (              21 ,       $F_PS_Spring_A2               ) = 8.00000000000000000E+05 ! [N/m] Transl. par. stiffness cp_y
force.par (              22 ,       $F_PS_Spring_A2               ) = 6.00000000000000000E+05 ! [N/m] Transl. par. stiffness cp_z
force.par (              23 ,       $F_PS_Spring_A2               ) = 0.00000000000000000E+00 ! [Nm/rad] Rotat.  par. stiffness cp_al
force.par (              24 ,       $F_PS_Spring_A2               ) = 0.00000000000000000E+00 ! [Nm/rad] Rotat.  par. stiffness cp_be
force.par (              25 ,       $F_PS_Spring_A2               ) = 0.00000000000000000E+00 ! [Nm/rad] Rotat.  par. stiffness cp_ga
force.par (              26 ,       $F_PS_Spring_A2               ) = 0.00000000000000000E+00 ! [Ns/m] Transl. par. damping dp_x
force.par (              27 ,       $F_PS_Spring_A2               ) = 0.00000000000000000E+00 ! [Ns/m] Transl. par. damping dp_y
force.par (              28 ,       $F_PS_Spring_A2               ) = 0.00000000000000000E+00 ! [Ns/m] Transl. par. damping dp_z
force.par (              29 ,       $F_PS_Spring_A2               ) = 0.00000000000000000E+00 ! [Nms/rad] Rotat.  par. damping dp_al
force.par (              30 ,       $F_PS_Spring_A2               ) = 0.00000000000000000E+00 ! [Nms/rad] Rotat.  par. damping dp_be
force.par (              31 ,       $F_PS_Spring_A2               ) = 0.00000000000000000E+00 ! [Nms/rad] Rotat.  par. damping dp_ga
force.par (              32 ,       $F_PS_Spring_A2               ) = 0.00000000000000000E+00 ! [m] Nominal length x_nom
force.par (              33 ,       $F_PS_Spring_A2               ) = 0.00000000000000000E+00 ! [m] Nominal length y_nom
force.par (              34 ,       $F_PS_Spring_A2               ) = 0.00000000000000000E+00 ! [m] Nominal length z_nom
force.par (              35 ,       $F_PS_Spring_A2               ) = 0.00000000000000000E+00 ! [rad] Nominal angle al_nom
force.par (              36 ,       $F_PS_Spring_A2               ) = 0.00000000000000000E+00 ! [rad] Nominal angle be_nom
force.par (              37 ,       $F_PS_Spring_A2               ) = 0.00000000000000000E+00 ! [rad] Nominal angle ga_nom
force.par (              38 ,       $F_PS_Spring_A2               ) = 0.00000000000000000E+00 ! [-] Mode of angle calculation

force.type (                        $F_PS_Spring_B2               ) = 86                      ! Type
force.from (                        $F_PS_Spring_B2               ) = $M_Frame_PS_Spring_baseB2 ! From Marker
force.to (                          $F_PS_Spring_B2               ) = $S_IRW_Front.$M_AxleBridge_PS_Spring_baseD ! To Marker
force.st.equi (           1 ,       $F_PS_Spring_B2               ) = 0                       ! Equilibrium
force.st.equi (           2 ,       $F_PS_Spring_B2               ) = 0                       ! Equilibrium
force.preld.calc (        4 ,       $F_PS_Spring_B2               ) = 1                       ! Select Preload cal.
force.par (               2 ,       $F_PS_Spring_B2               ) = 0.00000000000000000E+00 ! [N] Nominal force F_nom_x
force.par (               3 ,       $F_PS_Spring_B2               ) = 0.00000000000000000E+00 ! [N] Nominal force F_nom_y
force.par (               4 ,       $F_PS_Spring_B2               ) = -6.87773986522270752E+03 ! [N] Nominal force F_nom_z
force.par (               5 ,       $F_PS_Spring_B2               ) = 0.00000000000000000E+00 ! [Nm] Nominal torque T_nom_al
force.par (               6 ,       $F_PS_Spring_B2               ) = 0.00000000000000000E+00 ! [Nm] Nominal torque T_nom_be
force.par (               7 ,       $F_PS_Spring_B2               ) = 0.00000000000000000E+00 ! [Nm] Nominal torque T_nom_ga
force.par (               8 ,       $F_PS_Spring_B2               ) = 0.00000000000000000E+00 ! [N/m] Transl. ser. stiffness cs_x
force.par (               9 ,       $F_PS_Spring_B2               ) = 0.00000000000000000E+00 ! [N/m] Transl. ser. stiffness cs_y
force.par (              10 ,       $F_PS_Spring_B2               ) = 0.00000000000000000E+00 ! [N/m] Transl. ser. stiffness cs_z
force.par (              11 ,       $F_PS_Spring_B2               ) = 0.00000000000000000E+00 ! [Nm/rad] Rotat.  ser. stiffness cs_al
force.par (              12 ,       $F_PS_Spring_B2               ) = 0.00000000000000000E+00 ! [Nm/rad] Rotat.  ser. stiffness cs_be
force.par (              13 ,       $F_PS_Spring_B2               ) = 0.00000000000000000E+00 ! [Nm/rad] Rotat.  ser. stiffness cs_ga
force.par (              20 ,       $F_PS_Spring_B2               ) = 8.00000000000000000E+05 ! [N/m] Transl. par. stiffness cp_x
force.par (              21 ,       $F_PS_Spring_B2               ) = 8.00000000000000000E+05 ! [N/m] Transl. par. stiffness cp_y
force.par (              22 ,       $F_PS_Spring_B2               ) = 6.00000000000000000E+05 ! [N/m] Transl. par. stiffness cp_z
force.par (              23 ,       $F_PS_Spring_B2               ) = 0.00000000000000000E+00 ! [Nm/rad] Rotat.  par. stiffness cp_al
force.par (              24 ,       $F_PS_Spring_B2               ) = 0.00000000000000000E+00 ! [Nm/rad] Rotat.  par. stiffness cp_be
force.par (              25 ,       $F_PS_Spring_B2               ) = 0.00000000000000000E+00 ! [Nm/rad] Rotat.  par. stiffness cp_ga
force.par (              26 ,       $F_PS_Spring_B2               ) = 0.00000000000000000E+00 ! [Ns/m] Transl. par. damping dp_x
force.par (              27 ,       $F_PS_Spring_B2               ) = 0.00000000000000000E+00 ! [Ns/m] Transl. par. damping dp_y
force.par (              28 ,       $F_PS_Spring_B2               ) = 0.00000000000000000E+00 ! [Ns/m] Transl. par. damping dp_z
force.par (              29 ,       $F_PS_Spring_B2               ) = 0.00000000000000000E+00 ! [Nms/rad] Rotat.  par. damping dp_al
force.par (              30 ,       $F_PS_Spring_B2               ) = 0.00000000000000000E+00 ! [Nms/rad] Rotat.  par. damping dp_be
force.par (              31 ,       $F_PS_Spring_B2               ) = 0.00000000000000000E+00 ! [Nms/rad] Rotat.  par. damping dp_ga
force.par (              32 ,       $F_PS_Spring_B2               ) = 0.00000000000000000E+00 ! [m] Nominal length x_nom
force.par (              33 ,       $F_PS_Spring_B2               ) = 0.00000000000000000E+00 ! [m] Nominal length y_nom
force.par (              34 ,       $F_PS_Spring_B2               ) = 0.00000000000000000E+00 ! [m] Nominal length z_nom
force.par (              35 ,       $F_PS_Spring_B2               ) = 0.00000000000000000E+00 ! [rad] Nominal angle al_nom
force.par (              36 ,       $F_PS_Spring_B2               ) = 0.00000000000000000E+00 ! [rad] Nominal angle be_nom
force.par (              37 ,       $F_PS_Spring_B2               ) = 0.00000000000000000E+00 ! [rad] Nominal angle ga_nom
force.par (              38 ,       $F_PS_Spring_B2               ) = 0.00000000000000000E+00 ! [-] Mode of angle calculation

force.type (                        $F_PS_Spring_C2               ) = 86                      ! Type
force.from (                        $F_PS_Spring_C2               ) = $M_Frame_PS_Spring_baseC2 ! From Marker
force.to (                          $F_PS_Spring_C2               ) = $S_IRW_Rear.$M_AxleBridge_PS_Spring_baseA ! To Marker
force.st.equi (           1 ,       $F_PS_Spring_C2               ) = 0                       ! Equilibrium
force.st.equi (           2 ,       $F_PS_Spring_C2               ) = 0                       ! Equilibrium
force.preld.calc (        4 ,       $F_PS_Spring_C2               ) = 1                       ! Select Preload cal.
force.par (               2 ,       $F_PS_Spring_C2               ) = 0.00000000000000000E+00 ! [N] Nominal force F_nom_x
force.par (               3 ,       $F_PS_Spring_C2               ) = 0.00000000000000000E+00 ! [N] Nominal force F_nom_y
force.par (               4 ,       $F_PS_Spring_C2               ) = -6.87774038264461069E+03 ! [N] Nominal force F_nom_z
force.par (               5 ,       $F_PS_Spring_C2               ) = 0.00000000000000000E+00 ! [Nm] Nominal torque T_nom_al
force.par (               6 ,       $F_PS_Spring_C2               ) = 0.00000000000000000E+00 ! [Nm] Nominal torque T_nom_be
force.par (               7 ,       $F_PS_Spring_C2               ) = 0.00000000000000000E+00 ! [Nm] Nominal torque T_nom_ga
force.par (               8 ,       $F_PS_Spring_C2               ) = 0.00000000000000000E+00 ! [N/m] Transl. ser. stiffness cs_x
force.par (               9 ,       $F_PS_Spring_C2               ) = 0.00000000000000000E+00 ! [N/m] Transl. ser. stiffness cs_y
force.par (              10 ,       $F_PS_Spring_C2               ) = 0.00000000000000000E+00 ! [N/m] Transl. ser. stiffness cs_z
force.par (              11 ,       $F_PS_Spring_C2               ) = 0.00000000000000000E+00 ! [Nm/rad] Rotat.  ser. stiffness cs_al
force.par (              12 ,       $F_PS_Spring_C2               ) = 0.00000000000000000E+00 ! [Nm/rad] Rotat.  ser. stiffness cs_be
force.par (              13 ,       $F_PS_Spring_C2               ) = 0.00000000000000000E+00 ! [Nm/rad] Rotat.  ser. stiffness cs_ga
force.par (              20 ,       $F_PS_Spring_C2               ) = 8.00000000000000000E+05 ! [N/m] Transl. par. stiffness cp_x
force.par (              21 ,       $F_PS_Spring_C2               ) = 8.00000000000000000E+05 ! [N/m] Transl. par. stiffness cp_y
force.par (              22 ,       $F_PS_Spring_C2               ) = 6.00000000000000000E+05 ! [N/m] Transl. par. stiffness cp_z
force.par (              23 ,       $F_PS_Spring_C2               ) = 0.00000000000000000E+00 ! [Nm/rad] Rotat.  par. stiffness cp_al
force.par (              24 ,       $F_PS_Spring_C2               ) = 0.00000000000000000E+00 ! [Nm/rad] Rotat.  par. stiffness cp_be
force.par (              25 ,       $F_PS_Spring_C2               ) = 0.00000000000000000E+00 ! [Nm/rad] Rotat.  par. stiffness cp_ga
force.par (              26 ,       $F_PS_Spring_C2               ) = 0.00000000000000000E+00 ! [Ns/m] Transl. par. damping dp_x
force.par (              27 ,       $F_PS_Spring_C2               ) = 0.00000000000000000E+00 ! [Ns/m] Transl. par. damping dp_y
force.par (              28 ,       $F_PS_Spring_C2               ) = 0.00000000000000000E+00 ! [Ns/m] Transl. par. damping dp_z
force.par (              29 ,       $F_PS_Spring_C2               ) = 0.00000000000000000E+00 ! [Nms/rad] Rotat.  par. damping dp_al
force.par (              30 ,       $F_PS_Spring_C2               ) = 0.00000000000000000E+00 ! [Nms/rad] Rotat.  par. damping dp_be
force.par (              31 ,       $F_PS_Spring_C2               ) = 0.00000000000000000E+00 ! [Nms/rad] Rotat.  par. damping dp_ga
force.par (              32 ,       $F_PS_Spring_C2               ) = 0.00000000000000000E+00 ! [m] Nominal length x_nom
force.par (              33 ,       $F_PS_Spring_C2               ) = 0.00000000000000000E+00 ! [m] Nominal length y_nom
force.par (              34 ,       $F_PS_Spring_C2               ) = 0.00000000000000000E+00 ! [m] Nominal length z_nom
force.par (              35 ,       $F_PS_Spring_C2               ) = 0.00000000000000000E+00 ! [rad] Nominal angle al_nom
force.par (              36 ,       $F_PS_Spring_C2               ) = 0.00000000000000000E+00 ! [rad] Nominal angle be_nom
force.par (              37 ,       $F_PS_Spring_C2               ) = 0.00000000000000000E+00 ! [rad] Nominal angle ga_nom
force.par (              38 ,       $F_PS_Spring_C2               ) = 0.00000000000000000E+00 ! [-] Mode of angle calculation

force.type (                        $F_PS_Spring_D2               ) = 86                      ! Type
force.from (                        $F_PS_Spring_D2               ) = $M_Frame_PS_Spring_baseD2 ! From Marker
force.to (                          $F_PS_Spring_D2               ) = $S_IRW_Rear.$M_AxleBridge_PS_Spring_baseB ! To Marker
force.st.equi (           1 ,       $F_PS_Spring_D2               ) = 0                       ! Equilibrium
force.st.equi (           2 ,       $F_PS_Spring_D2               ) = 0                       ! Equilibrium
force.preld.calc (        4 ,       $F_PS_Spring_D2               ) = 1                       ! Select Preload cal.
force.par (               2 ,       $F_PS_Spring_D2               ) = 0.00000000000000000E+00 ! [N] Nominal force F_nom_x
force.par (               3 ,       $F_PS_Spring_D2               ) = 0.00000000000000000E+00 ! [N] Nominal force F_nom_y
force.par (               4 ,       $F_PS_Spring_D2               ) = -6.87774014436422112E+03 ! [N] Nominal force F_nom_z
force.par (               5 ,       $F_PS_Spring_D2               ) = 0.00000000000000000E+00 ! [Nm] Nominal torque T_nom_al
force.par (               6 ,       $F_PS_Spring_D2               ) = 0.00000000000000000E+00 ! [Nm] Nominal torque T_nom_be
force.par (               7 ,       $F_PS_Spring_D2               ) = 0.00000000000000000E+00 ! [Nm] Nominal torque T_nom_ga
force.par (               8 ,       $F_PS_Spring_D2               ) = 0.00000000000000000E+00 ! [N/m] Transl. ser. stiffness cs_x
force.par (               9 ,       $F_PS_Spring_D2               ) = 0.00000000000000000E+00 ! [N/m] Transl. ser. stiffness cs_y
force.par (              10 ,       $F_PS_Spring_D2               ) = 0.00000000000000000E+00 ! [N/m] Transl. ser. stiffness cs_z
force.par (              11 ,       $F_PS_Spring_D2               ) = 0.00000000000000000E+00 ! [Nm/rad] Rotat.  ser. stiffness cs_al
force.par (              12 ,       $F_PS_Spring_D2               ) = 0.00000000000000000E+00 ! [Nm/rad] Rotat.  ser. stiffness cs_be
force.par (              13 ,       $F_PS_Spring_D2               ) = 0.00000000000000000E+00 ! [Nm/rad] Rotat.  ser. stiffness cs_ga
force.par (              20 ,       $F_PS_Spring_D2               ) = 8.00000000000000000E+05 ! [N/m] Transl. par. stiffness cp_x
force.par (              21 ,       $F_PS_Spring_D2               ) = 8.00000000000000000E+05 ! [N/m] Transl. par. stiffness cp_y
force.par (              22 ,       $F_PS_Spring_D2               ) = 6.00000000000000000E+05 ! [N/m] Transl. par. stiffness cp_z
force.par (              23 ,       $F_PS_Spring_D2               ) = 0.00000000000000000E+00 ! [Nm/rad] Rotat.  par. stiffness cp_al
force.par (              24 ,       $F_PS_Spring_D2               ) = 0.00000000000000000E+00 ! [Nm/rad] Rotat.  par. stiffness cp_be
force.par (              25 ,       $F_PS_Spring_D2               ) = 0.00000000000000000E+00 ! [Nm/rad] Rotat.  par. stiffness cp_ga
force.par (              26 ,       $F_PS_Spring_D2               ) = 0.00000000000000000E+00 ! [Ns/m] Transl. par. damping dp_x
force.par (              27 ,       $F_PS_Spring_D2               ) = 0.00000000000000000E+00 ! [Ns/m] Transl. par. damping dp_y
force.par (              28 ,       $F_PS_Spring_D2               ) = 0.00000000000000000E+00 ! [Ns/m] Transl. par. damping dp_z
force.par (              29 ,       $F_PS_Spring_D2               ) = 0.00000000000000000E+00 ! [Nms/rad] Rotat.  par. damping dp_al
force.par (              30 ,       $F_PS_Spring_D2               ) = 0.00000000000000000E+00 ! [Nms/rad] Rotat.  par. damping dp_be
force.par (              31 ,       $F_PS_Spring_D2               ) = 0.00000000000000000E+00 ! [Nms/rad] Rotat.  par. damping dp_ga
force.par (              32 ,       $F_PS_Spring_D2               ) = 0.00000000000000000E+00 ! [m] Nominal length x_nom
force.par (              33 ,       $F_PS_Spring_D2               ) = 0.00000000000000000E+00 ! [m] Nominal length y_nom
force.par (              34 ,       $F_PS_Spring_D2               ) = 0.00000000000000000E+00 ! [m] Nominal length z_nom
force.par (              35 ,       $F_PS_Spring_D2               ) = 0.00000000000000000E+00 ! [rad] Nominal angle al_nom
force.par (              36 ,       $F_PS_Spring_D2               ) = 0.00000000000000000E+00 ! [rad] Nominal angle be_nom
force.par (              37 ,       $F_PS_Spring_D2               ) = 0.00000000000000000E+00 ! [rad] Nominal angle ga_nom
force.par (              38 ,       $F_PS_Spring_D2               ) = 0.00000000000000000E+00 ! [-] Mode of angle calculation

force.type (                        $F_PS_Dmp_A                   ) = 5                       ! Type
force.from (                        $F_PS_Dmp_A                   ) = $M_Frame_PS_Dmp_baseA   ! From Marker
force.to (                          $F_PS_Dmp_A                   ) = $S_IRW_Front.$M_AxleBridge_PS_Dmp_baseA ! To Marker
force.st.equi (           1 ,       $F_PS_Dmp_A                   ) = 0                       ! Equilibrium
force.preld.calc (        3 ,       $F_PS_Dmp_A                   ) = 1                       ! Select Preload cal.
force.preld.calc (        4 ,       $F_PS_Dmp_A                   ) = 1                       ! Select Preload cal.
force.disabled (                    $F_PS_Dmp_A                   ) = 0                       ! Disabled
force.par (               1 ,       $F_PS_Dmp_A                   ) = 0.00000000000000000E+00 ! [N] Nominal force in x
force.par (               2 ,       $F_PS_Dmp_A                   ) = 0.00000000000000000E+00 ! [N] Nominal force in y
force.par (               3 ,       $F_PS_Dmp_A                   ) = -2.07733848988036561E+03 ! [N] Nominal force in z
force.par (               4 ,       $F_PS_Dmp_A                   ) = 0.00000000000000000E+00 ! [N/m] Stiffness in x
force.par (               5 ,       $F_PS_Dmp_A                   ) = 0.00000000000000000E+00 ! [N/m] Stiffness in y
force.par (               6 ,       $F_PS_Dmp_A                   ) = 0.00000000000000000E+00 ! [N/m] Stiffness in z
force.par (               7 ,       $F_PS_Dmp_A                   ) = 0.00000000000000000E+00 ! [Ns/m] Damping in x
force.par (               8 ,       $F_PS_Dmp_A                   ) = 0.00000000000000000E+00 ! [Ns/m] Damping in y
force.par (               9 ,       $F_PS_Dmp_A                   ) = 5.00000000000000000E+06 ! [Ns/m] Damping in z
force.par (              10 ,       $F_PS_Dmp_A                   ) = null                    ! [-] Input Function Fc(x)
force.par (              11 ,       $F_PS_Dmp_A                   ) = null                    ! [-] Input Function Fc(y)
force.par (              12 ,       $F_PS_Dmp_A                   ) = null                    ! [-] Input Function Fc(z)
force.par (              13 ,       $F_PS_Dmp_A                   ) = null                    ! [-] Input Function Fd(xd)
force.par (              14 ,       $F_PS_Dmp_A                   ) = null                    ! [-] Input Function Fd(yd)
force.par (              15 ,       $F_PS_Dmp_A                   ) = null                    ! [-] Input Function Fd(zd)
force.par (              16 ,       $F_PS_Dmp_A                   ) = 0.00000000000000000E+00 ! [m] Clearance in x
force.par (              17 ,       $F_PS_Dmp_A                   ) = 0.00000000000000000E+00 ! [m] Clearance in y
force.par (              18 ,       $F_PS_Dmp_A                   ) = 0.00000000000000000E+00 ! [m] Clearance in z
force.par (              20 ,       $F_PS_Dmp_A                   ) = null                    ! [-] Reference Marker for meas+calc
force.par (              21 ,       $F_PS_Dmp_A                   ) = null                    ! [-] Expression for Fx
force.par (              22 ,       $F_PS_Dmp_A                   ) = null                    ! [-] Expression for Fy
force.par (              23 ,       $F_PS_Dmp_A                   ) = null                    ! [-] Expression for Fz
force.par (              27 ,       $F_PS_Dmp_A                   ) = 0.00000000000000000E+00 ! [-] Output force in To Marker

force.type (                        $F_PS_Dmp_B                   ) = 5                       ! Type
force.from (                        $F_PS_Dmp_B                   ) = $M_Frame_PS_Dmp_baseB   ! From Marker
force.to (                          $F_PS_Dmp_B                   ) = $S_IRW_Front.$M_AxleBridge_PS_Dmp_baseB ! To Marker
force.st.equi (           1 ,       $F_PS_Dmp_B                   ) = 0                       ! Equilibrium
force.preld.calc (        3 ,       $F_PS_Dmp_B                   ) = 1                       ! Select Preload cal.
force.preld.calc (        4 ,       $F_PS_Dmp_B                   ) = 1                       ! Select Preload cal.
force.disabled (                    $F_PS_Dmp_B                   ) = 0                       ! Disabled
force.par (               1 ,       $F_PS_Dmp_B                   ) = 0.00000000000000000E+00 ! [N] Nominal force in x
force.par (               2 ,       $F_PS_Dmp_B                   ) = 0.00000000000000000E+00 ! [N] Nominal force in y
force.par (               3 ,       $F_PS_Dmp_B                   ) = -2.07733872819280168E+03 ! [N] Nominal force in z
force.par (               4 ,       $F_PS_Dmp_B                   ) = 0.00000000000000000E+00 ! [N/m] Stiffness in x
force.par (               5 ,       $F_PS_Dmp_B                   ) = 0.00000000000000000E+00 ! [N/m] Stiffness in y
force.par (               6 ,       $F_PS_Dmp_B                   ) = 0.00000000000000000E+00 ! [N/m] Stiffness in z
force.par (               7 ,       $F_PS_Dmp_B                   ) = 0.00000000000000000E+00 ! [Ns/m] Damping in x
force.par (               8 ,       $F_PS_Dmp_B                   ) = 0.00000000000000000E+00 ! [Ns/m] Damping in y
force.par (               9 ,       $F_PS_Dmp_B                   ) = 5.00000000000000000E+06 ! [Ns/m] Damping in z
force.par (              10 ,       $F_PS_Dmp_B                   ) = null                    ! [-] Input Function Fc(x)
force.par (              11 ,       $F_PS_Dmp_B                   ) = null                    ! [-] Input Function Fc(y)
force.par (              12 ,       $F_PS_Dmp_B                   ) = null                    ! [-] Input Function Fc(z)
force.par (              13 ,       $F_PS_Dmp_B                   ) = null                    ! [-] Input Function Fd(xd)
force.par (              14 ,       $F_PS_Dmp_B                   ) = null                    ! [-] Input Function Fd(yd)
force.par (              15 ,       $F_PS_Dmp_B                   ) = null                    ! [-] Input Function Fd(zd)
force.par (              16 ,       $F_PS_Dmp_B                   ) = 0.00000000000000000E+00 ! [m] Clearance in x
force.par (              17 ,       $F_PS_Dmp_B                   ) = 0.00000000000000000E+00 ! [m] Clearance in y
force.par (              18 ,       $F_PS_Dmp_B                   ) = 0.00000000000000000E+00 ! [m] Clearance in z
force.par (              20 ,       $F_PS_Dmp_B                   ) = null                    ! [-] Reference Marker for meas+calc
force.par (              21 ,       $F_PS_Dmp_B                   ) = null                    ! [-] Expression for Fx
force.par (              22 ,       $F_PS_Dmp_B                   ) = null                    ! [-] Expression for Fy
force.par (              23 ,       $F_PS_Dmp_B                   ) = null                    ! [-] Expression for Fz
force.par (              27 ,       $F_PS_Dmp_B                   ) = 0.00000000000000000E+00 ! [-] Output force in To Marker

force.type (                        $F_PS_Dmp_C                   ) = 5                       ! Type
force.from (                        $F_PS_Dmp_C                   ) = $M_Frame_PS_Dmp_baseC   ! From Marker
force.to (                          $F_PS_Dmp_C                   ) = $S_IRW_Rear.$M_AxleBridge_PS_Dmp_baseC ! To Marker
force.st.equi (           1 ,       $F_PS_Dmp_C                   ) = 0                       ! Equilibrium
force.preld.calc (        3 ,       $F_PS_Dmp_C                   ) = 1                       ! Select Preload cal.
force.preld.calc (        4 ,       $F_PS_Dmp_C                   ) = 1                       ! Select Preload cal.
force.disabled (                    $F_PS_Dmp_C                   ) = 0                       ! Disabled
force.par (               1 ,       $F_PS_Dmp_C                   ) = 0.00000000000000000E+00 ! [N] Nominal force in x
force.par (               2 ,       $F_PS_Dmp_C                   ) = 0.00000000000000000E+00 ! [N] Nominal force in y
force.par (               3 ,       $F_PS_Dmp_C                   ) = -2.07733847995124006E+03 ! [N] Nominal force in z
force.par (               4 ,       $F_PS_Dmp_C                   ) = 0.00000000000000000E+00 ! [N/m] Stiffness in x
force.par (               5 ,       $F_PS_Dmp_C                   ) = 0.00000000000000000E+00 ! [N/m] Stiffness in y
force.par (               6 ,       $F_PS_Dmp_C                   ) = 0.00000000000000000E+00 ! [N/m] Stiffness in z
force.par (               7 ,       $F_PS_Dmp_C                   ) = 0.00000000000000000E+00 ! [Ns/m] Damping in x
force.par (               8 ,       $F_PS_Dmp_C                   ) = 0.00000000000000000E+00 ! [Ns/m] Damping in y
force.par (               9 ,       $F_PS_Dmp_C                   ) = 5.00000000000000000E+06 ! [Ns/m] Damping in z
force.par (              10 ,       $F_PS_Dmp_C                   ) = null                    ! [-] Input Function Fc(x)
force.par (              11 ,       $F_PS_Dmp_C                   ) = null                    ! [-] Input Function Fc(y)
force.par (              12 ,       $F_PS_Dmp_C                   ) = null                    ! [-] Input Function Fc(z)
force.par (              13 ,       $F_PS_Dmp_C                   ) = null                    ! [-] Input Function Fd(xd)
force.par (              14 ,       $F_PS_Dmp_C                   ) = null                    ! [-] Input Function Fd(yd)
force.par (              15 ,       $F_PS_Dmp_C                   ) = null                    ! [-] Input Function Fd(zd)
force.par (              16 ,       $F_PS_Dmp_C                   ) = 0.00000000000000000E+00 ! [m] Clearance in x
force.par (              17 ,       $F_PS_Dmp_C                   ) = 0.00000000000000000E+00 ! [m] Clearance in y
force.par (              18 ,       $F_PS_Dmp_C                   ) = 0.00000000000000000E+00 ! [m] Clearance in z
force.par (              20 ,       $F_PS_Dmp_C                   ) = null                    ! [-] Reference Marker for meas+calc
force.par (              21 ,       $F_PS_Dmp_C                   ) = null                    ! [-] Expression for Fx
force.par (              22 ,       $F_PS_Dmp_C                   ) = null                    ! [-] Expression for Fy
force.par (              23 ,       $F_PS_Dmp_C                   ) = null                    ! [-] Expression for Fz
force.par (              27 ,       $F_PS_Dmp_C                   ) = 0.00000000000000000E+00 ! [-] Output force in To Marker

force.type (                        $F_PS_Dmp_D                   ) = 5                       ! Type
force.from (                        $F_PS_Dmp_D                   ) = $M_Frame_PS_Dmp_baseD   ! From Marker
force.to (                          $F_PS_Dmp_D                   ) = $S_IRW_Rear.$M_AxleBridge_PS_Dmp_baseD ! To Marker
force.st.equi (           1 ,       $F_PS_Dmp_D                   ) = 0                       ! Equilibrium
force.preld.calc (        3 ,       $F_PS_Dmp_D                   ) = 1                       ! Select Preload cal.
force.preld.calc (        4 ,       $F_PS_Dmp_D                   ) = 1                       ! Select Preload cal.
force.disabled (                    $F_PS_Dmp_D                   ) = 0                       ! Disabled
force.par (               1 ,       $F_PS_Dmp_D                   ) = 0.00000000000000000E+00 ! [N] Nominal force in x
force.par (               2 ,       $F_PS_Dmp_D                   ) = 0.00000000000000000E+00 ! [N] Nominal force in y
force.par (               3 ,       $F_PS_Dmp_D                   ) = -2.07733824163984855E+03 ! [N] Nominal force in z
force.par (               4 ,       $F_PS_Dmp_D                   ) = 0.00000000000000000E+00 ! [N/m] Stiffness in x
force.par (               5 ,       $F_PS_Dmp_D                   ) = 0.00000000000000000E+00 ! [N/m] Stiffness in y
force.par (               6 ,       $F_PS_Dmp_D                   ) = 0.00000000000000000E+00 ! [N/m] Stiffness in z
force.par (               7 ,       $F_PS_Dmp_D                   ) = 0.00000000000000000E+00 ! [Ns/m] Damping in x
force.par (               8 ,       $F_PS_Dmp_D                   ) = 0.00000000000000000E+00 ! [Ns/m] Damping in y
force.par (               9 ,       $F_PS_Dmp_D                   ) = 5.00000000000000000E+06 ! [Ns/m] Damping in z
force.par (              10 ,       $F_PS_Dmp_D                   ) = null                    ! [-] Input Function Fc(x)
force.par (              11 ,       $F_PS_Dmp_D                   ) = null                    ! [-] Input Function Fc(y)
force.par (              12 ,       $F_PS_Dmp_D                   ) = null                    ! [-] Input Function Fc(z)
force.par (              13 ,       $F_PS_Dmp_D                   ) = null                    ! [-] Input Function Fd(xd)
force.par (              14 ,       $F_PS_Dmp_D                   ) = null                    ! [-] Input Function Fd(yd)
force.par (              15 ,       $F_PS_Dmp_D                   ) = null                    ! [-] Input Function Fd(zd)
force.par (              16 ,       $F_PS_Dmp_D                   ) = 0.00000000000000000E+00 ! [m] Clearance in x
force.par (              17 ,       $F_PS_Dmp_D                   ) = 0.00000000000000000E+00 ! [m] Clearance in y
force.par (              18 ,       $F_PS_Dmp_D                   ) = 0.00000000000000000E+00 ! [m] Clearance in z
force.par (              20 ,       $F_PS_Dmp_D                   ) = null                    ! [-] Reference Marker for meas+calc
force.par (              21 ,       $F_PS_Dmp_D                   ) = null                    ! [-] Expression for Fx
force.par (              22 ,       $F_PS_Dmp_D                   ) = null                    ! [-] Expression for Fy
force.par (              23 ,       $F_PS_Dmp_D                   ) = null                    ! [-] Expression for Fz
force.par (              27 ,       $F_PS_Dmp_D                   ) = 0.00000000000000000E+00 ! [-] Output force in To Marker

force.type (                        $F_AirSpring_A                ) = 5                       ! Type
force.from (                        $F_AirSpring_A                ) = $M_Frame_AirSpring_A    ! From Marker
force.to (                          $F_AirSpring_A                ) = $M_DUM_AirSpring_A      ! To Marker
force.preld.calc (        3 ,       $F_AirSpring_A                ) = 1                       ! Select Preload cal.
force.disabled (                    $F_AirSpring_A                ) = 0                       ! Disabled
force.par (               1 ,       $F_AirSpring_A                ) = 0.00000000000000000E+00 ! [N] Nominal force in x
force.par (               2 ,       $F_AirSpring_A                ) = 0.00000000000000000E+00 ! [N] Nominal force in y
force.par (               3 ,       $F_AirSpring_A                ) = 4.90499999999999936E+00 ! [N] Nominal force in z
force.par (               4 ,       $F_AirSpring_A                ) = 1.20000000000000000E+05 ! [N/m] Stiffness in x
force.par (               5 ,       $F_AirSpring_A                ) = 1.20000000000000000E+05 ! [N/m] Stiffness in y
force.par (               6 ,       $F_AirSpring_A                ) = 1.50000000000000000E+05 ! [N/m] Stiffness in z
force.par (               7 ,       $F_AirSpring_A                ) = 0.00000000000000000E+00 ! [Ns/m] Damping in x
force.par (               8 ,       $F_AirSpring_A                ) = 0.00000000000000000E+00 ! [Ns/m] Damping in y
force.par (               9 ,       $F_AirSpring_A                ) = 2.00000000000000000E+04 ! [Ns/m] Damping in z
force.par (              10 ,       $F_AirSpring_A                ) = null                    ! [-] Input Function Fc(x)
force.par (              11 ,       $F_AirSpring_A                ) = null                    ! [-] Input Function Fc(y)
force.par (              12 ,       $F_AirSpring_A                ) = null                    ! [-] Input Function Fc(z)
force.par (              13 ,       $F_AirSpring_A                ) = null                    ! [-] Input Function Fd(xd)
force.par (              14 ,       $F_AirSpring_A                ) = null                    ! [-] Input Function Fd(yd)
force.par (              15 ,       $F_AirSpring_A                ) = null                    ! [-] Input Function Fd(zd)
force.par (              16 ,       $F_AirSpring_A                ) = 0.00000000000000000E+00 ! [m] Clearance in x
force.par (              17 ,       $F_AirSpring_A                ) = 0.00000000000000000E+00 ! [m] Clearance in y
force.par (              18 ,       $F_AirSpring_A                ) = 0.00000000000000000E+00 ! [m] Clearance in z
force.par (              20 ,       $F_AirSpring_A                ) = null                    ! [-] Reference Marker for meas+calc
force.par (              21 ,       $F_AirSpring_A                ) = null                    ! [-] Expression for Fx
force.par (              22 ,       $F_AirSpring_A                ) = null                    ! [-] Expression for Fy
force.par (              23 ,       $F_AirSpring_A                ) = null                    ! [-] Expression for Fz
force.par (              27 ,       $F_AirSpring_A                ) = 0.00000000000000000E+00 ! [-] Output force in To Marker

force.type (                        $F_AirSpring_B                ) = 5                       ! Type
force.from (                        $F_AirSpring_B                ) = $M_Frame_AirSpring_B    ! From Marker
force.to (                          $F_AirSpring_B                ) = $M_DUM_AirSpring_B      ! To Marker
force.preld.calc (        3 ,       $F_AirSpring_B                ) = 1                       ! Select Preload cal.
force.disabled (                    $F_AirSpring_B                ) = 0                       ! Disabled
force.par (               1 ,       $F_AirSpring_B                ) = 0.00000000000000000E+00 ! [N] Nominal force in x
force.par (               2 ,       $F_AirSpring_B                ) = 0.00000000000000000E+00 ! [N] Nominal force in y
force.par (               3 ,       $F_AirSpring_B                ) = 4.90500000000000114E+00 ! [N] Nominal force in z
force.par (               4 ,       $F_AirSpring_B                ) = 1.20000000000000000E+05 ! [N/m] Stiffness in x
force.par (               5 ,       $F_AirSpring_B                ) = 1.20000000000000000E+05 ! [N/m] Stiffness in y
force.par (               6 ,       $F_AirSpring_B                ) = 1.50000000000000000E+05 ! [N/m] Stiffness in z
force.par (               7 ,       $F_AirSpring_B                ) = 0.00000000000000000E+00 ! [Ns/m] Damping in x
force.par (               8 ,       $F_AirSpring_B                ) = 0.00000000000000000E+00 ! [Ns/m] Damping in y
force.par (               9 ,       $F_AirSpring_B                ) = 2.00000000000000000E+04 ! [Ns/m] Damping in z
force.par (              10 ,       $F_AirSpring_B                ) = null                    ! [-] Input Function Fc(x)
force.par (              11 ,       $F_AirSpring_B                ) = null                    ! [-] Input Function Fc(y)
force.par (              12 ,       $F_AirSpring_B                ) = null                    ! [-] Input Function Fc(z)
force.par (              13 ,       $F_AirSpring_B                ) = null                    ! [-] Input Function Fd(xd)
force.par (              14 ,       $F_AirSpring_B                ) = null                    ! [-] Input Function Fd(yd)
force.par (              15 ,       $F_AirSpring_B                ) = null                    ! [-] Input Function Fd(zd)
force.par (              16 ,       $F_AirSpring_B                ) = 0.00000000000000000E+00 ! [m] Clearance in x
force.par (              17 ,       $F_AirSpring_B                ) = 0.00000000000000000E+00 ! [m] Clearance in y
force.par (              18 ,       $F_AirSpring_B                ) = 0.00000000000000000E+00 ! [m] Clearance in z
force.par (              20 ,       $F_AirSpring_B                ) = null                    ! [-] Reference Marker for meas+calc
force.par (              21 ,       $F_AirSpring_B                ) = null                    ! [-] Expression for Fx
force.par (              22 ,       $F_AirSpring_B                ) = null                    ! [-] Expression for Fy
force.par (              23 ,       $F_AirSpring_B                ) = null                    ! [-] Expression for Fz
force.par (              27 ,       $F_AirSpring_B                ) = 0.00000000000000000E+00 ! [-] Output force in To Marker

force.type (                        $F_SSLatDmp                   ) = 86                      ! Type
force.from (                        $F_SSLatDmp                   ) = $M_DUM_SSLatDmp         ! From Marker
force.to (                          $F_SSLatDmp                   ) = $M_Frame_SSLatDmp       ! To Marker
force.st.dyn (            1 ,       $F_SSLatDmp                   ) = 0.00000000000000000E+00 ! Dynamic states
force.st.equi (           1 ,       $F_SSLatDmp                   ) = 0                       ! Equilibrium
force.preld.calc (        4 ,       $F_SSLatDmp                   ) = 1                       ! Select Preload cal.
force.disabled (                    $F_SSLatDmp                   ) = 0                       ! Disabled
force.par (               2 ,       $F_SSLatDmp                   ) = 0.00000000000000000E+00 ! [N] Nominal force F_nom_x
force.par (               3 ,       $F_SSLatDmp                   ) = 0.00000000000000000E+00 ! [N] Nominal force F_nom_y
force.par (               4 ,       $F_SSLatDmp                   ) = 0.00000000000000000E+00 ! [N] Nominal force F_nom_z
force.par (               5 ,       $F_SSLatDmp                   ) = 0.00000000000000000E+00 ! [Nm] Nominal torque T_nom_al
force.par (               6 ,       $F_SSLatDmp                   ) = 0.00000000000000000E+00 ! [Nm] Nominal torque T_nom_be
force.par (               7 ,       $F_SSLatDmp                   ) = 0.00000000000000000E+00 ! [Nm] Nominal torque T_nom_ga
force.par (               8 ,       $F_SSLatDmp                   ) = 0.00000000000000000E+00 ! [N/m] Transl. ser. stiffness cs_x
force.par (               9 ,       $F_SSLatDmp                   ) = 8.00000000000000000E+06 ! [N/m] Transl. ser. stiffness cs_y
force.par (              10 ,       $F_SSLatDmp                   ) = 0.00000000000000000E+00 ! [N/m] Transl. ser. stiffness cs_z
force.par (              11 ,       $F_SSLatDmp                   ) = 0.00000000000000000E+00 ! [Nm/rad] Rotat.  ser. stiffness cs_al
force.par (              12 ,       $F_SSLatDmp                   ) = 0.00000000000000000E+00 ! [Nm/rad] Rotat.  ser. stiffness cs_be
force.par (              13 ,       $F_SSLatDmp                   ) = 0.00000000000000000E+00 ! [Nm/rad] Rotat.  ser. stiffness cs_ga
force.par (              15 ,       $F_SSLatDmp                   ) = 5.00000000000000000E+04 ! [Ns/m] Transl. ser. damping  ds_y
force.par (              20 ,       $F_SSLatDmp                   ) = 0.00000000000000000E+00 ! [N/m] Transl. par. stiffness cp_x
force.par (              21 ,       $F_SSLatDmp                   ) = 0.00000000000000000E+00 ! [N/m] Transl. par. stiffness cp_y
force.par (              22 ,       $F_SSLatDmp                   ) = 0.00000000000000000E+00 ! [N/m] Transl. par. stiffness cp_z
force.par (              23 ,       $F_SSLatDmp                   ) = 0.00000000000000000E+00 ! [Nm/rad] Rotat.  par. stiffness cp_al
force.par (              24 ,       $F_SSLatDmp                   ) = 0.00000000000000000E+00 ! [Nm/rad] Rotat.  par. stiffness cp_be
force.par (              25 ,       $F_SSLatDmp                   ) = 0.00000000000000000E+00 ! [Nm/rad] Rotat.  par. stiffness cp_ga
force.par (              26 ,       $F_SSLatDmp                   ) = 0.00000000000000000E+00 ! [Ns/m] Transl. par. damping dp_x
force.par (              27 ,       $F_SSLatDmp                   ) = 0.00000000000000000E+00 ! [Ns/m] Transl. par. damping dp_y
force.par (              28 ,       $F_SSLatDmp                   ) = 0.00000000000000000E+00 ! [Ns/m] Transl. par. damping dp_z
force.par (              29 ,       $F_SSLatDmp                   ) = 0.00000000000000000E+00 ! [Nms/rad] Rotat.  par. damping dp_al
force.par (              30 ,       $F_SSLatDmp                   ) = 0.00000000000000000E+00 ! [Nms/rad] Rotat.  par. damping dp_be
force.par (              31 ,       $F_SSLatDmp                   ) = 0.00000000000000000E+00 ! [Nms/rad] Rotat.  par. damping dp_ga
force.par (              32 ,       $F_SSLatDmp                   ) = 0.00000000000000000E+00 ! [m] Nominal length x_nom
force.par (              33 ,       $F_SSLatDmp                   ) = 0.00000000000000000E+00 ! [m] Nominal length y_nom
force.par (              34 ,       $F_SSLatDmp                   ) = 0.00000000000000000E+00 ! [m] Nominal length z_nom
force.par (              35 ,       $F_SSLatDmp                   ) = 0.00000000000000000E+00 ! [rad] Nominal angle al_nom
force.par (              36 ,       $F_SSLatDmp                   ) = 0.00000000000000000E+00 ! [rad] Nominal angle be_nom
force.par (              37 ,       $F_SSLatDmp                   ) = 0.00000000000000000E+00 ! [rad] Nominal angle ga_nom
force.par (              38 ,       $F_SSLatDmp                   ) = 0.00000000000000000E+00 ! [-] Mode of angle calculation

force.type (                        $F_AntiRoll                   ) = 13                      ! Type
force.from (                        $F_AntiRoll                   ) = $M_DUM_AntiRoll         ! From Marker
force.to (                          $F_AntiRoll                   ) = $M_Frame_AntiRoll       ! To Marker
force.disabled (                    $F_AntiRoll                   ) = 0                       ! Disabled
force.par (               1 ,       $F_AntiRoll                   ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in al
force.par (               2 ,       $F_AntiRoll                   ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in be
force.par (               3 ,       $F_AntiRoll                   ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in ga
force.par (               4 ,       $F_AntiRoll                   ) = 2.50000000000000000E+06 ! [Nm/rad] Stiffness in al
force.par (               5 ,       $F_AntiRoll                   ) = 0.00000000000000000E+00 ! [Nm/rad] Stiffness in be
force.par (               6 ,       $F_AntiRoll                   ) = 0.00000000000000000E+00 ! [Nm/rad] Stiffness in ga
force.par (               7 ,       $F_AntiRoll                   ) = 0.00000000000000000E+00 ! [Nms/rad] Damping in al
force.par (               8 ,       $F_AntiRoll                   ) = 0.00000000000000000E+00 ! [Nms/rad] Damping in be
force.par (               9 ,       $F_AntiRoll                   ) = 0.00000000000000000E+00 ! [Nms/rad] Damping in ga
force.par (              10 ,       $F_AntiRoll                   ) = 0.00000000000000000E+00 ! [-] Mode of angle calculation
force.par (              11 ,       $F_AntiRoll                   ) = null                    ! [-] Input Function T_c(al)
force.par (              12 ,       $F_AntiRoll                   ) = null                    ! [-] Input Function T_c(be)
force.par (              13 ,       $F_AntiRoll                   ) = null                    ! [-] Input Function T_c(ga)
force.par (              14 ,       $F_AntiRoll                   ) = null                    ! [-] Input Function T_d(ald)
force.par (              15 ,       $F_AntiRoll                   ) = null                    ! [-] Input Function T_d(bed)
force.par (              16 ,       $F_AntiRoll                   ) = null                    ! [-] Input Function T_d(gad)
force.par (              18 ,       $F_AntiRoll                   ) = null                    ! [-] Expression for T_al
force.par (              19 ,       $F_AntiRoll                   ) = null                    ! [-] Expression for T_be
force.par (              20 ,       $F_AntiRoll                   ) = null                    ! [-] Expression for T_ga

force.type (                        $F_SS_TractionRod_A           ) = 3                       ! Type
force.from (                        $F_SS_TractionRod_A           ) = $M_DUM_TractionRod_A    ! From Marker
force.to (                          $F_SS_TractionRod_A           ) = $M_Frame_TractionRod_A  ! To Marker
force.disabled (                    $F_SS_TractionRod_A           ) = 0                       ! Disabled
force.par (               1 ,       $F_SS_TractionRod_A           ) = 0.00000000000000000E+00 ! [N] Nominal force in x
force.par (               2 ,       $F_SS_TractionRod_A           ) = 0.00000000000000000E+00 ! [N] Nominal force in y
force.par (               3 ,       $F_SS_TractionRod_A           ) = 0.00000000000000000E+00 ! [N] Nominal force in z
force.par (               4 ,       $F_SS_TractionRod_A           ) = 8.00000000000000000E+06 ! [N/m] Stiffness in x
force.par (               5 ,       $F_SS_TractionRod_A           ) = 0.00000000000000000E+00 ! [N/m] Stiffness in y
force.par (               6 ,       $F_SS_TractionRod_A           ) = 0.00000000000000000E+00 ! [N/m] Stiffness in z

force.type (                        $F_SS_TractionRod_B           ) = 3                       ! Type
force.from (                        $F_SS_TractionRod_B           ) = $M_DUM_TractionRod_B    ! From Marker
force.to (                          $F_SS_TractionRod_B           ) = $M_Frame_TractionRod_B  ! To Marker
force.disabled (                    $F_SS_TractionRod_B           ) = 0                       ! Disabled
force.par (               1 ,       $F_SS_TractionRod_B           ) = 0.00000000000000000E+00 ! [N] Nominal force in x
force.par (               2 ,       $F_SS_TractionRod_B           ) = 0.00000000000000000E+00 ! [N] Nominal force in y
force.par (               3 ,       $F_SS_TractionRod_B           ) = 0.00000000000000000E+00 ! [N] Nominal force in z
force.par (               4 ,       $F_SS_TractionRod_B           ) = 8.00000000000000000E+06 ! [N/m] Stiffness in x
force.par (               5 ,       $F_SS_TractionRod_B           ) = 0.00000000000000000E+00 ! [N/m] Stiffness in y
force.par (               6 ,       $F_SS_TractionRod_B           ) = 0.00000000000000000E+00 ! [N/m] Stiffness in z

force.type (                        $F_PS_BarFixed_A              ) = 43                      ! Type
force.from (                        $F_PS_BarFixed_A              ) = $M_LongiBar_A_FrameSide ! From Marker
force.to (                          $F_PS_BarFixed_A              ) = $M_Frame_LongiBar_A     ! To Marker
force.disabled (                    $F_PS_BarFixed_A              ) = 0                       ! Disabled
force.txt (                         $F_PS_BarFixed_A              ) = '一系双拉杆系统，铰接点在轴桥侧，另一端通过43号力元固结在构架侧。' ! Comment
force.par (               1 ,       $F_PS_BarFixed_A              ) = 0.00000000000000000E+00 ! [N] Nominal force in x
force.par (               2 ,       $F_PS_BarFixed_A              ) = 0.00000000000000000E+00 ! [N] Nominal force in y
force.par (               3 ,       $F_PS_BarFixed_A              ) = 0.00000000000000000E+00 ! [N] Nominal force in z
force.par (               4 ,       $F_PS_BarFixed_A              ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in al
force.par (               5 ,       $F_PS_BarFixed_A              ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in be
force.par (               6 ,       $F_PS_BarFixed_A              ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in ga
force.par (               7 ,       $F_PS_BarFixed_A              ) = 1.00000000000000000E+08 ! [N/m] Transl. stiffness in x
force.par (               8 ,       $F_PS_BarFixed_A              ) = 1.00000000000000000E+08 ! [N/m] Transl. stiffness in y
force.par (               9 ,       $F_PS_BarFixed_A              ) = 1.00000000000000000E+08 ! [N/m] Transl. stiffness in z
force.par (              10 ,       $F_PS_BarFixed_A              ) = 0.00000000000000000E+00 ! [Nm/rad] Rotat. stiffness in al
force.par (              11 ,       $F_PS_BarFixed_A              ) = 0.00000000000000000E+00 ! [Nm/rad] Rotat. stiffness in be
force.par (              12 ,       $F_PS_BarFixed_A              ) = 0.00000000000000000E+00 ! [Nm/rad] Rotat. stiffness in ga
force.par (              13 ,       $F_PS_BarFixed_A              ) = 1.00000000000000000E+06 ! [Ns/m] Transl. damping in x
force.par (              14 ,       $F_PS_BarFixed_A              ) = 1.00000000000000000E+06 ! [Ns/m] Transl. damping in y
force.par (              15 ,       $F_PS_BarFixed_A              ) = 1.00000000000000000E+06 ! [Ns/m] Transl. damping in z
force.par (              16 ,       $F_PS_BarFixed_A              ) = 1.00000000000000000E+06 ! [Nms/rad] Rotat. damping in al
force.par (              17 ,       $F_PS_BarFixed_A              ) = 1.00000000000000000E+06 ! [Nms/rad] Rotat. damping in be
force.par (              18 ,       $F_PS_BarFixed_A              ) = 1.00000000000000000E+06 ! [Nms/rad] Rotat. damping in ga
force.par (              19 ,       $F_PS_BarFixed_A              ) = null                    ! [-] Input Function F_c(x)
force.par (              20 ,       $F_PS_BarFixed_A              ) = null                    ! [-] Input Function F_c(y)
force.par (              21 ,       $F_PS_BarFixed_A              ) = null                    ! [-] Input Function F_c(z)
force.par (              22 ,       $F_PS_BarFixed_A              ) = null                    ! [-] Input Function T_c(al)
force.par (              23 ,       $F_PS_BarFixed_A              ) = null                    ! [-] Input Function T_c(be)
force.par (              24 ,       $F_PS_BarFixed_A              ) = null                    ! [-] Input Function T_c(ga)
force.par (              25 ,       $F_PS_BarFixed_A              ) = null                    ! [-] Input Function F_d(xd)
force.par (              26 ,       $F_PS_BarFixed_A              ) = null                    ! [-] Input Function F_d(yd)
force.par (              27 ,       $F_PS_BarFixed_A              ) = null                    ! [-] Input Function F_d(zd)
force.par (              28 ,       $F_PS_BarFixed_A              ) = null                    ! [-] Input Function T_d(ald)
force.par (              29 ,       $F_PS_BarFixed_A              ) = null                    ! [-] Input Function T_d(bed)
force.par (              30 ,       $F_PS_BarFixed_A              ) = null                    ! [-] Input Function T_d(gad)
force.par (              31 ,       $F_PS_BarFixed_A              ) = 0.00000000000000000E+00 ! [-] Mode of angle calculation
force.par (              33 ,       $F_PS_BarFixed_A              ) = null                    ! [-] Expression for force in x
force.par (              34 ,       $F_PS_BarFixed_A              ) = null                    ! [-] Expression for force in y
force.par (              35 ,       $F_PS_BarFixed_A              ) = null                    ! [-] Expression for force in z
force.par (              36 ,       $F_PS_BarFixed_A              ) = null                    ! [-] Expression for torque in al
force.par (              37 ,       $F_PS_BarFixed_A              ) = null                    ! [-] Expression for torque in be
force.par (              38 ,       $F_PS_BarFixed_A              ) = null                    ! [-] Expression for torque in ga
force.par (              39 ,       $F_PS_BarFixed_A              ) = null                    ! [-] Input Function Set
force.par (              40 ,       $F_PS_BarFixed_A              ) = 0.00000000000000000E+00 ! [m] Nominal displacement in x
force.par (              41 ,       $F_PS_BarFixed_A              ) = 0.00000000000000000E+00 ! [m] Nominal displacement in y
force.par (              42 ,       $F_PS_BarFixed_A              ) = 0.00000000000000000E+00 ! [m] Nominal displacement in z
force.par (              43 ,       $F_PS_BarFixed_A              ) = 0.00000000000000000E+00 ! [rad] Nominal angle in al
force.par (              44 ,       $F_PS_BarFixed_A              ) = 0.00000000000000000E+00 ! [rad] Nominal angle in be
force.par (              45 ,       $F_PS_BarFixed_A              ) = 0.00000000000000000E+00 ! [rad] Nominal angle in ga
force.par (              46 ,       $F_PS_BarFixed_A              ) = 0.00000000000000000E+00 ! [-] Output force in To Marker

force.type (                        $F_PS_BarFixed_B              ) = 43                      ! Type
force.from (                        $F_PS_BarFixed_B              ) = $M_LongiBar_B_FrameSide ! From Marker
force.to (                          $F_PS_BarFixed_B              ) = $M_Frame_LongiBar_B     ! To Marker
force.disabled (                    $F_PS_BarFixed_B              ) = 0                       ! Disabled
force.txt (                         $F_PS_BarFixed_B              ) = '一系双拉杆系统，铰接点在轴桥侧，另一端通过43号力元固结在构架侧。' ! Comment
force.par (               1 ,       $F_PS_BarFixed_B              ) = 0.00000000000000000E+00 ! [N] Nominal force in x
force.par (               2 ,       $F_PS_BarFixed_B              ) = 0.00000000000000000E+00 ! [N] Nominal force in y
force.par (               3 ,       $F_PS_BarFixed_B              ) = 0.00000000000000000E+00 ! [N] Nominal force in z
force.par (               4 ,       $F_PS_BarFixed_B              ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in al
force.par (               5 ,       $F_PS_BarFixed_B              ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in be
force.par (               6 ,       $F_PS_BarFixed_B              ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in ga
force.par (               7 ,       $F_PS_BarFixed_B              ) = 1.00000000000000000E+08 ! [N/m] Transl. stiffness in x
force.par (               8 ,       $F_PS_BarFixed_B              ) = 1.00000000000000000E+08 ! [N/m] Transl. stiffness in y
force.par (               9 ,       $F_PS_BarFixed_B              ) = 1.00000000000000000E+08 ! [N/m] Transl. stiffness in z
force.par (              10 ,       $F_PS_BarFixed_B              ) = 0.00000000000000000E+00 ! [Nm/rad] Rotat. stiffness in al
force.par (              11 ,       $F_PS_BarFixed_B              ) = 0.00000000000000000E+00 ! [Nm/rad] Rotat. stiffness in be
force.par (              12 ,       $F_PS_BarFixed_B              ) = 0.00000000000000000E+00 ! [Nm/rad] Rotat. stiffness in ga
force.par (              13 ,       $F_PS_BarFixed_B              ) = 1.00000000000000000E+06 ! [Ns/m] Transl. damping in x
force.par (              14 ,       $F_PS_BarFixed_B              ) = 1.00000000000000000E+06 ! [Ns/m] Transl. damping in y
force.par (              15 ,       $F_PS_BarFixed_B              ) = 1.00000000000000000E+06 ! [Ns/m] Transl. damping in z
force.par (              16 ,       $F_PS_BarFixed_B              ) = 1.00000000000000000E+06 ! [Nms/rad] Rotat. damping in al
force.par (              17 ,       $F_PS_BarFixed_B              ) = 1.00000000000000000E+06 ! [Nms/rad] Rotat. damping in be
force.par (              18 ,       $F_PS_BarFixed_B              ) = 1.00000000000000000E+06 ! [Nms/rad] Rotat. damping in ga
force.par (              19 ,       $F_PS_BarFixed_B              ) = null                    ! [-] Input Function F_c(x)
force.par (              20 ,       $F_PS_BarFixed_B              ) = null                    ! [-] Input Function F_c(y)
force.par (              21 ,       $F_PS_BarFixed_B              ) = null                    ! [-] Input Function F_c(z)
force.par (              22 ,       $F_PS_BarFixed_B              ) = null                    ! [-] Input Function T_c(al)
force.par (              23 ,       $F_PS_BarFixed_B              ) = null                    ! [-] Input Function T_c(be)
force.par (              24 ,       $F_PS_BarFixed_B              ) = null                    ! [-] Input Function T_c(ga)
force.par (              25 ,       $F_PS_BarFixed_B              ) = null                    ! [-] Input Function F_d(xd)
force.par (              26 ,       $F_PS_BarFixed_B              ) = null                    ! [-] Input Function F_d(yd)
force.par (              27 ,       $F_PS_BarFixed_B              ) = null                    ! [-] Input Function F_d(zd)
force.par (              28 ,       $F_PS_BarFixed_B              ) = null                    ! [-] Input Function T_d(ald)
force.par (              29 ,       $F_PS_BarFixed_B              ) = null                    ! [-] Input Function T_d(bed)
force.par (              30 ,       $F_PS_BarFixed_B              ) = null                    ! [-] Input Function T_d(gad)
force.par (              31 ,       $F_PS_BarFixed_B              ) = 0.00000000000000000E+00 ! [-] Mode of angle calculation
force.par (              33 ,       $F_PS_BarFixed_B              ) = null                    ! [-] Expression for force in x
force.par (              34 ,       $F_PS_BarFixed_B              ) = null                    ! [-] Expression for force in y
force.par (              35 ,       $F_PS_BarFixed_B              ) = null                    ! [-] Expression for force in z
force.par (              36 ,       $F_PS_BarFixed_B              ) = null                    ! [-] Expression for torque in al
force.par (              37 ,       $F_PS_BarFixed_B              ) = null                    ! [-] Expression for torque in be
force.par (              38 ,       $F_PS_BarFixed_B              ) = null                    ! [-] Expression for torque in ga
force.par (              39 ,       $F_PS_BarFixed_B              ) = null                    ! [-] Input Function Set
force.par (              40 ,       $F_PS_BarFixed_B              ) = 0.00000000000000000E+00 ! [m] Nominal displacement in x
force.par (              41 ,       $F_PS_BarFixed_B              ) = 0.00000000000000000E+00 ! [m] Nominal displacement in y
force.par (              42 ,       $F_PS_BarFixed_B              ) = 0.00000000000000000E+00 ! [m] Nominal displacement in z
force.par (              43 ,       $F_PS_BarFixed_B              ) = 0.00000000000000000E+00 ! [rad] Nominal angle in al
force.par (              44 ,       $F_PS_BarFixed_B              ) = 0.00000000000000000E+00 ! [rad] Nominal angle in be
force.par (              45 ,       $F_PS_BarFixed_B              ) = 0.00000000000000000E+00 ! [rad] Nominal angle in ga
force.par (              46 ,       $F_PS_BarFixed_B              ) = 0.00000000000000000E+00 ! [-] Output force in To Marker

force.type (                        $F_PS_BarFixed_C              ) = 43                      ! Type
force.from (                        $F_PS_BarFixed_C              ) = $M_LongiBar_C_FrameSide ! From Marker
force.to (                          $F_PS_BarFixed_C              ) = $M_Frame_LongiBar_C     ! To Marker
force.disabled (                    $F_PS_BarFixed_C              ) = 0                       ! Disabled
force.txt (                         $F_PS_BarFixed_C              ) = '一系双拉杆系统，铰接点在轴桥侧，另一端通过43号力元固结在构架侧。' ! Comment
force.par (               1 ,       $F_PS_BarFixed_C              ) = 0.00000000000000000E+00 ! [N] Nominal force in x
force.par (               2 ,       $F_PS_BarFixed_C              ) = 0.00000000000000000E+00 ! [N] Nominal force in y
force.par (               3 ,       $F_PS_BarFixed_C              ) = 0.00000000000000000E+00 ! [N] Nominal force in z
force.par (               4 ,       $F_PS_BarFixed_C              ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in al
force.par (               5 ,       $F_PS_BarFixed_C              ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in be
force.par (               6 ,       $F_PS_BarFixed_C              ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in ga
force.par (               7 ,       $F_PS_BarFixed_C              ) = 1.00000000000000000E+08 ! [N/m] Transl. stiffness in x
force.par (               8 ,       $F_PS_BarFixed_C              ) = 1.00000000000000000E+08 ! [N/m] Transl. stiffness in y
force.par (               9 ,       $F_PS_BarFixed_C              ) = 1.00000000000000000E+08 ! [N/m] Transl. stiffness in z
force.par (              10 ,       $F_PS_BarFixed_C              ) = 0.00000000000000000E+00 ! [Nm/rad] Rotat. stiffness in al
force.par (              11 ,       $F_PS_BarFixed_C              ) = 0.00000000000000000E+00 ! [Nm/rad] Rotat. stiffness in be
force.par (              12 ,       $F_PS_BarFixed_C              ) = 0.00000000000000000E+00 ! [Nm/rad] Rotat. stiffness in ga
force.par (              13 ,       $F_PS_BarFixed_C              ) = 1.00000000000000000E+06 ! [Ns/m] Transl. damping in x
force.par (              14 ,       $F_PS_BarFixed_C              ) = 1.00000000000000000E+06 ! [Ns/m] Transl. damping in y
force.par (              15 ,       $F_PS_BarFixed_C              ) = 1.00000000000000000E+06 ! [Ns/m] Transl. damping in z
force.par (              16 ,       $F_PS_BarFixed_C              ) = 1.00000000000000000E+06 ! [Nms/rad] Rotat. damping in al
force.par (              17 ,       $F_PS_BarFixed_C              ) = 1.00000000000000000E+06 ! [Nms/rad] Rotat. damping in be
force.par (              18 ,       $F_PS_BarFixed_C              ) = 1.00000000000000000E+06 ! [Nms/rad] Rotat. damping in ga
force.par (              19 ,       $F_PS_BarFixed_C              ) = null                    ! [-] Input Function F_c(x)
force.par (              20 ,       $F_PS_BarFixed_C              ) = null                    ! [-] Input Function F_c(y)
force.par (              21 ,       $F_PS_BarFixed_C              ) = null                    ! [-] Input Function F_c(z)
force.par (              22 ,       $F_PS_BarFixed_C              ) = null                    ! [-] Input Function T_c(al)
force.par (              23 ,       $F_PS_BarFixed_C              ) = null                    ! [-] Input Function T_c(be)
force.par (              24 ,       $F_PS_BarFixed_C              ) = null                    ! [-] Input Function T_c(ga)
force.par (              25 ,       $F_PS_BarFixed_C              ) = null                    ! [-] Input Function F_d(xd)
force.par (              26 ,       $F_PS_BarFixed_C              ) = null                    ! [-] Input Function F_d(yd)
force.par (              27 ,       $F_PS_BarFixed_C              ) = null                    ! [-] Input Function F_d(zd)
force.par (              28 ,       $F_PS_BarFixed_C              ) = null                    ! [-] Input Function T_d(ald)
force.par (              29 ,       $F_PS_BarFixed_C              ) = null                    ! [-] Input Function T_d(bed)
force.par (              30 ,       $F_PS_BarFixed_C              ) = null                    ! [-] Input Function T_d(gad)
force.par (              31 ,       $F_PS_BarFixed_C              ) = 0.00000000000000000E+00 ! [-] Mode of angle calculation
force.par (              33 ,       $F_PS_BarFixed_C              ) = null                    ! [-] Expression for force in x
force.par (              34 ,       $F_PS_BarFixed_C              ) = null                    ! [-] Expression for force in y
force.par (              35 ,       $F_PS_BarFixed_C              ) = null                    ! [-] Expression for force in z
force.par (              36 ,       $F_PS_BarFixed_C              ) = null                    ! [-] Expression for torque in al
force.par (              37 ,       $F_PS_BarFixed_C              ) = null                    ! [-] Expression for torque in be
force.par (              38 ,       $F_PS_BarFixed_C              ) = null                    ! [-] Expression for torque in ga
force.par (              39 ,       $F_PS_BarFixed_C              ) = null                    ! [-] Input Function Set
force.par (              40 ,       $F_PS_BarFixed_C              ) = 0.00000000000000000E+00 ! [m] Nominal displacement in x
force.par (              41 ,       $F_PS_BarFixed_C              ) = 0.00000000000000000E+00 ! [m] Nominal displacement in y
force.par (              42 ,       $F_PS_BarFixed_C              ) = 0.00000000000000000E+00 ! [m] Nominal displacement in z
force.par (              43 ,       $F_PS_BarFixed_C              ) = 0.00000000000000000E+00 ! [rad] Nominal angle in al
force.par (              44 ,       $F_PS_BarFixed_C              ) = 0.00000000000000000E+00 ! [rad] Nominal angle in be
force.par (              45 ,       $F_PS_BarFixed_C              ) = 0.00000000000000000E+00 ! [rad] Nominal angle in ga
force.par (              46 ,       $F_PS_BarFixed_C              ) = 0.00000000000000000E+00 ! [-] Output force in To Marker

force.type (                        $F_PS_BarFixed_D              ) = 43                      ! Type
force.from (                        $F_PS_BarFixed_D              ) = $M_LongiBar_D_FrameSide ! From Marker
force.to (                          $F_PS_BarFixed_D              ) = $M_Frame_LongiBar_D     ! To Marker
force.preld.calc (        3 ,       $F_PS_BarFixed_D              ) = 0                       ! Select Preload cal.
force.disabled (                    $F_PS_BarFixed_D              ) = 0                       ! Disabled
force.txt (                         $F_PS_BarFixed_D              ) = '一系双拉杆系统，铰接点在轴桥侧，另一端通过43号力元固结在构架侧。' ! Comment
force.par (               1 ,       $F_PS_BarFixed_D              ) = 0.00000000000000000E+00 ! [N] Nominal force in x
force.par (               2 ,       $F_PS_BarFixed_D              ) = 0.00000000000000000E+00 ! [N] Nominal force in y
force.par (               3 ,       $F_PS_BarFixed_D              ) = 0.00000000000000000E+00 ! [N] Nominal force in z
force.par (               4 ,       $F_PS_BarFixed_D              ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in al
force.par (               5 ,       $F_PS_BarFixed_D              ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in be
force.par (               6 ,       $F_PS_BarFixed_D              ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in ga
force.par (               7 ,       $F_PS_BarFixed_D              ) = 1.00000000000000000E+08 ! [N/m] Transl. stiffness in x
force.par (               8 ,       $F_PS_BarFixed_D              ) = 1.00000000000000000E+08 ! [N/m] Transl. stiffness in y
force.par (               9 ,       $F_PS_BarFixed_D              ) = 1.00000000000000000E+08 ! [N/m] Transl. stiffness in z
force.par (              10 ,       $F_PS_BarFixed_D              ) = 0.00000000000000000E+00 ! [Nm/rad] Rotat. stiffness in al
force.par (              11 ,       $F_PS_BarFixed_D              ) = 0.00000000000000000E+00 ! [Nm/rad] Rotat. stiffness in be
force.par (              12 ,       $F_PS_BarFixed_D              ) = 0.00000000000000000E+00 ! [Nm/rad] Rotat. stiffness in ga
force.par (              13 ,       $F_PS_BarFixed_D              ) = 1.00000000000000000E+06 ! [Ns/m] Transl. damping in x
force.par (              14 ,       $F_PS_BarFixed_D              ) = 1.00000000000000000E+06 ! [Ns/m] Transl. damping in y
force.par (              15 ,       $F_PS_BarFixed_D              ) = 1.00000000000000000E+06 ! [Ns/m] Transl. damping in z
force.par (              16 ,       $F_PS_BarFixed_D              ) = 1.00000000000000000E+06 ! [Nms/rad] Rotat. damping in al
force.par (              17 ,       $F_PS_BarFixed_D              ) = 1.00000000000000000E+06 ! [Nms/rad] Rotat. damping in be
force.par (              18 ,       $F_PS_BarFixed_D              ) = 1.00000000000000000E+06 ! [Nms/rad] Rotat. damping in ga
force.par (              19 ,       $F_PS_BarFixed_D              ) = null                    ! [-] Input Function F_c(x)
force.par (              20 ,       $F_PS_BarFixed_D              ) = null                    ! [-] Input Function F_c(y)
force.par (              21 ,       $F_PS_BarFixed_D              ) = null                    ! [-] Input Function F_c(z)
force.par (              22 ,       $F_PS_BarFixed_D              ) = null                    ! [-] Input Function T_c(al)
force.par (              23 ,       $F_PS_BarFixed_D              ) = null                    ! [-] Input Function T_c(be)
force.par (              24 ,       $F_PS_BarFixed_D              ) = null                    ! [-] Input Function T_c(ga)
force.par (              25 ,       $F_PS_BarFixed_D              ) = null                    ! [-] Input Function F_d(xd)
force.par (              26 ,       $F_PS_BarFixed_D              ) = null                    ! [-] Input Function F_d(yd)
force.par (              27 ,       $F_PS_BarFixed_D              ) = null                    ! [-] Input Function F_d(zd)
force.par (              28 ,       $F_PS_BarFixed_D              ) = null                    ! [-] Input Function T_d(ald)
force.par (              29 ,       $F_PS_BarFixed_D              ) = null                    ! [-] Input Function T_d(bed)
force.par (              30 ,       $F_PS_BarFixed_D              ) = null                    ! [-] Input Function T_d(gad)
force.par (              31 ,       $F_PS_BarFixed_D              ) = 0.00000000000000000E+00 ! [-] Mode of angle calculation
force.par (              33 ,       $F_PS_BarFixed_D              ) = null                    ! [-] Expression for force in x
force.par (              34 ,       $F_PS_BarFixed_D              ) = null                    ! [-] Expression for force in y
force.par (              35 ,       $F_PS_BarFixed_D              ) = null                    ! [-] Expression for force in z
force.par (              36 ,       $F_PS_BarFixed_D              ) = null                    ! [-] Expression for torque in al
force.par (              37 ,       $F_PS_BarFixed_D              ) = null                    ! [-] Expression for torque in be
force.par (              38 ,       $F_PS_BarFixed_D              ) = null                    ! [-] Expression for torque in ga
force.par (              39 ,       $F_PS_BarFixed_D              ) = null                    ! [-] Input Function Set
force.par (              40 ,       $F_PS_BarFixed_D              ) = 0.00000000000000000E+00 ! [m] Nominal displacement in x
force.par (              41 ,       $F_PS_BarFixed_D              ) = 0.00000000000000000E+00 ! [m] Nominal displacement in y
force.par (              42 ,       $F_PS_BarFixed_D              ) = 0.00000000000000000E+00 ! [m] Nominal displacement in z
force.par (              43 ,       $F_PS_BarFixed_D              ) = 0.00000000000000000E+00 ! [rad] Nominal angle in al
force.par (              44 ,       $F_PS_BarFixed_D              ) = 0.00000000000000000E+00 ! [rad] Nominal angle in be
force.par (              45 ,       $F_PS_BarFixed_D              ) = 0.00000000000000000E+00 ! [rad] Nominal angle in ga
force.par (              46 ,       $F_PS_BarFixed_D              ) = 0.00000000000000000E+00 ! [-] Output force in To Marker

force.type (                        $F_AntiHuntingDmp_A           ) = 5                       ! Type
force.from (                        $F_AntiHuntingDmp_A           ) = $M_DUM_AntiHuntingDmp_A ! From Marker
force.to (                          $F_AntiHuntingDmp_A           ) = $M_Frame_AntiHuntingDmp_A ! To Marker
force.preld.calc (        3 ,       $F_AntiHuntingDmp_A           ) = 1                       ! Select Preload cal.
force.disabled (                    $F_AntiHuntingDmp_A           ) = 0                       ! Disabled
force.par (               1 ,       $F_AntiHuntingDmp_A           ) = 0.00000000000000000E+00 ! [N] Nominal force in x
force.par (               2 ,       $F_AntiHuntingDmp_A           ) = 0.00000000000000000E+00 ! [N] Nominal force in y
force.par (               3 ,       $F_AntiHuntingDmp_A           ) = 0.00000000000000000E+00 ! [N] Nominal force in z
force.par (               4 ,       $F_AntiHuntingDmp_A           ) = 0.00000000000000000E+00 ! [N/m] Stiffness in x
force.par (               5 ,       $F_AntiHuntingDmp_A           ) = 0.00000000000000000E+00 ! [N/m] Stiffness in y
force.par (               6 ,       $F_AntiHuntingDmp_A           ) = 0.00000000000000000E+00 ! [N/m] Stiffness in z
force.par (               7 ,       $F_AntiHuntingDmp_A           ) = 6.00000000000000000E+05 ! [Ns/m] Damping in x
force.par (               8 ,       $F_AntiHuntingDmp_A           ) = 0.00000000000000000E+00 ! [Ns/m] Damping in y
force.par (               9 ,       $F_AntiHuntingDmp_A           ) = 0.00000000000000000E+00 ! [Ns/m] Damping in z
force.par (              10 ,       $F_AntiHuntingDmp_A           ) = null                    ! [-] Input Function Fc(x)
force.par (              11 ,       $F_AntiHuntingDmp_A           ) = null                    ! [-] Input Function Fc(y)
force.par (              12 ,       $F_AntiHuntingDmp_A           ) = null                    ! [-] Input Function Fc(z)
force.par (              13 ,       $F_AntiHuntingDmp_A           ) = null                    ! [-] Input Function Fd(xd)
force.par (              14 ,       $F_AntiHuntingDmp_A           ) = null                    ! [-] Input Function Fd(yd)
force.par (              15 ,       $F_AntiHuntingDmp_A           ) = null                    ! [-] Input Function Fd(zd)
force.par (              16 ,       $F_AntiHuntingDmp_A           ) = 0.00000000000000000E+00 ! [m] Clearance in x
force.par (              17 ,       $F_AntiHuntingDmp_A           ) = 0.00000000000000000E+00 ! [m] Clearance in y
force.par (              18 ,       $F_AntiHuntingDmp_A           ) = 0.00000000000000000E+00 ! [m] Clearance in z
force.par (              20 ,       $F_AntiHuntingDmp_A           ) = null                    ! [-] Reference Marker for meas+calc
force.par (              21 ,       $F_AntiHuntingDmp_A           ) = null                    ! [-] Expression for Fx
force.par (              22 ,       $F_AntiHuntingDmp_A           ) = null                    ! [-] Expression for Fy
force.par (              23 ,       $F_AntiHuntingDmp_A           ) = null                    ! [-] Expression for Fz
force.par (              27 ,       $F_AntiHuntingDmp_A           ) = 0.00000000000000000E+00 ! [-] Output force in To Marker

force.type (                        $F_AntiHuntingDmp_B           ) = 5                       ! Type
force.from (                        $F_AntiHuntingDmp_B           ) = $M_DUM_AntiHuntingDmp_B ! From Marker
force.to (                          $F_AntiHuntingDmp_B           ) = $M_Frame_AntiHuntingDmp_B ! To Marker
force.preld.calc (        3 ,       $F_AntiHuntingDmp_B           ) = 1                       ! Select Preload cal.
force.disabled (                    $F_AntiHuntingDmp_B           ) = 0                       ! Disabled
force.par (               1 ,       $F_AntiHuntingDmp_B           ) = 0.00000000000000000E+00 ! [N] Nominal force in x
force.par (               2 ,       $F_AntiHuntingDmp_B           ) = 0.00000000000000000E+00 ! [N] Nominal force in y
force.par (               3 ,       $F_AntiHuntingDmp_B           ) = 0.00000000000000000E+00 ! [N] Nominal force in z
force.par (               4 ,       $F_AntiHuntingDmp_B           ) = 0.00000000000000000E+00 ! [N/m] Stiffness in x
force.par (               5 ,       $F_AntiHuntingDmp_B           ) = 0.00000000000000000E+00 ! [N/m] Stiffness in y
force.par (               6 ,       $F_AntiHuntingDmp_B           ) = 0.00000000000000000E+00 ! [N/m] Stiffness in z
force.par (               7 ,       $F_AntiHuntingDmp_B           ) = 6.00000000000000000E+05 ! [Ns/m] Damping in x
force.par (               8 ,       $F_AntiHuntingDmp_B           ) = 0.00000000000000000E+00 ! [Ns/m] Damping in y
force.par (               9 ,       $F_AntiHuntingDmp_B           ) = 0.00000000000000000E+00 ! [Ns/m] Damping in z
force.par (              10 ,       $F_AntiHuntingDmp_B           ) = null                    ! [-] Input Function Fc(x)
force.par (              11 ,       $F_AntiHuntingDmp_B           ) = null                    ! [-] Input Function Fc(y)
force.par (              12 ,       $F_AntiHuntingDmp_B           ) = null                    ! [-] Input Function Fc(z)
force.par (              13 ,       $F_AntiHuntingDmp_B           ) = null                    ! [-] Input Function Fd(xd)
force.par (              14 ,       $F_AntiHuntingDmp_B           ) = null                    ! [-] Input Function Fd(yd)
force.par (              15 ,       $F_AntiHuntingDmp_B           ) = null                    ! [-] Input Function Fd(zd)
force.par (              16 ,       $F_AntiHuntingDmp_B           ) = 0.00000000000000000E+00 ! [m] Clearance in x
force.par (              17 ,       $F_AntiHuntingDmp_B           ) = 0.00000000000000000E+00 ! [m] Clearance in y
force.par (              18 ,       $F_AntiHuntingDmp_B           ) = 0.00000000000000000E+00 ! [m] Clearance in z
force.par (              20 ,       $F_AntiHuntingDmp_B           ) = null                    ! [-] Reference Marker for meas+calc
force.par (              21 ,       $F_AntiHuntingDmp_B           ) = null                    ! [-] Expression for Fx
force.par (              22 ,       $F_AntiHuntingDmp_B           ) = null                    ! [-] Expression for Fy
force.par (              23 ,       $F_AntiHuntingDmp_B           ) = null                    ! [-] Expression for Fz
force.par (              27 ,       $F_AntiHuntingDmp_B           ) = 0.00000000000000000E+00 ! [-] Output force in To Marker

force.type (                        $F_Motor_A                    ) = 110                     ! Type
force.from (                        $F_Motor_A                    ) = $M_Frame_Motor_A        ! From Marker
force.to (                          $F_Motor_A                    ) = $S_IRW_Front.$M_IRW_Motor_L ! To Marker
force.disabled (                    $F_Motor_A                    ) = 1                       ! Disabled
force.par (               1 ,       $F_Motor_A                    ) = $C_VelCtrl_A            ! [-] Input Control Element 1
force.par (               2 ,       $F_Motor_A                    ) = 1.00000000000000000E+00 ! [-] -> Output Value u1
force.par (               3 ,       $F_Motor_A                    ) = null                    ! [-] Input Control Element 2
force.par (               4 ,       $F_Motor_A                    ) = 0.00000000000000000E+00 ! [-] -> Output Value u2
force.par (               5 ,       $F_Motor_A                    ) = 2.00000000000000000E+00 ! [-] Output type
force.par (               7 ,       $F_Motor_A                    ) = 2.00000000000000000E+00 ! [-] Axis of torque
force.par (               8 ,       $F_Motor_A                    ) = 1.00000000000000000E+00 ! [Nm] K: Drive constant L=K*(u1+u2)

force.type (                        $F_Motor_B                    ) = 110                     ! Type
force.from (                        $F_Motor_B                    ) = $M_Frame_Motor_B        ! From Marker
force.to (                          $F_Motor_B                    ) = $S_IRW_Front.$M_IRW_Motor_R ! To Marker
force.disabled (                    $F_Motor_B                    ) = 1                       ! Disabled
force.par (               1 ,       $F_Motor_B                    ) = $C_VelCtrl_B            ! [-] Input Control Element 1
force.par (               2 ,       $F_Motor_B                    ) = 1.00000000000000000E+00 ! [-] -> Output Value u1
force.par (               3 ,       $F_Motor_B                    ) = null                    ! [-] Input Control Element 2
force.par (               4 ,       $F_Motor_B                    ) = 0.00000000000000000E+00 ! [-] -> Output Value u2
force.par (               5 ,       $F_Motor_B                    ) = 2.00000000000000000E+00 ! [-] Output type
force.par (               7 ,       $F_Motor_B                    ) = 2.00000000000000000E+00 ! [-] Axis of torque
force.par (               8 ,       $F_Motor_B                    ) = 1.00000000000000000E+00 ! [Nm] K: Drive constant L=K*(u1+u2)

force.type (                        $F_Motor_C                    ) = 110                     ! Type
force.from (                        $F_Motor_C                    ) = $M_Frame_Motor_C        ! From Marker
force.to (                          $F_Motor_C                    ) = $S_IRW_Rear.$M_IRW_Motor_L ! To Marker
force.disabled (                    $F_Motor_C                    ) = 1                       ! Disabled
force.par (               1 ,       $F_Motor_C                    ) = $C_VelCtrl_C            ! [-] Input Control Element 1
force.par (               2 ,       $F_Motor_C                    ) = 1.00000000000000000E+00 ! [-] -> Output Value u1
force.par (               3 ,       $F_Motor_C                    ) = null                    ! [-] Input Control Element 2
force.par (               4 ,       $F_Motor_C                    ) = 0.00000000000000000E+00 ! [-] -> Output Value u2
force.par (               5 ,       $F_Motor_C                    ) = 2.00000000000000000E+00 ! [-] Output type
force.par (               7 ,       $F_Motor_C                    ) = 2.00000000000000000E+00 ! [-] Axis of torque
force.par (               8 ,       $F_Motor_C                    ) = 1.00000000000000000E+00 ! [Nm] K: Drive constant L=K*(u1+u2)

force.type (                        $F_Motor_D                    ) = 110                     ! Type
force.from (                        $F_Motor_D                    ) = $M_Frame_Motor_D        ! From Marker
force.to (                          $F_Motor_D                    ) = $S_IRW_Rear.$M_IRW_Motor_R ! To Marker
force.disabled (                    $F_Motor_D                    ) = 1                       ! Disabled
force.par (               1 ,       $F_Motor_D                    ) = $C_VelCtrl_D            ! [-] Input Control Element 1
force.par (               2 ,       $F_Motor_D                    ) = 1.00000000000000000E+00 ! [-] -> Output Value u1
force.par (               3 ,       $F_Motor_D                    ) = null                    ! [-] Input Control Element 2
force.par (               4 ,       $F_Motor_D                    ) = 0.00000000000000000E+00 ! [-] -> Output Value u2
force.par (               5 ,       $F_Motor_D                    ) = 2.00000000000000000E+00 ! [-] Output type
force.par (               7 ,       $F_Motor_D                    ) = 2.00000000000000000E+00 ! [-] Axis of torque
force.par (               8 ,       $F_Motor_D                    ) = 1.00000000000000000E+00 ! [Nm] K: Drive constant L=K*(u1+u2)

force.type (                        $F_Motor_A_Simat              ) = 93                      ! Type
force.from (                        $F_Motor_A_Simat              ) = $M_Frame_Motor_A        ! From Marker
force.to (                          $F_Motor_A_Simat              ) = $S_IRW_Front.$M_IRW_Motor_L ! To Marker
force.disabled (                    $F_Motor_A_Simat              ) = 0                       ! Disabled
force.par (               1 ,       $F_Motor_A_Simat              ) = null                    ! [-] u-Vector Element force x
force.par (               2 ,       $F_Motor_A_Simat              ) = null                    ! [-] u-Vector Element force y
force.par (               3 ,       $F_Motor_A_Simat              ) = null                    ! [-] u-Vector Element force z
force.par (               4 ,       $F_Motor_A_Simat              ) = null                    ! [-] u-Vector Element torque x
force.par (               5 ,       $F_Motor_A_Simat              ) = $UE_UA_Simat            ! [-] u-Vector Element torque y
force.par (               6 ,       $F_Motor_A_Simat              ) = null                    ! [-] u-Vector Element torque z

force.type (                        $F_Motor_B_Simat              ) = 93                      ! Type
force.from (                        $F_Motor_B_Simat              ) = $M_Frame_Motor_B        ! From Marker
force.to (                          $F_Motor_B_Simat              ) = $S_IRW_Front.$M_IRW_Motor_R ! To Marker
force.disabled (                    $F_Motor_B_Simat              ) = 0                       ! Disabled
force.par (               1 ,       $F_Motor_B_Simat              ) = null                    ! [-] u-Vector Element force x
force.par (               2 ,       $F_Motor_B_Simat              ) = null                    ! [-] u-Vector Element force y
force.par (               3 ,       $F_Motor_B_Simat              ) = null                    ! [-] u-Vector Element force z
force.par (               4 ,       $F_Motor_B_Simat              ) = null                    ! [-] u-Vector Element torque x
force.par (               5 ,       $F_Motor_B_Simat              ) = $UE_UB_Simat            ! [-] u-Vector Element torque y
force.par (               6 ,       $F_Motor_B_Simat              ) = null                    ! [-] u-Vector Element torque z

force.type (                        $F_Motor_C_Simat              ) = 93                      ! Type
force.from (                        $F_Motor_C_Simat              ) = $M_Frame_Motor_C        ! From Marker
force.to (                          $F_Motor_C_Simat              ) = $S_IRW_Rear.$M_IRW_Motor_L ! To Marker
force.disabled (                    $F_Motor_C_Simat              ) = 0                       ! Disabled
force.par (               1 ,       $F_Motor_C_Simat              ) = null                    ! [-] u-Vector Element force x
force.par (               2 ,       $F_Motor_C_Simat              ) = null                    ! [-] u-Vector Element force y
force.par (               3 ,       $F_Motor_C_Simat              ) = null                    ! [-] u-Vector Element force z
force.par (               4 ,       $F_Motor_C_Simat              ) = null                    ! [-] u-Vector Element torque x
force.par (               5 ,       $F_Motor_C_Simat              ) = $UE_UC_Simat            ! [-] u-Vector Element torque y
force.par (               6 ,       $F_Motor_C_Simat              ) = null                    ! [-] u-Vector Element torque z

force.type (                        $F_Motor_D_Simat              ) = 93                      ! Type
force.from (                        $F_Motor_D_Simat              ) = $M_Frame_Motor_D        ! From Marker
force.to (                          $F_Motor_D_Simat              ) = $S_IRW_Rear.$M_IRW_Motor_R ! To Marker
force.disabled (                    $F_Motor_D_Simat              ) = 0                       ! Disabled
force.par (               1 ,       $F_Motor_D_Simat              ) = null                    ! [-] u-Vector Element force x
force.par (               2 ,       $F_Motor_D_Simat              ) = null                    ! [-] u-Vector Element force y
force.par (               3 ,       $F_Motor_D_Simat              ) = null                    ! [-] u-Vector Element force z
force.par (               4 ,       $F_Motor_D_Simat              ) = null                    ! [-] u-Vector Element torque x
force.par (               5 ,       $F_Motor_D_Simat              ) = $UE_UD_Simat            ! [-] u-Vector Element torque y
force.par (               6 ,       $F_Motor_D_Simat              ) = null                    ! [-] u-Vector Element torque z

!**********************************************************************
! Control Elements
!**********************************************************************
control.type (                      $C_Ref_Speed_AllWheels        ) = 163                     ! Type
control.txt (                       $C_Ref_Speed_AllWheels        ) = '测量指定铰接的转速' ! Comment
control.par (             1 ,       $C_Ref_Speed_AllWheels        ) = 1.00000000000000000E+00 ! [-] Number of u-Vector Elements
control.par (            10 ,       $C_Ref_Speed_AllWheels        ) = $UE_Ref_Vel_X           ! [-]  Ch 1: u-Vector Element

control.type (                      $C_RotToVelX_A                ) = 160                     ! Type
control.txt (                       $C_RotToVelX_A                ) = '测量指定铰接的转速,并且乘以车轮半径，以换算为纵向位移速度' ! Comment
control.par (             1 ,       $C_RotToVelX_A                ) = 1.00000000000000000E+00 ! [-] Number of Conn./Joint states
control.par (            10 ,       $C_RotToVelX_A                ) = 1.00000000000000000E+00 ! [-]  Ch 1: State type
control.par (            11 ,       $C_RotToVelX_A                ) = $S_IRW_Front.$J_IRW_L   ! [-]  Ch 1: Connection/Joint
control.par (            12 ,       $C_RotToVelX_A                ) = 1.00000000000000000E+00 ! [-]  Ch 1: -> Conn./Joint state
control.par (            13 ,       $C_RotToVelX_A                ) = { -860/2000 }           ! [-]  Ch 1: Gain factor C
control.par (            14 ,       $C_RotToVelX_A                ) = null                    ! [-]  Ch 1: Disturb. Ctrl. Element
control.par (            15 ,       $C_RotToVelX_A                ) = 0.00000000000000000E+00 ! [-]  Ch 1: -> Output Value u

control.type (                      $C_VelDiff_A_Left             ) = 143                     ! Type
control.par (             1 ,       $C_VelDiff_A_Left             ) = $C_RotToVelX_A          ! [-] Input Element ch. 1
control.par (             2 ,       $C_VelDiff_A_Left             ) = 1.00000000000000000E+00 ! [-] Output Value ch. 1
control.par (             3 ,       $C_VelDiff_A_Left             ) = -1.00000000000000000E+00 ! [-] Gain factor C1 for ch. 1
control.par (             4 ,       $C_VelDiff_A_Left             ) = $C_Ref_Speed_AllWheels  ! [-] Input Element ch. 2
control.par (             5 ,       $C_VelDiff_A_Left             ) = 1.00000000000000000E+00 ! [-] Output Value ch. 2
control.par (             6 ,       $C_VelDiff_A_Left             ) = 1.00000000000000000E+00 ! [-] Gain factor C2 for ch. 2
control.par (             7 ,       $C_VelDiff_A_Left             ) = 1.00000000000000000E+00 ! [-] Connection type
control.par (             8 ,       $C_VelDiff_A_Left             ) = 1.00000000000000000E+00 ! [-] Function parameter P
control.par (             9 ,       $C_VelDiff_A_Left             ) = 0.00000000000000000E+00 ! [-] Function type
control.par (            13 ,       $C_VelDiff_A_Left             ) = 0.00000000000000000E+00 ! [-] Constant zero deviation K

control.type (                      $C_VelCtrl_A                  ) = 129                     ! Type
control.st.dyn (          1 ,       $C_VelCtrl_A                  ) = 0.00000000000000000E+00 ! Dynamic States
control.st.equi (         1 ,       $C_VelCtrl_A                  ) = 0                       ! Equilibrium
control.par (             7 ,       $C_VelCtrl_A                  ) = 1.00000000000000000E+00 ! [-] Number of input channels
control.par (             8 ,       $C_VelCtrl_A                  ) = $C_VelDiff_A_Left       ! [-] Input Element ch. 1
control.par (             9 ,       $C_VelCtrl_A                  ) = 1.00000000000000000E+00 ! [-] Output Value ch. 1
control.par (            14 ,       $C_VelCtrl_A                  ) = 2.00000000000000000E+00 ! [-] Controller type
control.par (            15 ,       $C_VelCtrl_A                  ) = $_VelCtrl_P             ! [-] Proportional gain factor
control.par (            16 ,       $C_VelCtrl_A                  ) = $_VelCtrl_I             ! [s] Integral time constant
control.par (            22 ,       $C_VelCtrl_A                  ) = 0.00000000000000000E+00 ! [-] Print converted coefficients

control.type (                      $C_RotToVelX_B                ) = 160                     ! Type
control.txt (                       $C_RotToVelX_B                ) = '测量指定铰接的转速,并且乘以车轮半径，以换算为纵向位移速度' ! Comment
control.par (             1 ,       $C_RotToVelX_B                ) = 1.00000000000000000E+00 ! [-] Number of Conn./Joint states
control.par (            10 ,       $C_RotToVelX_B                ) = 1.00000000000000000E+00 ! [-]  Ch 1: State type
control.par (            11 ,       $C_RotToVelX_B                ) = $S_IRW_Front.$J_IRW_R   ! [-]  Ch 1: Connection/Joint
control.par (            12 ,       $C_RotToVelX_B                ) = 1.00000000000000000E+00 ! [-]  Ch 1: -> Conn./Joint state
control.par (            13 ,       $C_RotToVelX_B                ) = { -860/2000 }           ! [-]  Ch 1: Gain factor C
control.par (            14 ,       $C_RotToVelX_B                ) = null                    ! [-]  Ch 1: Disturb. Ctrl. Element
control.par (            15 ,       $C_RotToVelX_B                ) = 0.00000000000000000E+00 ! [-]  Ch 1: -> Output Value u

control.type (                      $C_VelDiff_B_Right            ) = 143                     ! Type
control.par (             1 ,       $C_VelDiff_B_Right            ) = $C_RotToVelX_B          ! [-] Input Element ch. 1
control.par (             2 ,       $C_VelDiff_B_Right            ) = 1.00000000000000000E+00 ! [-] Output Value ch. 1
control.par (             3 ,       $C_VelDiff_B_Right            ) = -1.00000000000000000E+00 ! [-] Gain factor C1 for ch. 1
control.par (             4 ,       $C_VelDiff_B_Right            ) = $C_Ref_Speed_AllWheels  ! [-] Input Element ch. 2
control.par (             5 ,       $C_VelDiff_B_Right            ) = 1.00000000000000000E+00 ! [-] Output Value ch. 2
control.par (             6 ,       $C_VelDiff_B_Right            ) = 1.00000000000000000E+00 ! [-] Gain factor C2 for ch. 2
control.par (             7 ,       $C_VelDiff_B_Right            ) = 1.00000000000000000E+00 ! [-] Connection type
control.par (             8 ,       $C_VelDiff_B_Right            ) = 1.00000000000000000E+00 ! [-] Function parameter P
control.par (             9 ,       $C_VelDiff_B_Right            ) = 0.00000000000000000E+00 ! [-] Function type
control.par (            13 ,       $C_VelDiff_B_Right            ) = 0.00000000000000000E+00 ! [-] Constant zero deviation K

control.type (                      $C_VelCtrl_B                  ) = 129                     ! Type
control.st.dyn (          1 ,       $C_VelCtrl_B                  ) = 0.00000000000000000E+00 ! Dynamic States
control.st.equi (         1 ,       $C_VelCtrl_B                  ) = 0                       ! Equilibrium
control.par (             7 ,       $C_VelCtrl_B                  ) = 1.00000000000000000E+00 ! [-] Number of input channels
control.par (             8 ,       $C_VelCtrl_B                  ) = $C_VelDiff_B_Right      ! [-] Input Element ch. 1
control.par (             9 ,       $C_VelCtrl_B                  ) = 1.00000000000000000E+00 ! [-] Output Value ch. 1
control.par (            14 ,       $C_VelCtrl_B                  ) = 2.00000000000000000E+00 ! [-] Controller type
control.par (            15 ,       $C_VelCtrl_B                  ) = $_VelCtrl_P             ! [-] Proportional gain factor
control.par (            16 ,       $C_VelCtrl_B                  ) = $_VelCtrl_I             ! [s] Integral time constant
control.par (            22 ,       $C_VelCtrl_B                  ) = 0.00000000000000000E+00 ! [-] Print converted coefficients

control.type (                      $C_RotToVelX_C                ) = 160                     ! Type
control.txt (                       $C_RotToVelX_C                ) = '测量指定铰接的转速,并且乘以车轮半径，以换算为纵向位移速度' ! Comment
control.par (             1 ,       $C_RotToVelX_C                ) = 1.00000000000000000E+00 ! [-] Number of Conn./Joint states
control.par (            10 ,       $C_RotToVelX_C                ) = 1.00000000000000000E+00 ! [-]  Ch 1: State type
control.par (            11 ,       $C_RotToVelX_C                ) = $S_IRW_Rear.$J_IRW_L    ! [-]  Ch 1: Connection/Joint
control.par (            12 ,       $C_RotToVelX_C                ) = 1.00000000000000000E+00 ! [-]  Ch 1: -> Conn./Joint state
control.par (            13 ,       $C_RotToVelX_C                ) = { -860/2000 }           ! [-]  Ch 1: Gain factor C
control.par (            14 ,       $C_RotToVelX_C                ) = null                    ! [-]  Ch 1: Disturb. Ctrl. Element
control.par (            15 ,       $C_RotToVelX_C                ) = 0.00000000000000000E+00 ! [-]  Ch 1: -> Output Value u

control.type (                      $C_VelDiff_C_Left             ) = 143                     ! Type
control.par (             1 ,       $C_VelDiff_C_Left             ) = $C_RotToVelX_C          ! [-] Input Element ch. 1
control.par (             2 ,       $C_VelDiff_C_Left             ) = 1.00000000000000000E+00 ! [-] Output Value ch. 1
control.par (             3 ,       $C_VelDiff_C_Left             ) = -1.00000000000000000E+00 ! [-] Gain factor C1 for ch. 1
control.par (             4 ,       $C_VelDiff_C_Left             ) = $C_Ref_Speed_AllWheels  ! [-] Input Element ch. 2
control.par (             5 ,       $C_VelDiff_C_Left             ) = 1.00000000000000000E+00 ! [-] Output Value ch. 2
control.par (             6 ,       $C_VelDiff_C_Left             ) = 1.00000000000000000E+00 ! [-] Gain factor C2 for ch. 2
control.par (             7 ,       $C_VelDiff_C_Left             ) = 1.00000000000000000E+00 ! [-] Connection type
control.par (             8 ,       $C_VelDiff_C_Left             ) = 1.00000000000000000E+00 ! [-] Function parameter P
control.par (             9 ,       $C_VelDiff_C_Left             ) = 0.00000000000000000E+00 ! [-] Function type
control.par (            13 ,       $C_VelDiff_C_Left             ) = 0.00000000000000000E+00 ! [-] Constant zero deviation K

control.type (                      $C_VelCtrl_C                  ) = 129                     ! Type
control.st.dyn (          1 ,       $C_VelCtrl_C                  ) = 0.00000000000000000E+00 ! Dynamic States
control.st.equi (         1 ,       $C_VelCtrl_C                  ) = 0                       ! Equilibrium
control.par (             7 ,       $C_VelCtrl_C                  ) = 1.00000000000000000E+00 ! [-] Number of input channels
control.par (             8 ,       $C_VelCtrl_C                  ) = $C_VelDiff_C_Left       ! [-] Input Element ch. 1
control.par (             9 ,       $C_VelCtrl_C                  ) = 1.00000000000000000E+00 ! [-] Output Value ch. 1
control.par (            14 ,       $C_VelCtrl_C                  ) = 2.00000000000000000E+00 ! [-] Controller type
control.par (            15 ,       $C_VelCtrl_C                  ) = $_VelCtrl_P             ! [-] Proportional gain factor
control.par (            16 ,       $C_VelCtrl_C                  ) = $_VelCtrl_I             ! [s] Integral time constant
control.par (            22 ,       $C_VelCtrl_C                  ) = 0.00000000000000000E+00 ! [-] Print converted coefficients

control.type (                      $C_RotToVelX_D                ) = 160                     ! Type
control.txt (                       $C_RotToVelX_D                ) = '测量指定铰接的转速,并且乘以车轮半径，以换算为纵向位移速度' ! Comment
control.par (             1 ,       $C_RotToVelX_D                ) = 1.00000000000000000E+00 ! [-] Number of Conn./Joint states
control.par (            10 ,       $C_RotToVelX_D                ) = 1.00000000000000000E+00 ! [-]  Ch 1: State type
control.par (            11 ,       $C_RotToVelX_D                ) = $S_IRW_Rear.$J_IRW_R    ! [-]  Ch 1: Connection/Joint
control.par (            12 ,       $C_RotToVelX_D                ) = 1.00000000000000000E+00 ! [-]  Ch 1: -> Conn./Joint state
control.par (            13 ,       $C_RotToVelX_D                ) = { -860/2000 }           ! [-]  Ch 1: Gain factor C
control.par (            14 ,       $C_RotToVelX_D                ) = null                    ! [-]  Ch 1: Disturb. Ctrl. Element
control.par (            15 ,       $C_RotToVelX_D                ) = 0.00000000000000000E+00 ! [-]  Ch 1: -> Output Value u

control.type (                      $C_VelDiff_D_Right            ) = 143                     ! Type
control.par (             1 ,       $C_VelDiff_D_Right            ) = $C_RotToVelX_D          ! [-] Input Element ch. 1
control.par (             2 ,       $C_VelDiff_D_Right            ) = 1.00000000000000000E+00 ! [-] Output Value ch. 1
control.par (             3 ,       $C_VelDiff_D_Right            ) = -1.00000000000000000E+00 ! [-] Gain factor C1 for ch. 1
control.par (             4 ,       $C_VelDiff_D_Right            ) = $C_Ref_Speed_AllWheels  ! [-] Input Element ch. 2
control.par (             5 ,       $C_VelDiff_D_Right            ) = 1.00000000000000000E+00 ! [-] Output Value ch. 2
control.par (             6 ,       $C_VelDiff_D_Right            ) = 1.00000000000000000E+00 ! [-] Gain factor C2 for ch. 2
control.par (             7 ,       $C_VelDiff_D_Right            ) = 1.00000000000000000E+00 ! [-] Connection type
control.par (             8 ,       $C_VelDiff_D_Right            ) = 1.00000000000000000E+00 ! [-] Function parameter P
control.par (             9 ,       $C_VelDiff_D_Right            ) = 0.00000000000000000E+00 ! [-] Function type
control.par (            13 ,       $C_VelDiff_D_Right            ) = 0.00000000000000000E+00 ! [-] Constant zero deviation K

control.type (                      $C_VelCtrl_D                  ) = 129                     ! Type
control.st.dyn (          1 ,       $C_VelCtrl_D                  ) = 0.00000000000000000E+00 ! Dynamic States
control.st.equi (         1 ,       $C_VelCtrl_D                  ) = 0                       ! Equilibrium
control.par (             7 ,       $C_VelCtrl_D                  ) = 1.00000000000000000E+00 ! [-] Number of input channels
control.par (             8 ,       $C_VelCtrl_D                  ) = $C_VelDiff_D_Right      ! [-] Input Element ch. 1
control.par (             9 ,       $C_VelCtrl_D                  ) = 1.00000000000000000E+00 ! [-] Output Value ch. 1
control.par (            14 ,       $C_VelCtrl_D                  ) = 2.00000000000000000E+00 ! [-] Controller type
control.par (            15 ,       $C_VelCtrl_D                  ) = $_VelCtrl_P             ! [-] Proportional gain factor
control.par (            16 ,       $C_VelCtrl_D                  ) = $_VelCtrl_I             ! [s] Integral time constant
control.par (            22 ,       $C_VelCtrl_D                  ) = 0.00000000000000000E+00 ! [-] Print converted coefficients

!**********************************************************************
! Tracks
!**********************************************************************
track.type (                        $Trk_Track                    ) = 2                       ! Type
track.kind (                        $Trk_Track                    ) = 1                       ! Kind
track.excit.lat (                   $Trk_Track                    ) = null                    ! Track::EXC_TRACK_LATERAL
track.excit.vert (                  $Trk_Track                    ) = null                    ! Track::EXC_TRACK_VERTICAL
track.excit.roll (                  $Trk_Track                    ) = null                    ! Track::EXC_TRACK_ROLL
track.excit.left.lat (              $Trk_Track                    ) = null                    ! Track::EXC_RAIL_LATERAL_LEFT
track.excit.left.vert (             $Trk_Track                    ) = null                    ! Track::EXC_RAIL_VERTICAL_LEFT
track.excit.left.roll (             $Trk_Track                    ) = null                    ! Track::EXC_RAIL_ROLL_LEFT
track.excit.right.lat (             $Trk_Track                    ) = null                    ! Track::EXC_RAIL_LATERAL_RIGHT
track.excit.right.vert (            $Trk_Track                    ) = null                    ! Track::EXC_RAIL_VERTICAL_RIGHT
track.excit.right.roll (            $Trk_Track                    ) = null                    ! Track::EXC_RAIL_ROLL_RIGHT
track.excit.gauge (                 $Trk_Track                    ) = null                    ! Track::EXC_TRACK_GAUGE
track.meas.superelev.kind (         $Trk_Track                    ) = 1                       ! Superelevation kind (measured track)
track.meas.superelev.reflen (       $Trk_Track                    ) = 0.00000000000000000E+00 ! Superelevation reference length (measured track)
track.meas.len (                    $Trk_Track                    ) = 0.00000000000000000E+00 ! Total measured length
track.meas.discr.fromfile (         $Trk_Track                    ) = 0                       ! Discretisation from file
track.meas.discr.num (              $Trk_Track                    ) = 0                       ! Number of discretisation points
track.cart.file (                   $Trk_Track                    ) = ''                      ! Cartographic filename
track.meas.file (                   $Trk_Track                    ) = ''                      ! Measured filename
track.crg.dir (                     $Trk_Track                    ) = ''                      ! CRG file directory
track.excit.type (                  $Trk_Track                    ) = 0                       ! Excitations type
track.excit.start (                 $Trk_Track                    ) = 0.00000000000000000E+00 ! Excitations start
track.excit.end (                   $Trk_Track                    ) = 0.00000000000000000E+00 ! Excitations end
track.excit.fade.len (              $Trk_Track                    ) = 0.00000000000000000E+00 ! Excitations fade in/out
track.meas.sec.start (              $Trk_Track                    ) = 0.00000000000000000E+00 ! Section start
track.meas.sec.end (                $Trk_Track                    ) = 0.00000000000000000E+00 ! Section end
track.meas.datared.fromfile (       $Trk_Track                    ) = 0                       ! Data reduction from file
track.meas.datared.incr (           $Trk_Track                    ) = 0                       ! Data increment
track.meas.curvature.datared (      $Trk_Track                    ) = 0                       ! Data reduction vertical curvature handling
track.meas.startend.fromexcit (     $Trk_Track                    ) = 0                       ! Start/End from excitation
track.meas.start (                  $Trk_Track                    ) = 0.00000000000000000E+00 ! Start
track.meas.fade.len (               $Trk_Track                    ) = 0.00000000000000000E+00 ! Fade length
track.cart.horizontal.curvature.kind ( $Trk_Track                 ) = 0                       ! 0=radius; 1=arc length; 2=chord length
track.cart.horizontal.curvature.reflen ( $Trk_Track               ) = 1.00000000000000000E+00 ! Reference length
track.cart.superelev.fromfile (     $Trk_Track                    ) = 0                       ! Superelevation from file (cartographic track)
track.cart.superelev.kind (         $Trk_Track                    ) = 2                       ! Superelevation kind (cartographic track)
track.cart.superelev.reflen (       $Trk_Track                    ) = 1.50000000000000000E+00 ! Superelevation reference length (cartographic track)
track.cart.discr.gen (              $Trk_Track                    ) = 1.00000000000000000E+00 ! Discr. gen
track.cart.discr.fine (             $Trk_Track                    ) = 5.00000000000000000E-01 ! Discr. fine
track.txt (                         $Trk_Track                    ) = ''                      ! Comment
track.plot.par (          1 ,       $Trk_Track                    ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   1 , $Trk_Track                    ) = 3.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   2 , $Trk_Track                    ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   3 , $Trk_Track                    ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   4 , $Trk_Track                    ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   5 , $Trk_Track                    ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   6 , $Trk_Track                    ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   6 ,   1 , $Trk_Track              ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   6 ,   1 ,   1 , $Trk_Track        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   6 ,   1 ,   2 , $Trk_Track        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 , $Trk_Track                    ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,   1 ,   1 , $Trk_Track        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,   2 ,   1 , $Trk_Track        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,   3 , $Trk_Track              ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,   3 ,   1 , $Trk_Track        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,   3 ,   2 , $Trk_Track        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,   3 ,   3 , $Trk_Track        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,   4 ,   1 , $Trk_Track        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,   5 ,   1 , $Trk_Track        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,   6 ,   1 , $Trk_Track        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,   7 ,   1 , $Trk_Track        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,   8 ,   1 , $Trk_Track        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,   9 ,   1 , $Trk_Track        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,  10 ,   1 , $Trk_Track        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,  11 ,   1 , $Trk_Track        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,  12 ,   1 , $Trk_Track        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,  13 ,   1 , $Trk_Track        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,  14 ,   1 , $Trk_Track        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,  15 ,   1 , $Trk_Track        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,  16 ,   1 , $Trk_Track        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   8 , $Trk_Track                    ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   8 ,   2 ,   1 , $Trk_Track        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   8 ,   3 ,   1 , $Trk_Track        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   8 ,   4 ,   1 , $Trk_Track        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.cart.h.type (       1 ,       $Trk_Track                    ) = 1                       ! Type
track.cart.h.txt (        1 ,       $Trk_Track                    ) = ''                      ! Comment
track.cart.h.par (        1 ,   1 , $Trk_Track                    ) = 2.00000000000000000E+03 ! [m] L
track.cart.h.par (       10 ,   1 , $Trk_Track                    ) = 1.50000000000000000E+00 ! [m] Lsmo/2
track.cart.v.type (       1 ,       $Trk_Track                    ) = 201                     ! Type
track.cart.v.txt (        1 ,       $Trk_Track                    ) = ''                      ! Comment
track.cart.v.par (        1 ,   1 , $Trk_Track                    ) = 1.00000000000000000E+02 ! [m] L
track.cart.v.par (        2 ,   1 , $Trk_Track                    ) = 0.00000000000000000E+00 ! [-] P
track.cart.v.par (       10 ,   1 , $Trk_Track                    ) = 1.50000000000000000E+00 ! [m] Lsmo/2
track.cart.s.type (       1 ,       $Trk_Track                    ) = 101                     ! Type
track.cart.s.txt (        1 ,       $Trk_Track                    ) = ''                      ! Comment
track.cart.s.par (        1 ,   1 , $Trk_Track                    ) = 1.00000000000000000E+02 ! [m] L
track.cart.s.par (        2 ,   1 , $Trk_Track                    ) = 0.00000000000000000E+00 ! [m] U
track.cart.s.par (       10 ,   1 , $Trk_Track                    ) = 1.50000000000000000E+00 ! [m] Lsmo/2

!**********************************************************************
! Excitations
!**********************************************************************
excit.type (                        $E_Ref_Vel_X                  ) = 4                       ! Type
excit.txt (                         $E_Ref_Vel_X                  ) = '纵向参考速度'    ! Comment
excit.par (               1 ,       $E_Ref_Vel_X                  ) = 1.00000000000000000E+00 ! [-] Number of position switches
excit.par (               2 ,       $E_Ref_Vel_X                  ) = { 20/3.6 }              ! [-] f_Begin(1)
excit.par (               3 ,       $E_Ref_Vel_X                  ) = { 120/3.6 }             ! [-] f_End(  1)
excit.par (               4 ,       $E_Ref_Vel_X                  ) = 0.00000000000000000E+00 ! [s] t_Begin(1)
excit.par (               5 ,       $E_Ref_Vel_X                  ) = { 100/3.6 }             ! [s] t_End(  1)
excit.par (               6 ,       $E_Ref_Vel_X                  ) = { 120/3.6 }             ! [-] f_End(  2)
excit.par (               7 ,       $E_Ref_Vel_X                  ) = { 100/3.6 }             ! [s] t_Begin(2)
excit.par (               8 ,       $E_Ref_Vel_X                  ) = 0.00000000000000000E+00 ! [s] t_End(  2)
excit.par (               9 ,       $E_Ref_Vel_X                  ) = 0.00000000000000000E+00 ! [-] f_End(  3)
excit.par (              10 ,       $E_Ref_Vel_X                  ) = 0.00000000000000000E+00 ! [s] t_Begin(3)
excit.par (              11 ,       $E_Ref_Vel_X                  ) = 0.00000000000000000E+00 ! [s] t_End(  3)
excit.par (              12 ,       $E_Ref_Vel_X                  ) = 0.00000000000000000E+00 ! [-] f_End(  4)
excit.par (              13 ,       $E_Ref_Vel_X                  ) = 0.00000000000000000E+00 ! [s] t_Begin(4)
excit.par (              14 ,       $E_Ref_Vel_X                  ) = 0.00000000000000000E+00 ! [s] t_End(  4)
excit.par (              15 ,       $E_Ref_Vel_X                  ) = 0.00000000000000000E+00 ! [-] Repeat sequence
excit.par (              16 ,       $E_Ref_Vel_X                  ) = 0.00000000000000000E+00 ! [-] Repeat offset Delta-f
excit.par (              17 ,       $E_Ref_Vel_X                  ) = 0.00000000000000000E+00 ! [s] Repeat offset Delta-t (>0)
excit.plot.par (          1 ,       $E_Ref_Vel_X                  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   1 , $E_Ref_Vel_X                  ) = 1.02400000000000000E+03 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   2 , $E_Ref_Vel_X                  ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   3 , $E_Ref_Vel_X                  ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   4 , $E_Ref_Vel_X                  ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   5 , $E_Ref_Vel_X                  ) = 5.00000000000000000E+01 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   6 ,   1 , $E_Ref_Vel_X            ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   7 ,   1 , $E_Ref_Vel_X            ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   8 ,   1 , $E_Ref_Vel_X            ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter

!**********************************************************************
! u-Vector
!**********************************************************************
uele.type (                         $UE_Ref_Vel_X                 ) = 1                       ! Type
uele.excit (                        $UE_Ref_Vel_X                 ) = $E_Ref_Vel_X            ! Referenced Excitation

uele.type (                         $UE_UA_Simat                  ) = 2                       ! Type
uele.uinp (                         $UE_UA_Simat                  ) = $UI_UA_Simat            ! Referenced u-Input

uele.type (                         $UE_UB_Simat                  ) = 2                       ! Type
uele.uinp (                         $UE_UB_Simat                  ) = $UI_UB_Simat            ! Referenced u-Input

uele.type (                         $UE_UC_Simat                  ) = 2                       ! Type
uele.uinp (                         $UE_UC_Simat                  ) = $UI_UC_Simat            ! Referenced u-Input

uele.type (                         $UE_UD_Simat                  ) = 2                       ! Type
uele.uinp (                         $UE_UD_Simat                  ) = $UI_UD_Simat            ! Referenced u-Input

!**********************************************************************
! u-Input
!**********************************************************************
uinp.idx (                          $UI_UA_Simat                  ) = 1                       ! External index

uinp.idx (                          $UI_UB_Simat                  ) = 2                       ! External index

uinp.idx (                          $UI_UC_Simat                  ) = 3                       ! External index

uinp.idx (                          $UI_UD_Simat                  ) = 4                       ! External index


! Overwritten substructure values
view.fclip.value (                  $S_IRW_Front.$V_WorkingView   ) = 1.01161129772663116E-01 ! Front clipping plane value
view.bclip.value (                  $S_IRW_Front.$V_WorkingView   ) = 1.01161125183105469E+02 ! Back clipping plane value

joint.st.vel (            1 ,       $S_IRW_Front.$J_IRW_L         ) = -1.29109053878664426E+01 ! Velocity


joint.st.vel (            1 ,       $S_IRW_Front.$J_IRW_R         ) = -1.29109053879102902E+01 ! Velocity


marker.pos (              3 ,       $S_IRW_Front.$M_AxleBridge_PS_Spring_baseA) = 5.14999999999999972E-02 ! Position

marker.pos (              3 ,       $S_IRW_Front.$M_AxleBridge_PS_Spring_baseB) = 5.14999999999999972E-02 ! Position

marker.pos (              3 ,       $S_IRW_Front.$M_AxleBridge_PS_Spring_baseC) = 5.14999999999999972E-02 ! Position

marker.pos (              3 ,       $S_IRW_Front.$M_AxleBridge_PS_Spring_baseD) = 5.14999999999999972E-02 ! Position

marker.pos (              3 ,       $S_IRW_Front.$M_AxleBridge_PS_Dmp_baseA) = { -98.5/1000+0.175 } ! Position

marker.pos (              3 ,       $S_IRW_Front.$M_AxleBridge_PS_Dmp_baseB) = { -98.5/1000+0.175 } ! Position

marker.pos (              3 ,       $S_IRW_Front.$M_AxleBridge_PS_Dmp_baseC) = { -98.5/1000+0.175 } ! Position

marker.pos (              3 ,       $S_IRW_Front.$M_AxleBridge_PS_Dmp_baseD) = { -98.5/1000+0.175 } ! Position

joint.st.pos (            1 ,       $S_IRW_Front.$J_AxleBridge    ) = { 2.5/2 }               ! Position
joint.st.vel (            1 ,       $S_IRW_Front.$J_AxleBridge    ) = 6.45545369105991451E+00 ! Velocity


force.st.desc (           1 ,       $S_IRW_Front.$F_RWContact_RWP_IRW_Left) = -2.62447781552307806E-04 ! Descriptive states
force.par (              10 ,       $S_IRW_Front.$F_RWContact_RWP_IRW_Left) = 1.41799393438546285E+04 ! [N] Nominal preload

force.st.desc (           1 ,       $S_IRW_Front.$F_RWContact_RWP_IRW_Right) = -2.62447782889101166E-04 ! Descriptive states
force.par (              10 ,       $S_IRW_Front.$F_RWContact_RWP_IRW_Right) = 1.41799409027388447E+04 ! [N] Nominal preload

view.fclip.value (                  $S_IRW_Rear.$V_WorkingView    ) = 1.01161129772663116E-01 ! Front clipping plane value
view.bclip.value (                  $S_IRW_Rear.$V_WorkingView    ) = 1.01161125183105469E+02 ! Back clipping plane value

joint.st.vel (            1 ,       $S_IRW_Rear.$J_IRW_L          ) = -1.29109053878706384E+01 ! Velocity


joint.st.vel (            1 ,       $S_IRW_Rear.$J_IRW_R          ) = -1.29109053879367224E+01 ! Velocity


joint.st.pos (            1 ,       $S_IRW_Rear.$J_AxleBridge     ) = { -2.5/2 }              ! Position
joint.st.vel (            1 ,       $S_IRW_Rear.$J_AxleBridge     ) = 6.45545369107318390E+00 ! Velocity


force.st.desc (           1 ,       $S_IRW_Rear.$F_RWContact_RWP_IRW_Left) = -2.62447781680272502E-04 ! Descriptive states
force.par (              10 ,       $S_IRW_Rear.$F_RWContact_RWP_IRW_Left) = 1.41799394931273691E+04 ! [N] Nominal preload

force.st.desc (           1 ,       $S_IRW_Rear.$F_RWContact_RWP_IRW_Right) = -2.62447783694984738E-04 ! Descriptive states
force.par (              10 ,       $S_IRW_Rear.$F_RWContact_RWP_IRW_Right) = 1.41799418426260909E+04 ! [N] Nominal preload

track.meas.curvature.datared (      $S_IRW_Rear.$Trk_Track        ) = 0                       ! Data reduction vertical curvature handling
track.plot.par (          1 ,       $S_IRW_Rear.$Trk_Track        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   1 , $S_IRW_Rear.$Trk_Track        ) = 3.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   2 , $S_IRW_Rear.$Trk_Track        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   3 , $S_IRW_Rear.$Trk_Track        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   4 , $S_IRW_Rear.$Trk_Track        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   5 , $S_IRW_Rear.$Trk_Track        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   6 , $S_IRW_Rear.$Trk_Track        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   6 ,   1 , $S_IRW_Rear.$Trk_Track  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   6 ,   1 ,   1 , $S_IRW_Rear.$Trk_Track) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   6 ,   1 ,   2 , $S_IRW_Rear.$Trk_Track) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 , $S_IRW_Rear.$Trk_Track        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,   1 ,   1 , $S_IRW_Rear.$Trk_Track) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,   2 ,   1 , $S_IRW_Rear.$Trk_Track) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,   3 , $S_IRW_Rear.$Trk_Track  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,   3 ,   1 , $S_IRW_Rear.$Trk_Track) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,   3 ,   2 , $S_IRW_Rear.$Trk_Track) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,   3 ,   3 , $S_IRW_Rear.$Trk_Track) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,   4 ,   1 , $S_IRW_Rear.$Trk_Track) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,   5 ,   1 , $S_IRW_Rear.$Trk_Track) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,   6 ,   1 , $S_IRW_Rear.$Trk_Track) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,   7 ,   1 , $S_IRW_Rear.$Trk_Track) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,   8 ,   1 , $S_IRW_Rear.$Trk_Track) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,   9 ,   1 , $S_IRW_Rear.$Trk_Track) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,  10 ,   1 , $S_IRW_Rear.$Trk_Track) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,  11 ,   1 , $S_IRW_Rear.$Trk_Track) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,  12 ,   1 , $S_IRW_Rear.$Trk_Track) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,  13 ,   1 , $S_IRW_Rear.$Trk_Track) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,  14 ,   1 , $S_IRW_Rear.$Trk_Track) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,  15 ,   1 , $S_IRW_Rear.$Trk_Track) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,  16 ,   1 , $S_IRW_Rear.$Trk_Track) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   8 , $S_IRW_Rear.$Trk_Track        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   8 ,   2 ,   1 , $S_IRW_Rear.$Trk_Track) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   8 ,   3 ,   1 , $S_IRW_Rear.$Trk_Track) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   8 ,   4 ,   1 , $S_IRW_Rear.$Trk_Track) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.cart.h.par (        1 ,   1 , $S_IRW_Rear.$Trk_Track        ) = 1.00000000000000000E+03 ! [m] L

                                     
