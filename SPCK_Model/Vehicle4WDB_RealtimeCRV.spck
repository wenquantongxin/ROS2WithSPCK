!file.version=3.6! Removing this line will make the file unreadable

!**********************************************************************
! Simpack Version Information
!**********************************************************************
version.number = 20210100
version.desc   = ''
version.build  = 107

!**********************************************************************
!  Global parameters
!**********************************************************************
searchpath (              1                                       ) = ''
gravity (                 1                                       ) = 0.00000000000000000E+00 ! Gravity
gravity (                 2                                       ) = 0.00000000000000000E+00 ! Gravity
gravity (                 3                                       ) = 9.81000000000000050E+00 ! Gravity
vehicle.startvel                                                    = { 60/3.6 }              ! Vehicle initial velocity
vehicle.applystartvel                                               = 1                       ! Apply vehicle initial velocity at solver start
glob.compat.flxnodeori                                              = 0                       ! Flexbody Node Orientation Method
glob.compat.afcf                                                    = 0                       ! References Frame for Joint and Force Element Forces and Torques
rw.cont.meth                                                        = 2                       ! MISCPAR_RW_CONTACT_METHOD
rw.linear                                                           = 0                       ! MISCPAR_RW_PROFILE_LINEARIZATION_METHOD
time                                                                = 0.00000000000000000E+00 ! Time
slv.active                                                          = $SLV_SolverSettings     ! Active SolverSettings element
track.active                                                        = $Trk_Curve_R300m_60kmph ! Active Track element
subvarset.file (          1                                       ) = './subvars_OptBase.subvar' ! subvarset filename
subvarset.role (          1                                       ) = 1                       ! subvarset role: 0 = ini subvarset; 1 = overwriting (late) subvarset
prop3d.bg.base.color.r                                              = 2.55000000000000000E+02 ! Background color (red component)
prop3d.bg.base.color.g                                              = 2.55000000000000000E+02 ! Background color (green component)
prop3d.bg.base.color.b                                              = 2.55000000000000000E+02 ! Background color (blue component)
prop3d.bg.base.color.t                                              = 0.00000000000000000E+00 ! Background color (transparency component)
prop3d.bg.grad.color.r                                              = 2.55000000000000000E+02 ! Gradient color (red component)
prop3d.bg.grad.color.g                                              = 2.55000000000000000E+02 ! Gradient color (green component)
prop3d.bg.grad.color.b                                              = 2.55000000000000000E+02 ! Gradient color (blue component)
prop3d.bg.grad.color.t                                              = 0.00000000000000000E+00 ! Gradient color (transparency component)
prop3d.bg.gradient                                                  = 0                       ! 0 = constant, 1 = gradient
prop3d.marker.size                                                  = 0.00000000000000000E+00 ! length of Marker axes, if value is zero, use "auto"
prop3d.marker.auto                                                  = 1                       ! 0 = user defined, 1 = auto size determination
prop3d.marker.color.r                                               = 0.00000000000000000E+00 ! Marker color (red component)
prop3d.marker.color.g                                               = 0.00000000000000000E+00 ! Marker color (green component)
prop3d.marker.color.b                                               = 0.00000000000000000E+00 ! Marker color (blue component)
prop3d.marker.color.t                                               = 0.00000000000000000E+00 ! Marker color (transparency component)
prop3d.display                                                      = 1                       ! 1 = shaded,  2 = wireframe, 3 = hidden line
prop3d.bbox                                                         = 0                       ! 0 = exclude all refsys objects, 1 = include all refsys objects
prop2d.joint.visible                                                = 1                       ! Joints visible
prop2d.force.visible                                                = 1                       ! Forces visible
prop2d.constr.visible                                               = 1                       ! Constraints visible
prop2d.sensor.visible                                               = 0                       ! Sensors visible
prop2d.grid.visible                                                 = 0                       ! Show grid
prop2d.grid.hor.start                                               = 0.00000000000000000E+00 ! Horizontal offset
prop2d.grid.hor.step                                                = 1.00000000000000000E+01 ! Horizontal step
prop2d.grid.vert.start                                              = 0.00000000000000000E+00 ! Vertical offset
prop2d.grid.vert.step                                               = 1.00000000000000000E+01 ! Vertical step
prop2d.line.width                                                   = 0                       ! Line width
prop2d.proj.dir                                                     = 2                       ! Projection direction


!**********************************************************************
! Substructures
!**********************************************************************
substr.file (                       $S_IRWBogie_Front             ) = './ref_files/Bogie_IRWs_4WDBv3.spck' ! Filename
substr.id (                         $S_IRWBogie_Front             ) = '1'                     ! Substructure Id
substr.add.searchpath (   1 ,       $S_IRWBogie_Front             ) = ''                      ! Substructure-specific search path
substr.attr.2d.pos.x (              $S_IRWBogie_Front             ) = 4.20000000000000000E+02
substr.attr.2d.pos.y (              $S_IRWBogie_Front             ) = -3.00000000000000000E+01
substr.attr.2d.width (              $S_IRWBogie_Front             ) = 5.00000000000000000E+01
substr.attr.2d.height (             $S_IRWBogie_Front             ) = 4.00000000000000000E+01

substr.file (                       $S_IRWBogie_Rear              ) = './ref_files/Bogie_IRWs_4WDBv3.spck' ! Filename
substr.id (                         $S_IRWBogie_Rear              ) = '2'                     ! Substructure Id
substr.add.searchpath (   1 ,       $S_IRWBogie_Rear              ) = ''                      ! Substructure-specific search path
substr.attr.2d.pos.x (              $S_IRWBogie_Rear              ) = -2.00000000000000000E+02
substr.attr.2d.pos.y (              $S_IRWBogie_Rear              ) = -3.00000000000000000E+01
substr.attr.2d.width (              $S_IRWBogie_Rear              ) = 5.00000000000000000E+01
substr.attr.2d.height (             $S_IRWBogie_Rear              ) = 4.00000000000000000E+01

!**********************************************************************
! Views
!**********************************************************************
view.type (                         $V_WorkingView                ) = 0                       ! Projection type
view.pos (                1 ,       $V_WorkingView                ) = -1.05562642956361756E+01 ! Position
view.pos (                2 ,       $V_WorkingView                ) = -1.52476343633033213E+01 ! Position
view.pos (                3 ,       $V_WorkingView                ) = -2.03972800071411768E+01 ! Position
view.orient (             1 ,       $V_WorkingView                ) = 2.24450503279893271E-01 ! Orientation
view.orient (             2 ,       $V_WorkingView                ) = 9.01395636829817493E-01 ! Orientation
view.orient (             3 ,       $V_WorkingView                ) = -3.54572750224314448E-01 ! Orientation
view.orient (             4 ,       $V_WorkingView                ) = -1.06705399488200042E-01 ! Orientation
view.angle (                        $V_WorkingView                ) = 7.85398185253143311E-01 ! Lens angle
view.fclip.auto (                   $V_WorkingView                ) = 1                       ! Front clipping plane auto
view.bclip.auto (                   $V_WorkingView                ) = 1                       ! Back clipping plane auto
view.fclip.value (                  $V_WorkingView                ) = 9.99999977648258209E-03 ! Front clipping plane value
view.bclip.value (                  $V_WorkingView                ) = 1.08134545898437500E+03 ! Back clipping plane value
view.rotcenter.type (               $V_WorkingView                ) = 1                       ! Rotation center type
view.rotcenter.ele (                $V_WorkingView                ) = $M_Isys_Track_Moved     ! Rotation center element
view.rotcenter.adjust (             $V_WorkingView                ) = 1                       ! Adjust rotation center
view.motion.active (                $V_WorkingView                ) = 1                       ! Camera is moved
view.motion.ref (                   $V_WorkingView                ) = $M_Carbody_accF         ! Marker
view.motion.x (                     $V_WorkingView                ) = 1                       ! Moved camera direction x
view.motion.y (                     $V_WorkingView                ) = 1                       ! Moved camera direction y
view.motion.z (                     $V_WorkingView                ) = 1                       ! Moved camera direction z
view.motion.al (                    $V_WorkingView                ) = 1                       ! Moved camera direction alpha
view.motion.be (                    $V_WorkingView                ) = 1                       ! Moved camera direction beta
view.motion.ga (                    $V_WorkingView                ) = 1                       ! Moved camera direction gamma
view.motion.pos (         1 ,       $V_WorkingView                ) = -1.93062642956361756E+01 ! Relative position
view.motion.pos (         2 ,       $V_WorkingView                ) = -1.42476343633033213E+01 ! Relative position
view.motion.pos (         3 ,       $V_WorkingView                ) = -1.91972800071411775E+01 ! Relative position
view.motion.orient (      1 ,       $V_WorkingView                ) = 2.24450503279893271E-01 ! Relative orientation
view.motion.orient (      2 ,       $V_WorkingView                ) = 9.01395636829817493E-01 ! Relative orientation
view.motion.orient (      3 ,       $V_WorkingView                ) = -3.54572750224314448E-01 ! Relative orientation
view.motion.orient (      4 ,       $V_WorkingView                ) = -1.06705399488200042E-01 ! Relative orientation

view.type (                         $V_Perspective_Moved          ) = 0                       ! Projection type
view.pos (                1 ,       $V_Perspective_Moved          ) = -1.14629710518056527E+00 ! Position
view.pos (                2 ,       $V_Perspective_Moved          ) = 5.40825615142239258E-01 ! Position
view.pos (                3 ,       $V_Perspective_Moved          ) = -3.16154684855064261E-01 ! Position
view.orient (             1 ,       $V_Perspective_Moved          ) = -6.13824307918548584E-01 ! Orientation
view.orient (             2 ,       $V_Perspective_Moved          ) = -4.47064399719238281E-01 ! Orientation
view.orient (             3 ,       $V_Perspective_Moved          ) = 3.80551487207412720E-01 ! Orientation
view.orient (             4 ,       $V_Perspective_Moved          ) = 5.27762949466705322E-01 ! Orientation
view.angle (                        $V_Perspective_Moved          ) = 7.85398185253143311E-01 ! Lens angle
view.fclip.auto (                   $V_Perspective_Moved          ) = 1                       ! Front clipping plane auto
view.bclip.auto (                   $V_Perspective_Moved          ) = 1                       ! Back clipping plane auto
view.rotcenter.type (               $V_Perspective_Moved          ) = 0                       ! Rotation center type
view.rotcenter.adjust (             $V_Perspective_Moved          ) = 1                       ! Adjust rotation center
view.motion.active (                $V_Perspective_Moved          ) = 1                       ! Camera is moved
view.motion.ref (                   $V_Perspective_Moved          ) = $M_Isys_Track_Moved     ! Marker
view.motion.x (                     $V_Perspective_Moved          ) = 1                       ! Moved camera direction x
view.motion.y (                     $V_Perspective_Moved          ) = 1                       ! Moved camera direction y
view.motion.z (                     $V_Perspective_Moved          ) = 1                       ! Moved camera direction z
view.motion.al (                    $V_Perspective_Moved          ) = 1                       ! Moved camera direction alpha
view.motion.be (                    $V_Perspective_Moved          ) = 1                       ! Moved camera direction beta
view.motion.ga (                    $V_Perspective_Moved          ) = 1                       ! Moved camera direction gamma
view.motion.pos (         1 ,       $V_Perspective_Moved          ) = -1.14629710518056527E+00 ! Relative position
view.motion.pos (         2 ,       $V_Perspective_Moved          ) = 5.40825615142239258E-01 ! Relative position
view.motion.pos (         3 ,       $V_Perspective_Moved          ) = -3.16154684855064261E-01 ! Relative position
view.motion.orient (      1 ,       $V_Perspective_Moved          ) = 6.13824300634425168E-01 ! Relative orientation
view.motion.orient (      2 ,       $V_Perspective_Moved          ) = 4.47064394414019628E-01 ! Relative orientation
view.motion.orient (      3 ,       $V_Perspective_Moved          ) = -3.80551482691488641E-01 ! Relative orientation
view.motion.orient (      4 ,       $V_Perspective_Moved          ) = -5.27762943203853974E-01 ! Relative orientation

view.type (                         $V_Side_Orthographic_Moved    ) = 1                       ! Projection type
view.pos (                1 ,       $V_Side_Orthographic_Moved    ) = 0.00000000000000000E+00 ! Position
view.pos (                2 ,       $V_Side_Orthographic_Moved    ) = 5.99845588207244873E-01 ! Position
view.pos (                3 ,       $V_Side_Orthographic_Moved    ) = -1.02445483207702637E-08 ! Position
view.orient (             1 ,       $V_Side_Orthographic_Moved    ) = 7.07106888294219971E-01 ! Orientation
view.orient (             2 ,       $V_Side_Orthographic_Moved    ) = 0.00000000000000000E+00 ! Orientation
view.orient (             3 ,       $V_Side_Orthographic_Moved    ) = 0.00000000000000000E+00 ! Orientation
view.orient (             4 ,       $V_Side_Orthographic_Moved    ) = -7.07106709480285645E-01 ! Orientation
view.height (                       $V_Side_Orthographic_Moved    ) = 8.00000000000000044E-01 ! View height
view.fclip.auto (                   $V_Side_Orthographic_Moved    ) = 1                       ! Front clipping plane auto
view.bclip.auto (                   $V_Side_Orthographic_Moved    ) = 1                       ! Back clipping plane auto
view.rotcenter.type (               $V_Side_Orthographic_Moved    ) = 0                       ! Rotation center type
view.rotcenter.adjust (             $V_Side_Orthographic_Moved    ) = 1                       ! Adjust rotation center
view.motion.active (                $V_Side_Orthographic_Moved    ) = 1                       ! Camera is moved
view.motion.ref (                   $V_Side_Orthographic_Moved    ) = $M_Isys_Track_Moved     ! Marker
view.motion.x (                     $V_Side_Orthographic_Moved    ) = 1                       ! Moved camera direction x
view.motion.y (                     $V_Side_Orthographic_Moved    ) = 1                       ! Moved camera direction y
view.motion.z (                     $V_Side_Orthographic_Moved    ) = 1                       ! Moved camera direction z
view.motion.al (                    $V_Side_Orthographic_Moved    ) = 1                       ! Moved camera direction alpha
view.motion.be (                    $V_Side_Orthographic_Moved    ) = 1                       ! Moved camera direction beta
view.motion.ga (                    $V_Side_Orthographic_Moved    ) = 1                       ! Moved camera direction gamma
view.motion.pos (         1 ,       $V_Side_Orthographic_Moved    ) = 0.00000000000000000E+00 ! Relative position
view.motion.pos (         2 ,       $V_Side_Orthographic_Moved    ) = 5.99845588207244873E-01 ! Relative position
view.motion.pos (         3 ,       $V_Side_Orthographic_Moved    ) = -1.02445483207702637E-08 ! Relative position
view.motion.orient (      1 ,       $V_Side_Orthographic_Moved    ) = 7.07106870593506742E-01 ! Relative orientation
view.motion.orient (      2 ,       $V_Side_Orthographic_Moved    ) = 0.00000000000000000E+00 ! Relative orientation
view.motion.orient (      3 ,       $V_Side_Orthographic_Moved    ) = 0.00000000000000000E+00 ! Relative orientation
view.motion.orient (      4 ,       $V_Side_Orthographic_Moved    ) = -7.07106691779576968E-01 ! Relative orientation

view.type (                         $V_Top_Orthographic_Moved     ) = 1                       ! Projection type
view.pos (                1 ,       $V_Top_Orthographic_Moved     ) = 0.00000000000000000E+00 ! Position
view.pos (                2 ,       $V_Top_Orthographic_Moved     ) = -5.06639480590820312E-07 ! Position
view.pos (                3 ,       $V_Top_Orthographic_Moved     ) = -9.67873191833496094E+00 ! Position
view.orient (             1 ,       $V_Top_Orthographic_Moved     ) = 1.00000000000000000E+00 ! Orientation
view.orient (             2 ,       $V_Top_Orthographic_Moved     ) = 0.00000000000000000E+00 ! Orientation
view.orient (             3 ,       $V_Top_Orthographic_Moved     ) = 0.00000000000000000E+00 ! Orientation
view.orient (             4 ,       $V_Top_Orthographic_Moved     ) = 1.05239450931549072E-07 ! Orientation
view.height (                       $V_Top_Orthographic_Moved     ) = 2.27604870733313946E+00 ! View height
view.fclip.auto (                   $V_Top_Orthographic_Moved     ) = 1                       ! Front clipping plane auto
view.bclip.auto (                   $V_Top_Orthographic_Moved     ) = 1                       ! Back clipping plane auto
view.rotcenter.type (               $V_Top_Orthographic_Moved     ) = 0                       ! Rotation center type
view.rotcenter.adjust (             $V_Top_Orthographic_Moved     ) = 1                       ! Adjust rotation center
view.motion.active (                $V_Top_Orthographic_Moved     ) = 1                       ! Camera is moved
view.motion.ref (                   $V_Top_Orthographic_Moved     ) = $M_Isys_Track_Moved     ! Marker
view.motion.x (                     $V_Top_Orthographic_Moved     ) = 1                       ! Moved camera direction x
view.motion.y (                     $V_Top_Orthographic_Moved     ) = 1                       ! Moved camera direction y
view.motion.z (                     $V_Top_Orthographic_Moved     ) = 1                       ! Moved camera direction z
view.motion.al (                    $V_Top_Orthographic_Moved     ) = 1                       ! Moved camera direction alpha
view.motion.be (                    $V_Top_Orthographic_Moved     ) = 1                       ! Moved camera direction beta
view.motion.ga (                    $V_Top_Orthographic_Moved     ) = 1                       ! Moved camera direction gamma
view.motion.pos (         1 ,       $V_Top_Orthographic_Moved     ) = 0.00000000000000000E+00 ! Relative position
view.motion.pos (         2 ,       $V_Top_Orthographic_Moved     ) = -5.06639480590820312E-07 ! Relative position
view.motion.pos (         3 ,       $V_Top_Orthographic_Moved     ) = -9.67873191833496094E+00 ! Relative position
view.motion.orient (      1 ,       $V_Top_Orthographic_Moved     ) = 9.99999999999994449E-01 ! Relative orientation
view.motion.orient (      2 ,       $V_Top_Orthographic_Moved     ) = 0.00000000000000000E+00 ! Relative orientation
view.motion.orient (      3 ,       $V_Top_Orthographic_Moved     ) = 0.00000000000000000E+00 ! Relative orientation
view.motion.orient (      4 ,       $V_Top_Orthographic_Moved     ) = 1.05239450931548490E-07 ! Relative orientation

!**********************************************************************
! Solver Settings
!**********************************************************************
slv.kin.task (                      $SLV_SolverSettings           ) = 3                       ! KIN_INTPAR_TASK
slv.kin.tout.n (                    $SLV_SolverSettings           ) = 201                     ! KIN_INTPAR_NUM_STEPS
slv.kin.tol (                       $SLV_SolverSettings           ) = 9.99999999999999955E-07 ! Kinematics tolerance
slv.integ.fix.driftstab (           $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_INTPAR_FIXINT_CONSTAB
slv.integ.fix.jac.update (          $SLV_SolverSettings           ) = 3                       ! TIME_INTEG_PAR_FIXINT_JACOBIAN_EVAL
slv.integ.fix.part.type (           $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_INTPAR_FIXINT_JAC_PART_TYPE
slv.integ.fix.order (               $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_PAR_FIXINT_METHOD_ORDER
slv.integ.fix.posup (               $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_PAR_FIXINT_POS_COORD_UPDATE
slv.integ.fix.type (                $SLV_SolverSettings           ) = 3                       ! TIME_INTEG_INTPAR_FIXINT_TYPE
slv.integ.sodasrt.formalism (       $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_PAR_FORMALISM
slv.integ.type (                    $SLV_SolverSettings           ) = 1                       ! Integrator type
slv.integ.jac.struc (               $SLV_SolverSettings           ) = 3                       ! SOLVER_TIME_INTEG_PAR_JACOBIAN_STRUC
slv.integ.jac.incr.type (           $SLV_SolverSettings           ) = 2                       ! Jacobian increment type
slv.integ.linalg.slv (              $SLV_SolverSettings           ) = 1                       ! 1 = dense ; 2 = sparse (UMFPACK) ; 3 = sparse (PARDISO)
slv.integ.lsode.meth (              $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_PAR_LSODE_INTEG_METHOD
slv.integ.lsode.jac.struc (         $SLV_SolverSettings           ) = 3                       ! SOLVER_TIME_INTEG_PAR_LSODE_JACOBIAN_STRUC
slv.integ.lsode.maxord (            $SLV_SolverSettings           ) = 5                       ! TIME_INTEG_INTPAR_LSODE_MAX_ORDER
slv.integ.maxrhs (                  $SLV_SolverSettings           ) = -1                      ! TIME_INTEG_INTPAR_MAX_RHS
slv.integ.maxstp (                  $SLV_SolverSettings           ) = -1                      ! TIME_INTEG_INTPAR_MAX_TIME_STEPS
slv.integ.newton.maxit (            $SLV_SolverSettings           ) = 7                       ! TIME_INTEG_INTPAR_NEWTON_ITERS
slv.integ.tout.n (                  $SLV_SolverSettings           ) = 101                     ! TIME_INTEG_INTPAR_OUTPUT_NUM_POINTS
slv.integ.sodasrt2.iestsc (         $SLV_SolverSettings           ) = 2                       ! TIME_INTEG_PAR_SODASRT20_ERROR_EST_SCALE_METHOD
slv.integ.sodasrt.maxord (          $SLV_SolverSettings           ) = 5                       ! TIME_INTEG_INTPAR_SODASRT_MAX_ORDER
slv.integ.sodasrt1.errnorm (        $SLV_SolverSettings           ) = 3                       ! TIME_INTEG_PAR_SODASRT_NORM_TYPE
slv.integ.tout.mode (               $SLV_SolverSettings           ) = 0                       ! TIME_INTEG_INTPAR_TOUT_MODE
slv.integ.meetop (                  $SLV_SolverSettings           ) = 0                       ! TIME_INTEG_BOOLPAR_EVAL_MOTION_EQ_AT_COMM_POINTS
slv.integ.driftstab (               $SLV_SolverSettings           ) = 2                       ! TIME_INTEG_BOOLPAR_ACCEPT_DRIFT
slv.integ.root (                    $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_BOOLPAR_DETECT_IMPLICIT_DISCONTINUITIES
slv.integ.jac.part (                $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_BOOLPAR_PARTITIONED_EVAL_JACOBIAN
slv.integ.addrhscall (              $SLV_SolverSettings           ) = 0                       ! TIME_INTEG_BOOLPAR_EXTRA_EVAL_AFTER_SUCCESSFUL_STEP
slv.integ.linalg.red2nd (           $SLV_SolverSettings           ) = 1                       ! Linear equations second order reduction
slv.integ.fix.oneleg (              $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_BOOLPAR_FIXINT_IMPLICIT_ONE_LEG_OLC
slv.integ.fix.conforce (            $SLV_SolverSettings           ) = 0                       ! TIME_INTEG_BOOLPAR_FIXINT_CONFORCE
slv.integ.fix.clss (                $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_BOOLPAR_FIXINT_METHOD_CLASS
slv.integ.sodasrt1.scal.lam (       $SLV_SolverSettings           ) = 9.99999999999999955E-08 ! TIME_INTEG_SCALARPAR_SCALE_CONSTRAINT_FORCES
slv.integ.sodasrt1.scal.acc (       $SLV_SolverSettings           ) = 1.00000000000000000E+00 ! TIME_INTEG_SCALARPAR_SCALE_ACCELERATIONS
slv.integ.newton.eps (              $SLV_SolverSettings           ) = 3.33000000000000018E-01 ! TIME_INTEG_SCALARPAR_NEWTON_ERROR_BOUND
slv.integ.fix.utcpar (              $SLV_SolverSettings           ) = 1.00000000000000000E+00 ! TIME_INTEG_SCALARPAR_FIXINT_EULER_UTC
slv.integ.fix.olcpar (              $SLV_SolverSettings           ) = 5.00000000000000000E-01 ! TIME_INTEG_SCALARPAR_FIXINT_ONE_LEG_OLC
slv.integ.sodasrt2.estfac (         $SLV_SolverSettings           ) = 9.99999999999999955E-07 ! TIME_INTEG_SCALARPAR_SODASRT20_ERROR_EST_SCALE_FACTOR
slv.integ.tout.freq (               $SLV_SolverSettings           ) = { 50 Hz }               ! TIME_INTEG_PAR_OUTPUT_FREQ
slv.integ.fix.h (                   $SLV_SolverSettings           ) = 2.00000000000000004E-03 ! TIME_INTEG_TIMEPAR_CONSTANT_STEPSIZE
slv.integ.tend.time (               $SLV_SolverSettings           ) = { 50 s }                ! TIME_INTEG_TIMEPAR_END_TIME
slv.integ.h0 (                      $SLV_SolverSettings           ) = 0.00000000000000000E+00 ! TIME_INTEG_TIMEPAR_INIT_STEPSIZE
slv.integ.atol.gen (                $SLV_SolverSettings           ) = 9.99999999999999955E-07 ! TIME_INTEG_PARSTATE_DEFAULT
slv.integ.atol.vel (                $SLV_SolverSettings           ) = 1.00000000000000005E-04 ! TIME_INTEG_PARSTATE_VEL
slv.integ.rtol.gen (                $SLV_SolverSettings           ) = 1.00000000000000004E-10 ! TIME_INTEG_PARSTATE_DEFAULT
slv.integ.rtol.vel (                $SLV_SolverSettings           ) = 1.00000000000000005E-04 ! TIME_INTEG_PARSTATE_VEL
slv.meas.geo (                      $SLV_SolverSettings           ) = 1                       ! Animation data to result file
slv.meas.sensor.pos (               $SLV_SolverSettings           ) = 1                       ! Sensor position to result file
slv.meas.sensor.vel (               $SLV_SolverSettings           ) = 1                       ! Sensor velocity to result file
slv.meas.sensor.acc (               $SLV_SolverSettings           ) = 1                       ! Sensor acceleration to result file
slv.meas.force.af (                 $SLV_SolverSettings           ) = 1                       ! applied forces to result file
slv.meas.force.ov (                 $SLV_SolverSettings           ) = 1                       ! Force output values to result file
slv.meas.force.st.dyn (             $SLV_SolverSettings           ) = 1                       ! Force dynamic states to result file
slv.meas.force.st.alg (             $SLV_SolverSettings           ) = 1                       ! Force algebraic states to result file
slv.meas.joint.st.pos (             $SLV_SolverSettings           ) = 1                       ! Joint position to result file
slv.meas.joint.st.vel (             $SLV_SolverSettings           ) = 1                       ! Joint velocity to result file
slv.meas.joint.st.acc (             $SLV_SolverSettings           ) = 1                       ! Joint acceleration to result file
slv.meas.joint.cf (                 $SLV_SolverSettings           ) = 1                       ! Joint constraining forces to result file
slv.meas.body.pos (                 $SLV_SolverSettings           ) = 1                       ! Body position to result file
slv.meas.body.flx.st.pos (          $SLV_SolverSettings           ) = 1                       ! Body elastic state position to result file
slv.meas.body.flx.st.vel (          $SLV_SolverSettings           ) = 1                       ! Body elastic state velocity to result file
slv.meas.body.flx.st.acc (          $SLV_SolverSettings           ) = 1                       ! Body elastic state acceleration to result file
slv.meas.marker.st.alg (            $SLV_SolverSettings           ) = 1                       ! Marker algebraic state to result file
slv.meas.constr.cf (                $SLV_SolverSettings           ) = 1                       ! Constraint constrained state to result file
slv.meas.yout (                     $SLV_SolverSettings           ) = 1                       ! y-Outputs to result file
slv.meas.result (                   $SLV_SolverSettings           ) = 1                       ! Result elements to result file
slv.meas.subvar (                   $SLV_SolverSettings           ) = 1                       ! MEAS_BOOLPAR_SUBVAR
slv.assmbl.task (                   $SLV_SolverSettings           ) = 3                       ! ASSMBL_PAR_SOLVER_MODE
slv.output.path.type (              $SLV_SolverSettings           ) = 1                       ! OUTPUT_PATH_PAR_TYPE
slv.output.file.desc (              $SLV_SolverSettings           ) = ''                      ! Description written to the output file if supported
slv.threads (                       $SLV_SolverSettings           ) = 6                       ! Solver Threads
slv.compat.solver (                 $SLV_SolverSettings           ) = 0                       ! 0 = no (new solver); 1 = yes (classic solver)
slv.mem.policy (                    $SLV_SolverSettings           ) = 1                       ! 0 = task optimized; 1 = performance optimized; 2 = lowest memory usage
slv.rt.enable (                     $SLV_SolverSettings           ) = 1                       ! Enable realtime simulation
slv.rt.animation.enable (           $SLV_SolverSettings           ) = 1                       ! Enable realtime animation
slv.txt (                           $SLV_SolverSettings           ) = '在实时仿真过程中:[br]Realtime Fixed-step 求解器关闭 Additional RHS evaluations after each step 时，会出现短暂的轮速振荡; [br]Realtime 使用 SODASRT2 求解器将报error，但是可以正常运行' ! Comment

!**********************************************************************
! SubVars
!**********************************************************************
subvar.str (                        $_VehicleVelCtrl_StartVel     ) = '500/3.6'               ! Definition

subvar.str (                        $_VehicleVelCtrl_EndVel       ) = '700/3.6'               ! Definition

subvar.str (                        $_VehicleVelCtrl_Acc          ) = '1'                     ! Definition

subvar.str (                        $_VehicleVelCtrl_Time         ) = '($_VehicleVelCtrl_EndVel-$_VehicleVelCtrl_StartVel)/$_VehicleVelCtrl_Acc' ! Definition

subvar.str (                        $_Ldx                         ) = '0.8225 + $_Lx3'        ! Definition
subvar.txt (                        $_Ldx                         ) = '单根一系牵引拉杆在全局坐标系中的投影，其纵向长度为 $_Ldx；由几何条件决定' ! Comment

subvar.str (                        $_Ldy                         ) = '-($_Lx1-$_Lx2)/2'      ! Definition
subvar.txt (                        $_Ldy                         ) = '单根一系牵引拉杆在全局坐标系中的投影，其横向长度为 $_Ldy' ! Comment

subvar.str (                        $_L_bar                       ) = 'sqrt($_Ldx^2+$_Ldy^2)' ! Definition
subvar.txt (                        $_L_bar                       ) = '一系纵向双拉杆的长度，由 $_Ldx 和 $_Ld 共同决定。' ! Comment

subvar.str (                        $_Vel_kmph                    ) = '$_TargetVelocity * 3.6' ! Definition

subvar.str (                        $_VehicleVelCtrl_P            ) = '20000'                 ! Definition

subvar.str (                        $_VehicleVelCtrl_I            ) = '5000'                  ! Definition

!**********************************************************************
! Reference systems
!**********************************************************************
refsys.type (                       $R_Isys                       ) = 1                       ! Type
refsys.attr.2d.pos.x (              $R_Isys                       ) = -9.00000000000000000E+01
refsys.attr.2d.pos.y (              $R_Isys                       ) = -1.00000000000000000E+01
refsys.attr.2d.width (              $R_Isys                       ) = 2.40000000000000000E+02
refsys.attr.2d.height (             $R_Isys                       ) = 2.20000000000000000E+02

marker.type (                       $M_Isys                       ) = 1                       ! Type
marker.parent (                     $M_Isys                       ) = $R_Isys                 ! Reference system

marker.type (                       $M_Isys_Track_Moved           ) = -98                     ! Type
marker.parent (                     $M_Isys_Track_Moved           ) = $R_Isys                 ! Reference system
marker.par (              1 ,       $M_Isys_Track_Moved           ) = null                    ! [-] Track Connection/Joint
marker.par (              3 ,       $M_Isys_Track_Moved           ) = 0.00000000000000000E+00 ! [-] Disregard Track elevation
marker.par (              4 ,       $M_Isys_Track_Moved           ) = 0.00000000000000000E+00 ! [-] Disregard Track roll
marker.par (              5 ,       $M_Isys_Track_Moved           ) = 0.00000000000000000E+00 ! [-] Disregard Track pitch
marker.par (              6 ,       $M_Isys_Track_Moved           ) = 0.00000000000000000E+00 ! [m] Offset in x of Track frame
marker.par (              7 ,       $M_Isys_Track_Moved           ) = 0.00000000000000000E+00 ! [m] Offset in y of Track frame
marker.par (              8 ,       $M_Isys_Track_Moved           ) = 0.00000000000000000E+00 ! [m] Offset in z of Track frame
marker.par (              9 ,       $M_Isys_Track_Moved           ) = 0.00000000000000000E+00 ! [m] Offset in s along Track
marker.par (             10 ,       $M_Isys_Track_Moved           ) = 0.00000000000000000E+00 ! [-] Calculate derivatives

prim.type (                         $P_Isys                       ) = 30                      ! Type
prim.ref (                          $P_Isys                       ) = $M_Isys                 ! Reference Marker
prim.color.r (            1 ,       $P_Isys                       ) = 1.48000000000000000E+02 ! Colors (red component)
prim.color.g (            1 ,       $P_Isys                       ) = 1.48000000000000000E+02 ! Colors (green component)
prim.color.b (            1 ,       $P_Isys                       ) = 1.48000000000000000E+02 ! Colors (blue component)
prim.color.t (            1 ,       $P_Isys                       ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.par (                3 ,       $P_Isys                       ) = 1.00000000000000006E-01 ! [m] Length

prim.type (                         $P_R_Isys_Track               ) = 41                      ! Type
prim.ref (                          $P_R_Isys_Track               ) = $M_Isys                 ! Reference Marker


!**********************************************************************
! Bodies
!**********************************************************************
body.m (                            $B_Carbody                    ) = $_Mc                    ! Mass of the Body
body.cg.pos (             3 ,       $B_Carbody                    ) = $_hc                    ! Center of gravity
body.I.tens (             1 ,   1 , $B_Carbody                    ) = $_Icx                   ! Moments of inertia
body.I.tens (             2 ,   2 , $B_Carbody                    ) = $_Icy                   ! Moments of inertia
body.I.tens (             3 ,   3 , $B_Carbody                    ) = $_Icz                   ! Moments of inertia
body.I.kind (                       $B_Carbody                    ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker
body.attr.2d.pos.x (                $B_Carbody                    ) = 7.00000000000000000E+01
body.attr.2d.pos.y (                $B_Carbody                    ) = -7.00000000000000000E+01
body.attr.2d.width (                $B_Carbody                    ) = 1.90000000000000000E+02
body.attr.2d.height (               $B_Carbody                    ) = 1.30000000000000000E+02

marker.type (                       $M_Carbody_BRF                ) = 1                       ! Type
marker.parent (                     $M_Carbody_BRF                ) = $B_Carbody              ! Body
marker.flx.type (                   $M_Carbody_BRF                ) = 4                       ! Flexible type

marker.type (                       $M_Carbody_Front              ) = 2                       ! Type
marker.parent (                     $M_Carbody_Front              ) = $B_Carbody              ! Body
marker.pos (              1 ,       $M_Carbody_Front              ) = { 17500/2000 }          ! Position
marker.pos (              3 ,       $M_Carbody_Front              ) = -1.00000000000000000E+00 ! Position

marker.type (                       $M_Carbody_Rear               ) = 2                       ! Type
marker.parent (                     $M_Carbody_Rear               ) = $B_Carbody              ! Body
marker.pos (              1 ,       $M_Carbody_Rear               ) = { -17500/2000 }         ! Position
marker.pos (              3 ,       $M_Carbody_Rear               ) = -1.00000000000000000E+00 ! Position

marker.type (                       $M_Carbody_accF               ) = 2                       ! Type
marker.ref (                        $M_Carbody_accF               ) = null                    ! Reference Marker
marker.parent (                     $M_Carbody_accF               ) = $B_Carbody              ! Body
marker.pos (              1 ,       $M_Carbody_accF               ) = { 17500/2000 }          ! Position
marker.pos (              2 ,       $M_Carbody_accF               ) = -1.00000000000000000E+00 ! Position
marker.pos (              3 ,       $M_Carbody_accF               ) = -1.19999999999999996E+00 ! Position

joint.from (                        $J_Carbody                    ) = $M_Isys                 ! From Marker
joint.to (                          $J_Carbody                    ) = $M_Carbody_BRF          ! To Marker
joint.type (                        $J_Carbody                    ) = 7                       ! Type
joint.st.pos (            1 ,       $J_Carbody                    ) = 0.00000000000000000E+00 ! Position
joint.st.pos (            2 ,       $J_Carbody                    ) = 0.00000000000000000E+00 ! Position
joint.st.pos (            3 ,       $J_Carbody                    ) = 0.00000000000000000E+00 ! Position
joint.st.pos (            4 ,       $J_Carbody                    ) = 0.00000000000000000E+00 ! Position
joint.st.pos (            5 ,       $J_Carbody                    ) = 0.00000000000000000E+00 ! Position
joint.st.pos (            6 ,       $J_Carbody                    ) = 0.00000000000000000E+00 ! Position
joint.st.vel (            1 ,       $J_Carbody                    ) = 1.66666666666666679E+01 ! Velocity
joint.st.vel (            2 ,       $J_Carbody                    ) = 0.00000000000000000E+00 ! Velocity
joint.st.vel (            3 ,       $J_Carbody                    ) = 0.00000000000000000E+00 ! Velocity
joint.st.vel (            4 ,       $J_Carbody                    ) = 0.00000000000000000E+00 ! Velocity
joint.st.vel (            5 ,       $J_Carbody                    ) = 0.00000000000000000E+00 ! Velocity
joint.st.vel (            6 ,       $J_Carbody                    ) = 0.00000000000000000E+00 ! Velocity
joint.par (               3 ,       $J_Carbody                    ) = 0.00000000000000000E+00 ! [-] Degrees of freedom
joint.par (              19 ,       $J_Carbody                    ) = 0.00000000000000000E+00 ! [m] Longitudinal position offset
joint.attr.2d.pos.x (     1 ,       $J_Carbody                    ) = -20
joint.attr.2d.pos.y (     1 ,       $J_Carbody                    ) = -20
joint.attr.2d.ori (       1 ,       $J_Carbody                    ) = 0
joint.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $J_Carbody   ) = -40, -40, -47, -47, -37
joint.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $J_Carbody   ) = -10, -10, -10, -20, -20
joint.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $J_Carbody     ) = 70, -3
joint.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $J_Carbody     ) = -20, -20

prim.type (                         $P_Carbody                    ) = 21                      ! Type
prim.ref (                          $P_Carbody                    ) = $M_Carbody_BRF          ! Reference Marker
prim.ang (                1 ,       $P_Carbody                    ) = { 180deg }              ! Angles
prim.color.r (            1 ,       $P_Carbody                    ) = 0.00000000000000000E+00 ! Colors (red component)
prim.color.r (            2 ,       $P_Carbody                    ) = 0.00000000000000000E+00 ! Colors (red component)
prim.color.r (            3 ,       $P_Carbody                    ) = 2.55000000000000000E+02 ! Colors (red component)
prim.color.r (            4 ,       $P_Carbody                    ) = 2.55000000000000000E+02 ! Colors (red component)
prim.color.g (            1 ,       $P_Carbody                    ) = 0.00000000000000000E+00 ! Colors (green component)
prim.color.g (            2 ,       $P_Carbody                    ) = 0.00000000000000000E+00 ! Colors (green component)
prim.color.g (            3 ,       $P_Carbody                    ) = 1.85000000000000000E+02 ! Colors (green component)
prim.color.g (            4 ,       $P_Carbody                    ) = 0.00000000000000000E+00 ! Colors (green component)
prim.color.b (            1 ,       $P_Carbody                    ) = 0.00000000000000000E+00 ! Colors (blue component)
prim.color.b (            2 ,       $P_Carbody                    ) = 2.55000000000000000E+02 ! Colors (blue component)
prim.color.b (            3 ,       $P_Carbody                    ) = 1.50000000000000000E+01 ! Colors (blue component)
prim.color.b (            4 ,       $P_Carbody                    ) = 2.55000000000000000E+02 ! Colors (blue component)
prim.color.t (            1 ,       $P_Carbody                    ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.color.t (            2 ,       $P_Carbody                    ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.color.t (            3 ,       $P_Carbody                    ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.color.t (            4 ,       $P_Carbody                    ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.drawstyle (                    $P_Carbody                    ) = 2                       ! Draw style
prim.par (                2 ,       $P_Carbody                    ) = 1.00000000000000000E+00 ! [-] Show front cabin
prim.par (                3 ,       $P_Carbody                    ) = 1.00000000000000000E+00 ! [-] Show rear cabin
prim.par (                4 ,       $P_Carbody                    ) = 1.00000000000000000E+00 ! [-] Hide buffers
prim.par (                5 ,       $P_Carbody                    ) = 1.00000000000000000E+00 ! [-] Hide pantograph
prim.par (                6 ,       $P_Carbody                    ) = 1.00000000000000000E+00 ! [-] Show middle window
prim.par (                7 ,       $P_Carbody                    ) = 5.00000000000000000E-01 ! [m] Height 1 in X
prim.par (                8 ,       $P_Carbody                    ) = 2.99999999999999989E-01 ! [m] Height 2 in X
prim.par (                9 ,       $P_Carbody                    ) = 8.99000000000000021E-01 ! [m] Height 3 in X
prim.par (               10 ,       $P_Carbody                    ) = 1.19999999999999996E+00 ! [m] Height 4 in X
prim.par (               11 ,       $P_Carbody                    ) = 1.69999999999999996E+00 ! [m] Height 5 in X
prim.par (               12 ,       $P_Carbody                    ) = 3.43999999999999995E+00 ! [m] Height 6 in X
prim.par (               13 ,       $P_Carbody                    ) = 4.08999999999999986E+00 ! [m] Height 7 in X
prim.par (               14 ,       $P_Carbody                    ) = 2.00000000000000000E+01 ! [m] Length 1 in X
prim.par (               15 ,       $P_Carbody                    ) = 3.75000000000000000E+00 ! [m] Length 2 in X
prim.par (               16 ,       $P_Carbody                    ) = 3.95000000000000018E+00 ! [m] Length 3 in X
prim.par (               17 ,       $P_Carbody                    ) = 4.12999999999999989E+00 ! [m] Length 4 in X
prim.par (               18 ,       $P_Carbody                    ) = 3.31000000000000005E+00 ! [m] Length 5 in X
prim.par (               19 ,       $P_Carbody                    ) = 1.38999999999999990E+00 ! [m] Length 6 in X
prim.par (               20 ,       $P_Carbody                    ) = 5.40000000000000036E-01 ! [m] Length 7 in X
prim.par (               21 ,       $P_Carbody                    ) = 2.79000000000000004E+00 ! [m] Width 1 in X
prim.par (               22 ,       $P_Carbody                    ) = 3.02000000000000002E+00 ! [m] Width 2 in X
prim.par (               23 ,       $P_Carbody                    ) = 3.02000000000000002E+00 ! [m] Width 3 in X
prim.par (               24 ,       $P_Carbody                    ) = 2.83000000000000007E+00 ! [m] Width 4 in X
prim.par (               25 ,       $P_Carbody                    ) = 1.79000000000000004E+00 ! [m] Width 5 in X
prim.par (               26 ,       $P_Carbody                    ) = 1.44999999999999996E+00 ! [m] Width 6 in X
prim.par (               27 ,       $P_Carbody                    ) = 3.50999999999999979E-01 ! [m] Width 7 in X
prim.par (               28 ,       $P_Carbody                    ) = 2.25000000000000000E+01 ! [m] Layer Length L8 in X
prim.par (               29 ,       $P_Carbody                    ) = { 17500/1000 }          ! [m] Layer Length L9 in X
prim.par (               30 ,       $P_Carbody                    ) = 5.00000000000000000E+00 ! [m] Layer Length L10 in X
prim.par (               31 ,       $P_Carbody                    ) = 6.29999999999999982E+00 ! [m] Pantograph X position
prim.par (               32 ,       $P_Carbody                    ) = 1.77000000000000002E+00 ! [m] Window distance rear
prim.par (               33 ,       $P_Carbody                    ) = 1.00000000000000006E-01 ! [m] Window distance front
prim.par (               34 ,       $P_Carbody                    ) = 1.08000000000000007E+00 ! [m] Window distance bottom
prim.par (               35 ,       $P_Carbody                    ) = 1.40000000000000013E-01 ! [m] Window distance top


!**********************************************************************
! Control Elements
!**********************************************************************
control.type (                      $C_CurveLeft                  ) = 163                     ! Type
control.par (             1 ,       $C_CurveLeft                  ) = 1.00000000000000000E+00 ! [-] Number of u-Vector Elements
control.par (            10 ,       $C_CurveLeft                  ) = $UE_CurveLeft           ! [-]  Ch 1: u-Vector Element

control.type (                      $C_CurveRight                 ) = 163                     ! Type
control.par (             1 ,       $C_CurveRight                 ) = 1.00000000000000000E+00 ! [-] Number of u-Vector Elements
control.par (            10 ,       $C_CurveRight                 ) = $UE_CurveRight          ! [-]  Ch 1: u-Vector Element

!**********************************************************************
! Power Spectral Density
!**********************************************************************
psd.type (                          $PSD_AAR5_LAT                 ) = 1                       ! Type
psd.par (                 1 ,       $PSD_AAR5_LAT                 ) = 0.00000000000000000E+00 ! [-] Numerator degree
psd.par (                 2 ,       $PSD_AAR5_LAT                 ) = 4.00000000000000000E+00 ! [-] Denominator degree
psd.par (                 3 ,       $PSD_AAR5_LAT                 ) = 0.00000000000000000E+00 ! [-] Representation of independent
psd.par (                 4 ,       $PSD_AAR5_LAT                 ) = 2.00000000000000000E+00 ! [-] Free factor alpha
psd.par (                 5 ,       $PSD_AAR5_LAT                 ) = 0.00000000000000000E+00 ! [-] Sides
psd.par (                10 ,       $PSD_AAR5_LAT                 ) = 1.29501947600000002E-06 ! [-] Numerator coeff. for degree 0
psd.par (                20 ,       $PSD_AAR5_LAT                 ) = 0.00000000000000000E+00 ! [-] Denomin. coeff. for degree 0
psd.par (                21 ,       $PSD_AAR5_LAT                 ) = 0.00000000000000000E+00 ! [-] Denomin. coeff. for degree 1
psd.par (                22 ,       $PSD_AAR5_LAT                 ) = 6.79802499999999976E-01 ! [-] Denomin. coeff. for degree 2
psd.par (                23 ,       $PSD_AAR5_LAT                 ) = 0.00000000000000000E+00 ! [-] Denomin. coeff. for degree 3
psd.par (                24 ,       $PSD_AAR5_LAT                 ) = 1.00000000000000000E+00 ! [-] Denomin. coeff. for degree 4
psd.plot.par (            1 ,       $PSD_AAR5_LAT                 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
psd.plot.par (            1 ,   1 , $PSD_AAR5_LAT                 ) = 1.00000000000000000E+03 ! [-] Unknown plot parameter
psd.plot.par (            1 ,   2 , $PSD_AAR5_LAT                 ) = 1.00000000000000002E-03 ! [-] Unknown plot parameter
psd.plot.par (            1 ,   3 , $PSD_AAR5_LAT                 ) = 3.00000000000000000E+04 ! [-] Unknown plot parameter
psd.plot.par (            1 ,   4 ,   1 , $PSD_AAR5_LAT           ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter

psd.type (                          $PSD_AAR5_VER                 ) = 1                       ! Type
psd.par (                 1 ,       $PSD_AAR5_VER                 ) = 0.00000000000000000E+00 ! [-] Numerator degree
psd.par (                 2 ,       $PSD_AAR5_VER                 ) = 4.00000000000000000E+00 ! [-] Denominator degree
psd.par (                 3 ,       $PSD_AAR5_VER                 ) = 0.00000000000000000E+00 ! [-] Representation of independent
psd.par (                 4 ,       $PSD_AAR5_VER                 ) = 2.00000000000000000E+00 ! [-] Free factor alpha
psd.par (                 5 ,       $PSD_AAR5_VER                 ) = 0.00000000000000000E+00 ! [-] Sides
psd.par (                10 ,       $PSD_AAR5_VER                 ) = 3.56045380939999997E-06 ! [-] Numerator coeff. for degree 0
psd.par (                20 ,       $PSD_AAR5_VER                 ) = 0.00000000000000000E+00 ! [-] Denomin. coeff. for degree 0
psd.par (                21 ,       $PSD_AAR5_VER                 ) = 0.00000000000000000E+00 ! [-] Denomin. coeff. for degree 1
psd.par (                22 ,       $PSD_AAR5_VER                 ) = 6.79802499999999976E-01 ! [-] Denomin. coeff. for degree 2
psd.par (                23 ,       $PSD_AAR5_VER                 ) = 0.00000000000000000E+00 ! [-] Denomin. coeff. for degree 3
psd.par (                24 ,       $PSD_AAR5_VER                 ) = 1.00000000000000000E+00 ! [-] Denomin. coeff. for degree 4
psd.plot.par (            1 ,       $PSD_AAR5_VER                 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
psd.plot.par (            1 ,   1 , $PSD_AAR5_VER                 ) = 1.00000000000000000E+03 ! [-] Unknown plot parameter
psd.plot.par (            1 ,   2 , $PSD_AAR5_VER                 ) = 1.00000000000000002E-03 ! [-] Unknown plot parameter
psd.plot.par (            1 ,   3 , $PSD_AAR5_VER                 ) = 3.00000000000000000E+04 ! [-] Unknown plot parameter
psd.plot.par (            1 ,   4 ,   1 , $PSD_AAR5_VER           ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter

psd.type (                          $PSD_AAR5_GAU                 ) = 1                       ! Type
psd.par (                 1 ,       $PSD_AAR5_GAU                 ) = 0.00000000000000000E+00 ! [-] Numerator degree
psd.par (                 2 ,       $PSD_AAR5_GAU                 ) = 4.00000000000000000E+00 ! [-] Denominator degree
psd.par (                 3 ,       $PSD_AAR5_GAU                 ) = 0.00000000000000000E+00 ! [-] Representation of independent
psd.par (                 4 ,       $PSD_AAR5_GAU                 ) = 2.00000000000000000E+00 ! [-] Free factor alpha
psd.par (                 5 ,       $PSD_AAR5_GAU                 ) = 0.00000000000000000E+00 ! [-] Sides
psd.par (                10 ,       $PSD_AAR5_GAU                 ) = 3.56045380939999997E-06 ! [-] Numerator coeff. for degree 0
psd.par (                20 ,       $PSD_AAR5_GAU                 ) = 4.58101623899999977E-01 ! [-] Denomin. coeff. for degree 0
psd.par (                21 ,       $PSD_AAR5_GAU                 ) = 0.00000000000000000E+00 ! [-] Denomin. coeff. for degree 1
psd.par (                22 ,       $PSD_AAR5_GAU                 ) = 1.35367706000000010E+00 ! [-] Denomin. coeff. for degree 2
psd.par (                23 ,       $PSD_AAR5_GAU                 ) = 0.00000000000000000E+00 ! [-] Denomin. coeff. for degree 3
psd.par (                24 ,       $PSD_AAR5_GAU                 ) = 1.00000000000000000E+00 ! [-] Denomin. coeff. for degree 4

psd.type (                          $PSD_AAR6_LAT                 ) = 1                       ! Type
psd.par (                 1 ,       $PSD_AAR6_LAT                 ) = 0.00000000000000000E+00 ! [-] Numerator degree
psd.par (                 2 ,       $PSD_AAR6_LAT                 ) = 4.00000000000000000E+00 ! [-] Denominator degree
psd.par (                 3 ,       $PSD_AAR6_LAT                 ) = 0.00000000000000000E+00 ! [-] Representation of independent
psd.par (                 4 ,       $PSD_AAR6_LAT                 ) = 2.00000000000000000E+00 ! [-] Free factor alpha
psd.par (                 5 ,       $PSD_AAR6_LAT                 ) = 0.00000000000000000E+00 ! [-] Sides
psd.par (                10 ,       $PSD_AAR6_LAT                 ) = 5.76130711900000031E-07 ! [-] Numerator coeff. for degree 0
psd.par (                20 ,       $PSD_AAR6_LAT                 ) = 0.00000000000000000E+00 ! [-] Denomin. coeff. for degree 0
psd.par (                21 ,       $PSD_AAR6_LAT                 ) = 0.00000000000000000E+00 ! [-] Denomin. coeff. for degree 1
psd.par (                22 ,       $PSD_AAR6_LAT                 ) = 6.79802499999999976E-01 ! [-] Denomin. coeff. for degree 2
psd.par (                23 ,       $PSD_AAR6_LAT                 ) = 0.00000000000000000E+00 ! [-] Denomin. coeff. for degree 3
psd.par (                24 ,       $PSD_AAR6_LAT                 ) = 1.00000000000000000E+00 ! [-] Denomin. coeff. for degree 4
psd.plot.par (            1 ,       $PSD_AAR6_LAT                 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
psd.plot.par (            1 ,   1 , $PSD_AAR6_LAT                 ) = 1.00000000000000000E+03 ! [-] Unknown plot parameter
psd.plot.par (            1 ,   2 , $PSD_AAR6_LAT                 ) = 1.00000000000000002E-03 ! [-] Unknown plot parameter
psd.plot.par (            1 ,   3 , $PSD_AAR6_LAT                 ) = 3.00000000000000000E+04 ! [-] Unknown plot parameter
psd.plot.par (            1 ,   4 ,   1 , $PSD_AAR6_LAT           ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter

psd.type (                          $PSD_AAR6_VER                 ) = 1                       ! Type
psd.par (                 1 ,       $PSD_AAR6_VER                 ) = 0.00000000000000000E+00 ! [-] Numerator degree
psd.par (                 2 ,       $PSD_AAR6_VER                 ) = 4.00000000000000000E+00 ! [-] Denominator degree
psd.par (                 3 ,       $PSD_AAR6_VER                 ) = 0.00000000000000000E+00 ! [-] Representation of independent
psd.par (                 4 ,       $PSD_AAR6_VER                 ) = 2.00000000000000000E+00 ! [-] Free factor alpha
psd.par (                 5 ,       $PSD_AAR6_VER                 ) = 0.00000000000000000E+00 ! [-] Sides
psd.par (                10 ,       $PSD_AAR6_VER                 ) = 5.76130711900000031E-07 ! [-] Numerator coeff. for degree 0
psd.par (                20 ,       $PSD_AAR6_VER                 ) = 0.00000000000000000E+00 ! [-] Denomin. coeff. for degree 0
psd.par (                21 ,       $PSD_AAR6_VER                 ) = 0.00000000000000000E+00 ! [-] Denomin. coeff. for degree 1
psd.par (                22 ,       $PSD_AAR6_VER                 ) = 6.79802499999999976E-01 ! [-] Denomin. coeff. for degree 2
psd.par (                23 ,       $PSD_AAR6_VER                 ) = 0.00000000000000000E+00 ! [-] Denomin. coeff. for degree 3
psd.par (                24 ,       $PSD_AAR6_VER                 ) = 1.00000000000000000E+00 ! [-] Denomin. coeff. for degree 4
psd.plot.par (            1 ,       $PSD_AAR6_VER                 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
psd.plot.par (            1 ,   1 , $PSD_AAR6_VER                 ) = 1.00000000000000000E+03 ! [-] Unknown plot parameter
psd.plot.par (            1 ,   2 , $PSD_AAR6_VER                 ) = 1.00000000000000002E-03 ! [-] Unknown plot parameter
psd.plot.par (            1 ,   3 , $PSD_AAR6_VER                 ) = 3.00000000000000000E+04 ! [-] Unknown plot parameter
psd.plot.par (            1 ,   4 ,   1 , $PSD_AAR6_VER           ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter

psd.type (                          $PSD_AAR6_GAU                 ) = 1                       ! Type
psd.par (                 1 ,       $PSD_AAR6_GAU                 ) = 0.00000000000000000E+00 ! [-] Numerator degree
psd.par (                 2 ,       $PSD_AAR6_GAU                 ) = 4.00000000000000000E+00 ! [-] Denominator degree
psd.par (                 3 ,       $PSD_AAR6_GAU                 ) = 0.00000000000000000E+00 ! [-] Representation of independent
psd.par (                 4 ,       $PSD_AAR6_GAU                 ) = 2.00000000000000000E+00 ! [-] Free factor alpha
psd.par (                 5 ,       $PSD_AAR6_GAU                 ) = 0.00000000000000000E+00 ! [-] Sides
psd.par (                10 ,       $PSD_AAR6_GAU                 ) = 5.76130711900000031E-07 ! [-] Numerator coeff. for degree 0
psd.par (                20 ,       $PSD_AAR6_GAU                 ) = 1.27337354900000005E-01 ! [-] Denomin. coeff. for degree 0
psd.par (                21 ,       $PSD_AAR6_GAU                 ) = 0.00000000000000000E+00 ! [-] Denomin. coeff. for degree 1
psd.par (                22 ,       $PSD_AAR6_GAU                 ) = 8.67116090000000006E-01 ! [-] Denomin. coeff. for degree 2
psd.par (                23 ,       $PSD_AAR6_GAU                 ) = 0.00000000000000000E+00 ! [-] Denomin. coeff. for degree 3
psd.par (                24 ,       $PSD_AAR6_GAU                 ) = 1.00000000000000000E+00 ! [-] Denomin. coeff. for degree 4
psd.plot.par (            1 ,       $PSD_AAR6_GAU                 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
psd.plot.par (            1 ,   1 , $PSD_AAR6_GAU                 ) = 1.00000000000000000E+03 ! [-] Unknown plot parameter
psd.plot.par (            1 ,   2 , $PSD_AAR6_GAU                 ) = 1.00000000000000002E-03 ! [-] Unknown plot parameter
psd.plot.par (            1 ,   3 , $PSD_AAR6_GAU                 ) = 3.00000000000000000E+04 ! [-] Unknown plot parameter
psd.plot.par (            1 ,   4 ,   1 , $PSD_AAR6_GAU           ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter

!**********************************************************************
! Tracks
!**********************************************************************
track.type (                        $Trk_CriticalVelocity         ) = 2                       ! Type
track.kind (                        $Trk_CriticalVelocity         ) = 1                       ! Kind
track.excit.lat (                   $Trk_CriticalVelocity         ) = $E_LatExt               ! Track::EXC_TRACK_LATERAL
track.excit.vert (                  $Trk_CriticalVelocity         ) = null                    ! Track::EXC_TRACK_VERTICAL
track.excit.roll (                  $Trk_CriticalVelocity         ) = null                    ! Track::EXC_TRACK_ROLL
track.excit.left.lat (              $Trk_CriticalVelocity         ) = null                    ! Track::EXC_RAIL_LATERAL_LEFT
track.excit.left.vert (             $Trk_CriticalVelocity         ) = null                    ! Track::EXC_RAIL_VERTICAL_LEFT
track.excit.left.roll (             $Trk_CriticalVelocity         ) = null                    ! Track::EXC_RAIL_ROLL_LEFT
track.excit.right.lat (             $Trk_CriticalVelocity         ) = null                    ! Track::EXC_RAIL_LATERAL_RIGHT
track.excit.right.vert (            $Trk_CriticalVelocity         ) = null                    ! Track::EXC_RAIL_VERTICAL_RIGHT
track.excit.right.roll (            $Trk_CriticalVelocity         ) = null                    ! Track::EXC_RAIL_ROLL_RIGHT
track.excit.gauge (                 $Trk_CriticalVelocity         ) = null                    ! Track::EXC_TRACK_GAUGE
track.meas.superelev.kind (         $Trk_CriticalVelocity         ) = 1                       ! Superelevation kind (measured track)
track.meas.superelev.reflen (       $Trk_CriticalVelocity         ) = 0.00000000000000000E+00 ! Superelevation reference length (measured track)
track.meas.len (                    $Trk_CriticalVelocity         ) = 0.00000000000000000E+00 ! Total measured length
track.meas.discr.fromfile (         $Trk_CriticalVelocity         ) = 0                       ! Discretisation from file
track.meas.discr.num (              $Trk_CriticalVelocity         ) = 0                       ! Number of discretisation points
track.cart.file (                   $Trk_CriticalVelocity         ) = ''                      ! Cartographic filename
track.meas.file (                   $Trk_CriticalVelocity         ) = ''                      ! Measured filename
track.crg.dir (                     $Trk_CriticalVelocity         ) = ''                      ! CRG file directory
track.excit.type (                  $Trk_CriticalVelocity         ) = 1                       ! Excitations type
track.excit.start (                 $Trk_CriticalVelocity         ) = { $_TargetVelocity * 2 } ! Excitations start
track.excit.end (                   $Trk_CriticalVelocity         ) = { $_TargetVelocity * 3 } ! Excitations end
track.excit.fade.len (              $Trk_CriticalVelocity         ) = { $_TargetVelocity * 0.5 } ! Excitations fade in/out
track.meas.sec.start (              $Trk_CriticalVelocity         ) = 0.00000000000000000E+00 ! Section start
track.meas.sec.end (                $Trk_CriticalVelocity         ) = 0.00000000000000000E+00 ! Section end
track.meas.datared.fromfile (       $Trk_CriticalVelocity         ) = 0                       ! Data reduction from file
track.meas.datared.incr (           $Trk_CriticalVelocity         ) = 0                       ! Data increment
track.meas.curvature.datared (      $Trk_CriticalVelocity         ) = 0                       ! Data reduction vertical curvature handling
track.meas.startend.fromexcit (     $Trk_CriticalVelocity         ) = 0                       ! Start/End from excitation
track.meas.start (                  $Trk_CriticalVelocity         ) = 0.00000000000000000E+00 ! Start
track.meas.fade.len (               $Trk_CriticalVelocity         ) = 0.00000000000000000E+00 ! Fade length
track.cart.horizontal.curvature.kind ( $Trk_CriticalVelocity      ) = 0                       ! 0=radius; 1=arc length; 2=chord length
track.cart.horizontal.curvature.reflen ( $Trk_CriticalVelocity    ) = 1.00000000000000000E+00 ! Reference length
track.cart.superelev.fromfile (     $Trk_CriticalVelocity         ) = 0                       ! Superelevation from file (cartographic track)
track.cart.superelev.kind (         $Trk_CriticalVelocity         ) = 2                       ! Superelevation kind (cartographic track)
track.cart.superelev.reflen (       $Trk_CriticalVelocity         ) = 1.50000000000000000E+00 ! Superelevation reference length (cartographic track)
track.cart.discr.gen (              $Trk_CriticalVelocity         ) = 1.00000000000000000E+00 ! Discr. gen
track.cart.discr.fine (             $Trk_CriticalVelocity         ) = 5.00000000000000000E-01 ! Discr. fine
track.txt (                         $Trk_CriticalVelocity         ) = '0.0 - 1.0s ：车辆在线自平衡[br]1.0 - 1.5s ：车辆运行[br]1.5 - 2.0s ：不平顺 Fade-in[br]2.0 - 3.0s ：不平顺激励输入[br]3.0 - 3.5s ：不平顺 Fade-out[br]3.5 - 10s ：车辆运行[br][br]' ! Comment
track.plot.par (          1 ,       $Trk_CriticalVelocity         ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   1 , $Trk_CriticalVelocity         ) = 3.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   2 , $Trk_CriticalVelocity         ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   3 , $Trk_CriticalVelocity         ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   4 , $Trk_CriticalVelocity         ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   5 , $Trk_CriticalVelocity         ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   6 , $Trk_CriticalVelocity         ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   6 ,   1 , $Trk_CriticalVelocity   ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   6 ,   1 ,   1 , $Trk_CriticalVelocity) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   6 ,   1 ,   2 , $Trk_CriticalVelocity) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 , $Trk_CriticalVelocity         ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,   1 ,   1 , $Trk_CriticalVelocity) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,   2 ,   1 , $Trk_CriticalVelocity) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,   3 , $Trk_CriticalVelocity   ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,   3 ,   1 , $Trk_CriticalVelocity) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,   3 ,   2 , $Trk_CriticalVelocity) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,   3 ,   3 , $Trk_CriticalVelocity) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,   4 ,   1 , $Trk_CriticalVelocity) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,   5 ,   1 , $Trk_CriticalVelocity) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,   6 ,   1 , $Trk_CriticalVelocity) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,   7 ,   1 , $Trk_CriticalVelocity) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,   8 ,   1 , $Trk_CriticalVelocity) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,   9 ,   1 , $Trk_CriticalVelocity) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,  10 ,   1 , $Trk_CriticalVelocity) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,  11 ,   1 , $Trk_CriticalVelocity) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,  12 ,   1 , $Trk_CriticalVelocity) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,  13 ,   1 , $Trk_CriticalVelocity) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,  14 ,   1 , $Trk_CriticalVelocity) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,  15 ,   1 , $Trk_CriticalVelocity) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,  16 ,   1 , $Trk_CriticalVelocity) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   8 , $Trk_CriticalVelocity         ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   8 ,   1 ,   1 , $Trk_CriticalVelocity) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   8 ,   2 ,   1 , $Trk_CriticalVelocity) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   8 ,   3 ,   1 , $Trk_CriticalVelocity) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   8 ,   4 ,   1 , $Trk_CriticalVelocity) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   9 , $Trk_CriticalVelocity         ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   9 ,   1 ,   1 , $Trk_CriticalVelocity) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   9 ,   2 ,   1 , $Trk_CriticalVelocity) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   9 ,   3 ,   1 , $Trk_CriticalVelocity) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,  10 , $Trk_CriticalVelocity         ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,  10 ,   1 ,   1 , $Trk_CriticalVelocity) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,  10 ,   2 ,   1 , $Trk_CriticalVelocity) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,  10 ,   3 ,   1 , $Trk_CriticalVelocity) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,  11 , $Trk_CriticalVelocity         ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,  11 ,   1 , $Trk_CriticalVelocity   ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,  11 ,   2 ,   1 , $Trk_CriticalVelocity) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,  11 ,   3 ,   1 , $Trk_CriticalVelocity) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,  11 ,   4 ,   1 , $Trk_CriticalVelocity) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.cart.h.type (       1 ,       $Trk_CriticalVelocity         ) = 1                       ! Type
track.cart.h.txt (        1 ,       $Trk_CriticalVelocity         ) = ''                      ! Comment
track.cart.h.par (        1 ,   1 , $Trk_CriticalVelocity         ) = 5.00000000000000000E+04 ! [m] L
track.cart.h.par (       10 ,   1 , $Trk_CriticalVelocity         ) = 1.50000000000000000E+00 ! [m] Lsmo/2
track.cart.v.type (       1 ,       $Trk_CriticalVelocity         ) = 201                     ! Type
track.cart.v.txt (        1 ,       $Trk_CriticalVelocity         ) = ''                      ! Comment
track.cart.v.par (        1 ,   1 , $Trk_CriticalVelocity         ) = 1.00000000000000000E+02 ! [m] L
track.cart.v.par (        2 ,   1 , $Trk_CriticalVelocity         ) = 0.00000000000000000E+00 ! [-] P
track.cart.v.par (       10 ,   1 , $Trk_CriticalVelocity         ) = 1.50000000000000000E+00 ! [m] Lsmo/2
track.cart.s.type (       1 ,       $Trk_CriticalVelocity         ) = 101                     ! Type
track.cart.s.txt (        1 ,       $Trk_CriticalVelocity         ) = ''                      ! Comment
track.cart.s.par (        1 ,   1 , $Trk_CriticalVelocity         ) = 1.00000000000000000E+02 ! [m] L
track.cart.s.par (        2 ,   1 , $Trk_CriticalVelocity         ) = 0.00000000000000000E+00 ! [m] U
track.cart.s.par (       10 ,   1 , $Trk_CriticalVelocity         ) = 1.50000000000000000E+00 ! [m] Lsmo/2

track.type (                        $Trk_AAR6_200kmph             ) = 2                       ! Type
track.kind (                        $Trk_AAR6_200kmph             ) = 1                       ! Kind
track.excit.lat (                   $Trk_AAR6_200kmph             ) = $E_AAR6_LAT             ! Track::EXC_TRACK_LATERAL
track.excit.vert (                  $Trk_AAR6_200kmph             ) = $E_AAR6_VER             ! Track::EXC_TRACK_VERTICAL
track.excit.roll (                  $Trk_AAR6_200kmph             ) = null                    ! Track::EXC_TRACK_ROLL
track.excit.left.lat (              $Trk_AAR6_200kmph             ) = null                    ! Track::EXC_RAIL_LATERAL_LEFT
track.excit.left.vert (             $Trk_AAR6_200kmph             ) = null                    ! Track::EXC_RAIL_VERTICAL_LEFT
track.excit.left.roll (             $Trk_AAR6_200kmph             ) = null                    ! Track::EXC_RAIL_ROLL_LEFT
track.excit.right.lat (             $Trk_AAR6_200kmph             ) = null                    ! Track::EXC_RAIL_LATERAL_RIGHT
track.excit.right.vert (            $Trk_AAR6_200kmph             ) = null                    ! Track::EXC_RAIL_VERTICAL_RIGHT
track.excit.right.roll (            $Trk_AAR6_200kmph             ) = null                    ! Track::EXC_RAIL_ROLL_RIGHT
track.excit.gauge (                 $Trk_AAR6_200kmph             ) = $E_AAR6_GAU             ! Track::EXC_TRACK_GAUGE
track.meas.superelev.kind (         $Trk_AAR6_200kmph             ) = 1                       ! Superelevation kind (measured track)
track.meas.superelev.reflen (       $Trk_AAR6_200kmph             ) = 1.50600000000000001E+00 ! Superelevation reference length (measured track)
track.meas.len (                    $Trk_AAR6_200kmph             ) = 0.00000000000000000E+00 ! Total measured length
track.meas.discr.fromfile (         $Trk_AAR6_200kmph             ) = 1                       ! Discretisation from file
track.meas.discr.num (              $Trk_AAR6_200kmph             ) = 0                       ! Number of discretisation points
track.cart.file (                   $Trk_AAR6_200kmph             ) = ''                      ! Cartographic filename
track.meas.file (                   $Trk_AAR6_200kmph             ) = ''                      ! Measured filename
track.crg.dir (                     $Trk_AAR6_200kmph             ) = ''                      ! CRG file directory
track.excit.type (                  $Trk_AAR6_200kmph             ) = 1                       ! Excitations type
track.excit.start (                 $Trk_AAR6_200kmph             ) = { (200/3.6) * 2 }       ! Excitations start
track.excit.end (                   $Trk_AAR6_200kmph             ) = 2.00000000000000000E+03 ! Excitations end
track.excit.fade.len (              $Trk_AAR6_200kmph             ) = { (200/3.6) * 2 }       ! Excitations fade in/out
track.meas.sec.start (              $Trk_AAR6_200kmph             ) = 0.00000000000000000E+00 ! Section start
track.meas.sec.end (                $Trk_AAR6_200kmph             ) = 0.00000000000000000E+00 ! Section end
track.meas.datared.fromfile (       $Trk_AAR6_200kmph             ) = 0                       ! Data reduction from file
track.meas.datared.incr (           $Trk_AAR6_200kmph             ) = 0                       ! Data increment
track.meas.curvature.datared (      $Trk_AAR6_200kmph             ) = 0                       ! Data reduction vertical curvature handling
track.meas.startend.fromexcit (     $Trk_AAR6_200kmph             ) = 0                       ! Start/End from excitation
track.meas.start (                  $Trk_AAR6_200kmph             ) = 0.00000000000000000E+00 ! Start
track.meas.fade.len (               $Trk_AAR6_200kmph             ) = 0.00000000000000000E+00 ! Fade length
track.cart.horizontal.curvature.kind ( $Trk_AAR6_200kmph          ) = 0                       ! 0=radius; 1=arc length; 2=chord length
track.cart.horizontal.curvature.reflen ( $Trk_AAR6_200kmph        ) = 1.00000000000000000E+00 ! Reference length
track.cart.superelev.fromfile (     $Trk_AAR6_200kmph             ) = 0                       ! Superelevation from file (cartographic track)
track.cart.superelev.kind (         $Trk_AAR6_200kmph             ) = 1                       ! Superelevation kind (cartographic track)
track.cart.superelev.reflen (       $Trk_AAR6_200kmph             ) = 1.50000000000000000E+00 ! Superelevation reference length (cartographic track)
track.cart.discr.gen (              $Trk_AAR6_200kmph             ) = 1.00000000000000000E+00 ! Discr. gen
track.cart.discr.fine (             $Trk_AAR6_200kmph             ) = 2.00000000000000011E-01 ! Discr. fine
track.txt (                         $Trk_AAR6_200kmph             ) = ''                      ! Comment
track.plot.par (          1 ,       $Trk_AAR6_200kmph             ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   1 , $Trk_AAR6_200kmph             ) = 3.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   2 , $Trk_AAR6_200kmph             ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   3 , $Trk_AAR6_200kmph             ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   4 , $Trk_AAR6_200kmph             ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   5 , $Trk_AAR6_200kmph             ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   6 , $Trk_AAR6_200kmph             ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   6 ,   1 , $Trk_AAR6_200kmph       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   6 ,   1 ,   1 , $Trk_AAR6_200kmph ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   6 ,   1 ,   2 , $Trk_AAR6_200kmph ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 , $Trk_AAR6_200kmph             ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,   1 ,   1 , $Trk_AAR6_200kmph ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,   2 ,   1 , $Trk_AAR6_200kmph ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,   3 , $Trk_AAR6_200kmph       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,   3 ,   1 , $Trk_AAR6_200kmph ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,   3 ,   2 , $Trk_AAR6_200kmph ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,   3 ,   3 , $Trk_AAR6_200kmph ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,   4 ,   1 , $Trk_AAR6_200kmph ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,   5 ,   1 , $Trk_AAR6_200kmph ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,   6 ,   1 , $Trk_AAR6_200kmph ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,   7 ,   1 , $Trk_AAR6_200kmph ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,   8 ,   1 , $Trk_AAR6_200kmph ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,   9 ,   1 , $Trk_AAR6_200kmph ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,  10 ,   1 , $Trk_AAR6_200kmph ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,  11 ,   1 , $Trk_AAR6_200kmph ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,  12 ,   1 , $Trk_AAR6_200kmph ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,  13 ,   1 , $Trk_AAR6_200kmph ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,  14 ,   1 , $Trk_AAR6_200kmph ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,  15 ,   1 , $Trk_AAR6_200kmph ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,  16 ,   1 , $Trk_AAR6_200kmph ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   8 , $Trk_AAR6_200kmph             ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   8 ,   1 ,   1 , $Trk_AAR6_200kmph ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   8 ,   2 ,   1 , $Trk_AAR6_200kmph ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   8 ,   3 ,   1 , $Trk_AAR6_200kmph ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   9 , $Trk_AAR6_200kmph             ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   9 ,   1 ,   1 , $Trk_AAR6_200kmph ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   9 ,   2 ,   1 , $Trk_AAR6_200kmph ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   9 ,   3 ,   1 , $Trk_AAR6_200kmph ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,  10 , $Trk_AAR6_200kmph             ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,  10 ,   1 ,   1 , $Trk_AAR6_200kmph ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,  10 ,   2 ,   1 , $Trk_AAR6_200kmph ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,  10 ,   3 ,   1 , $Trk_AAR6_200kmph ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,  11 , $Trk_AAR6_200kmph             ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,  11 ,   1 , $Trk_AAR6_200kmph       ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,  11 ,   2 ,   1 , $Trk_AAR6_200kmph ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,  11 ,   3 ,   1 , $Trk_AAR6_200kmph ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,  11 ,   4 ,   1 , $Trk_AAR6_200kmph ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.cart.h.type (       1 ,       $Trk_AAR6_200kmph             ) = 1                       ! Type
track.cart.h.par (        1 ,   1 , $Trk_AAR6_200kmph             ) = 2.50000000000000000E+03 ! [m] L
track.cart.h.par (       10 ,   1 , $Trk_AAR6_200kmph             ) = 1.50000000000000000E+00 ! [m] Lsmo/2
track.cart.v.type (       1 ,       $Trk_AAR6_200kmph             ) = 201                     ! Type
track.cart.v.par (        1 ,   1 , $Trk_AAR6_200kmph             ) = 1.00000000000000000E+02 ! [m] L
track.cart.v.par (        2 ,   1 , $Trk_AAR6_200kmph             ) = 0.00000000000000000E+00 ! [-] P
track.cart.v.par (       10 ,   1 , $Trk_AAR6_200kmph             ) = 1.50000000000000000E+00 ! [m] Lsmo/2
track.cart.s.type (       1 ,       $Trk_AAR6_200kmph             ) = 101                     ! Type
track.cart.s.par (        1 ,   1 , $Trk_AAR6_200kmph             ) = 1.00000000000000000E+02 ! [m] L
track.cart.s.par (        2 ,   1 , $Trk_AAR6_200kmph             ) = 0.00000000000000000E+00 ! [m] U
track.cart.s.par (       10 ,   1 , $Trk_AAR6_200kmph             ) = 1.50000000000000000E+00 ! [m] Lsmo/2
track.cart.w.type (       1 ,       $Trk_AAR6_200kmph             ) = 301                     ! Type
track.cart.w.par (        1 ,   1 , $Trk_AAR6_200kmph             ) = 1.00000000000000000E+02 ! [m] L
track.cart.w.par (        2 ,   1 , $Trk_AAR6_200kmph             ) = 0.00000000000000000E+00 ! [m] W
track.cart.w.par (       10 ,   1 , $Trk_AAR6_200kmph             ) = 0.00000000000000000E+00 ! [m] Lsmo/2

track.type (                        $Trk_AAR5_80kmph              ) = 2                       ! Type
track.kind (                        $Trk_AAR5_80kmph              ) = 1                       ! Kind
track.excit.lat (                   $Trk_AAR5_80kmph              ) = $E_AAR5_LAT             ! Track::EXC_TRACK_LATERAL
track.excit.vert (                  $Trk_AAR5_80kmph              ) = $E_AAR5_VER             ! Track::EXC_TRACK_VERTICAL
track.excit.roll (                  $Trk_AAR5_80kmph              ) = null                    ! Track::EXC_TRACK_ROLL
track.excit.left.lat (              $Trk_AAR5_80kmph              ) = null                    ! Track::EXC_RAIL_LATERAL_LEFT
track.excit.left.vert (             $Trk_AAR5_80kmph              ) = null                    ! Track::EXC_RAIL_VERTICAL_LEFT
track.excit.left.roll (             $Trk_AAR5_80kmph              ) = null                    ! Track::EXC_RAIL_ROLL_LEFT
track.excit.right.lat (             $Trk_AAR5_80kmph              ) = null                    ! Track::EXC_RAIL_LATERAL_RIGHT
track.excit.right.vert (            $Trk_AAR5_80kmph              ) = null                    ! Track::EXC_RAIL_VERTICAL_RIGHT
track.excit.right.roll (            $Trk_AAR5_80kmph              ) = null                    ! Track::EXC_RAIL_ROLL_RIGHT
track.excit.gauge (                 $Trk_AAR5_80kmph              ) = $E_AAR5_GAU             ! Track::EXC_TRACK_GAUGE
track.meas.superelev.kind (         $Trk_AAR5_80kmph              ) = 1                       ! Superelevation kind (measured track)
track.meas.superelev.reflen (       $Trk_AAR5_80kmph              ) = 1.50600000000000001E+00 ! Superelevation reference length (measured track)
track.meas.len (                    $Trk_AAR5_80kmph              ) = 0.00000000000000000E+00 ! Total measured length
track.meas.discr.fromfile (         $Trk_AAR5_80kmph              ) = 1                       ! Discretisation from file
track.meas.discr.num (              $Trk_AAR5_80kmph              ) = 0                       ! Number of discretisation points
track.cart.file (                   $Trk_AAR5_80kmph              ) = ''                      ! Cartographic filename
track.meas.file (                   $Trk_AAR5_80kmph              ) = ''                      ! Measured filename
track.crg.dir (                     $Trk_AAR5_80kmph              ) = ''                      ! CRG file directory
track.excit.type (                  $Trk_AAR5_80kmph              ) = 1                       ! Excitations type
track.excit.start (                 $Trk_AAR5_80kmph              ) = { (80/3.6) * 2 }        ! Excitations start
track.excit.end (                   $Trk_AAR5_80kmph              ) = 2.00000000000000000E+03 ! Excitations end
track.excit.fade.len (              $Trk_AAR5_80kmph              ) = { (80/3.6) * 2 }        ! Excitations fade in/out
track.meas.sec.start (              $Trk_AAR5_80kmph              ) = 0.00000000000000000E+00 ! Section start
track.meas.sec.end (                $Trk_AAR5_80kmph              ) = 0.00000000000000000E+00 ! Section end
track.meas.datared.fromfile (       $Trk_AAR5_80kmph              ) = 0                       ! Data reduction from file
track.meas.datared.incr (           $Trk_AAR5_80kmph              ) = 0                       ! Data increment
track.meas.curvature.datared (      $Trk_AAR5_80kmph              ) = 0                       ! Data reduction vertical curvature handling
track.meas.startend.fromexcit (     $Trk_AAR5_80kmph              ) = 0                       ! Start/End from excitation
track.meas.start (                  $Trk_AAR5_80kmph              ) = 0.00000000000000000E+00 ! Start
track.meas.fade.len (               $Trk_AAR5_80kmph              ) = 0.00000000000000000E+00 ! Fade length
track.cart.horizontal.curvature.kind ( $Trk_AAR5_80kmph           ) = 0                       ! 0=radius; 1=arc length; 2=chord length
track.cart.horizontal.curvature.reflen ( $Trk_AAR5_80kmph         ) = 1.00000000000000000E+00 ! Reference length
track.cart.superelev.fromfile (     $Trk_AAR5_80kmph              ) = 0                       ! Superelevation from file (cartographic track)
track.cart.superelev.kind (         $Trk_AAR5_80kmph              ) = 1                       ! Superelevation kind (cartographic track)
track.cart.superelev.reflen (       $Trk_AAR5_80kmph              ) = 1.50000000000000000E+00 ! Superelevation reference length (cartographic track)
track.cart.discr.gen (              $Trk_AAR5_80kmph              ) = 1.00000000000000000E+00 ! Discr. gen
track.cart.discr.fine (             $Trk_AAR5_80kmph              ) = 2.00000000000000011E-01 ! Discr. fine
track.txt (                         $Trk_AAR5_80kmph              ) = ''                      ! Comment
track.plot.par (          1 ,       $Trk_AAR5_80kmph              ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   1 , $Trk_AAR5_80kmph              ) = 3.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   2 , $Trk_AAR5_80kmph              ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   3 , $Trk_AAR5_80kmph              ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   4 , $Trk_AAR5_80kmph              ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   5 , $Trk_AAR5_80kmph              ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   6 , $Trk_AAR5_80kmph              ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   6 ,   1 , $Trk_AAR5_80kmph        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   6 ,   1 ,   1 , $Trk_AAR5_80kmph  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   6 ,   1 ,   2 , $Trk_AAR5_80kmph  ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 , $Trk_AAR5_80kmph              ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,   1 ,   1 , $Trk_AAR5_80kmph  ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,   2 ,   1 , $Trk_AAR5_80kmph  ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,   3 , $Trk_AAR5_80kmph        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,   3 ,   1 , $Trk_AAR5_80kmph  ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,   3 ,   2 , $Trk_AAR5_80kmph  ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,   3 ,   3 , $Trk_AAR5_80kmph  ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,   4 ,   1 , $Trk_AAR5_80kmph  ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,   5 ,   1 , $Trk_AAR5_80kmph  ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,   6 ,   1 , $Trk_AAR5_80kmph  ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,   7 ,   1 , $Trk_AAR5_80kmph  ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,   8 ,   1 , $Trk_AAR5_80kmph  ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,   9 ,   1 , $Trk_AAR5_80kmph  ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,  10 ,   1 , $Trk_AAR5_80kmph  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,  11 ,   1 , $Trk_AAR5_80kmph  ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,  12 ,   1 , $Trk_AAR5_80kmph  ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,  13 ,   1 , $Trk_AAR5_80kmph  ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,  14 ,   1 , $Trk_AAR5_80kmph  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,  15 ,   1 , $Trk_AAR5_80kmph  ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,  16 ,   1 , $Trk_AAR5_80kmph  ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   8 , $Trk_AAR5_80kmph              ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   8 ,   1 ,   1 , $Trk_AAR5_80kmph  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   8 ,   2 ,   1 , $Trk_AAR5_80kmph  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   8 ,   3 ,   1 , $Trk_AAR5_80kmph  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   9 , $Trk_AAR5_80kmph              ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   9 ,   1 ,   1 , $Trk_AAR5_80kmph  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   9 ,   2 ,   1 , $Trk_AAR5_80kmph  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   9 ,   3 ,   1 , $Trk_AAR5_80kmph  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,  10 , $Trk_AAR5_80kmph              ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,  10 ,   1 ,   1 , $Trk_AAR5_80kmph  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,  10 ,   2 ,   1 , $Trk_AAR5_80kmph  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,  10 ,   3 ,   1 , $Trk_AAR5_80kmph  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,  11 , $Trk_AAR5_80kmph              ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,  11 ,   1 , $Trk_AAR5_80kmph        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,  11 ,   2 ,   1 , $Trk_AAR5_80kmph  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,  11 ,   3 ,   1 , $Trk_AAR5_80kmph  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,  11 ,   4 ,   1 , $Trk_AAR5_80kmph  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.cart.h.type (       1 ,       $Trk_AAR5_80kmph              ) = 1                       ! Type
track.cart.h.par (        1 ,   1 , $Trk_AAR5_80kmph              ) = 4.00000000000000000E+03 ! [m] L
track.cart.h.par (       10 ,   1 , $Trk_AAR5_80kmph              ) = 1.50000000000000000E+00 ! [m] Lsmo/2
track.cart.v.type (       1 ,       $Trk_AAR5_80kmph              ) = 201                     ! Type
track.cart.v.par (        1 ,   1 , $Trk_AAR5_80kmph              ) = 1.00000000000000000E+02 ! [m] L
track.cart.v.par (        2 ,   1 , $Trk_AAR5_80kmph              ) = 0.00000000000000000E+00 ! [-] P
track.cart.v.par (       10 ,   1 , $Trk_AAR5_80kmph              ) = 1.50000000000000000E+00 ! [m] Lsmo/2
track.cart.s.type (       1 ,       $Trk_AAR5_80kmph              ) = 101                     ! Type
track.cart.s.par (        1 ,   1 , $Trk_AAR5_80kmph              ) = 1.00000000000000000E+02 ! [m] L
track.cart.s.par (        2 ,   1 , $Trk_AAR5_80kmph              ) = 0.00000000000000000E+00 ! [m] U
track.cart.s.par (       10 ,   1 , $Trk_AAR5_80kmph              ) = 1.50000000000000000E+00 ! [m] Lsmo/2
track.cart.w.type (       1 ,       $Trk_AAR5_80kmph              ) = 301                     ! Type
track.cart.w.par (        1 ,   1 , $Trk_AAR5_80kmph              ) = 1.00000000000000000E+02 ! [m] L
track.cart.w.par (        2 ,   1 , $Trk_AAR5_80kmph              ) = 0.00000000000000000E+00 ! [m] W
track.cart.w.par (       10 ,   1 , $Trk_AAR5_80kmph              ) = 0.00000000000000000E+00 ! [m] Lsmo/2

track.type (                        $Trk_Curve_R300m_60kmph       ) = 2                       ! Type
track.kind (                        $Trk_Curve_R300m_60kmph       ) = 1                       ! Kind
track.excit.lat (                   $Trk_Curve_R300m_60kmph       ) = $E_AAR5_LAT             ! Track::EXC_TRACK_LATERAL
track.excit.vert (                  $Trk_Curve_R300m_60kmph       ) = $E_AAR5_VER             ! Track::EXC_TRACK_VERTICAL
track.excit.roll (                  $Trk_Curve_R300m_60kmph       ) = null                    ! Track::EXC_TRACK_ROLL
track.excit.left.lat (              $Trk_Curve_R300m_60kmph       ) = null                    ! Track::EXC_RAIL_LATERAL_LEFT
track.excit.left.vert (             $Trk_Curve_R300m_60kmph       ) = null                    ! Track::EXC_RAIL_VERTICAL_LEFT
track.excit.left.roll (             $Trk_Curve_R300m_60kmph       ) = null                    ! Track::EXC_RAIL_ROLL_LEFT
track.excit.right.lat (             $Trk_Curve_R300m_60kmph       ) = null                    ! Track::EXC_RAIL_LATERAL_RIGHT
track.excit.right.vert (            $Trk_Curve_R300m_60kmph       ) = null                    ! Track::EXC_RAIL_VERTICAL_RIGHT
track.excit.right.roll (            $Trk_Curve_R300m_60kmph       ) = null                    ! Track::EXC_RAIL_ROLL_RIGHT
track.excit.gauge (                 $Trk_Curve_R300m_60kmph       ) = $E_AAR5_GAU             ! Track::EXC_TRACK_GAUGE
track.meas.superelev.kind (         $Trk_Curve_R300m_60kmph       ) = 1                       ! Superelevation kind (measured track)
track.meas.superelev.reflen (       $Trk_Curve_R300m_60kmph       ) = 1.50600000000000001E+00 ! Superelevation reference length (measured track)
track.meas.len (                    $Trk_Curve_R300m_60kmph       ) = 0.00000000000000000E+00 ! Total measured length
track.meas.discr.fromfile (         $Trk_Curve_R300m_60kmph       ) = 1                       ! Discretisation from file
track.meas.discr.num (              $Trk_Curve_R300m_60kmph       ) = 0                       ! Number of discretisation points
track.cart.file (                   $Trk_Curve_R300m_60kmph       ) = ''                      ! Cartographic filename
track.meas.file (                   $Trk_Curve_R300m_60kmph       ) = ''                      ! Measured filename
track.crg.dir (                     $Trk_Curve_R300m_60kmph       ) = ''                      ! CRG file directory
track.excit.type (                  $Trk_Curve_R300m_60kmph       ) = 1                       ! Excitations type
track.excit.start (                 $Trk_Curve_R300m_60kmph       ) = 2.00000000000000000E+01 ! Excitations start
track.excit.end (                   $Trk_Curve_R300m_60kmph       ) = 1.00000000000000000E+03 ! Excitations end
track.excit.fade.len (              $Trk_Curve_R300m_60kmph       ) = 6.00000000000000000E+01 ! Excitations fade in/out
track.meas.sec.start (              $Trk_Curve_R300m_60kmph       ) = 0.00000000000000000E+00 ! Section start
track.meas.sec.end (                $Trk_Curve_R300m_60kmph       ) = 0.00000000000000000E+00 ! Section end
track.meas.datared.fromfile (       $Trk_Curve_R300m_60kmph       ) = 0                       ! Data reduction from file
track.meas.datared.incr (           $Trk_Curve_R300m_60kmph       ) = 0                       ! Data increment
track.meas.curvature.datared (      $Trk_Curve_R300m_60kmph       ) = 0                       ! Data reduction vertical curvature handling
track.meas.startend.fromexcit (     $Trk_Curve_R300m_60kmph       ) = 0                       ! Start/End from excitation
track.meas.start (                  $Trk_Curve_R300m_60kmph       ) = 0.00000000000000000E+00 ! Start
track.meas.fade.len (               $Trk_Curve_R300m_60kmph       ) = 0.00000000000000000E+00 ! Fade length
track.cart.horizontal.curvature.kind ( $Trk_Curve_R300m_60kmph    ) = 0                       ! 0=radius; 1=arc length; 2=chord length
track.cart.horizontal.curvature.reflen ( $Trk_Curve_R300m_60kmph  ) = 1.00000000000000000E+00 ! Reference length
track.cart.superelev.fromfile (     $Trk_Curve_R300m_60kmph       ) = 0                       ! Superelevation from file (cartographic track)
track.cart.superelev.kind (         $Trk_Curve_R300m_60kmph       ) = 1                       ! Superelevation kind (cartographic track)
track.cart.superelev.reflen (       $Trk_Curve_R300m_60kmph       ) = 1.50000000000000000E+00 ! Superelevation reference length (cartographic track)
track.cart.discr.gen (              $Trk_Curve_R300m_60kmph       ) = 1.00000000000000006E-01 ! Discr. gen
track.cart.discr.fine (             $Trk_Curve_R300m_60kmph       ) = 5.00000000000000028E-02 ! Discr. fine
track.txt (                         $Trk_Curve_R300m_60kmph       ) = ''                      ! Comment
track.plot.par (          1 ,       $Trk_Curve_R300m_60kmph       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   1 , $Trk_Curve_R300m_60kmph       ) = 3.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   2 , $Trk_Curve_R300m_60kmph       ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   3 , $Trk_Curve_R300m_60kmph       ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   4 , $Trk_Curve_R300m_60kmph       ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   5 , $Trk_Curve_R300m_60kmph       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   6 , $Trk_Curve_R300m_60kmph       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   6 ,   1 , $Trk_Curve_R300m_60kmph ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   6 ,   1 ,   1 , $Trk_Curve_R300m_60kmph) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   6 ,   1 ,   2 , $Trk_Curve_R300m_60kmph) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 , $Trk_Curve_R300m_60kmph       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,   1 ,   1 , $Trk_Curve_R300m_60kmph) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,   2 ,   1 , $Trk_Curve_R300m_60kmph) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,   3 , $Trk_Curve_R300m_60kmph ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,   3 ,   1 , $Trk_Curve_R300m_60kmph) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,   3 ,   2 , $Trk_Curve_R300m_60kmph) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,   3 ,   3 , $Trk_Curve_R300m_60kmph) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,   4 ,   1 , $Trk_Curve_R300m_60kmph) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,   5 ,   1 , $Trk_Curve_R300m_60kmph) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,   6 ,   1 , $Trk_Curve_R300m_60kmph) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,   7 ,   1 , $Trk_Curve_R300m_60kmph) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,   8 ,   1 , $Trk_Curve_R300m_60kmph) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,   9 ,   1 , $Trk_Curve_R300m_60kmph) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,  10 ,   1 , $Trk_Curve_R300m_60kmph) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,  11 ,   1 , $Trk_Curve_R300m_60kmph) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,  12 ,   1 , $Trk_Curve_R300m_60kmph) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,  13 ,   1 , $Trk_Curve_R300m_60kmph) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,  14 ,   1 , $Trk_Curve_R300m_60kmph) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,  15 ,   1 , $Trk_Curve_R300m_60kmph) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   7 ,  16 ,   1 , $Trk_Curve_R300m_60kmph) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   8 , $Trk_Curve_R300m_60kmph       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   8 ,   1 ,   1 , $Trk_Curve_R300m_60kmph) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   8 ,   2 ,   1 , $Trk_Curve_R300m_60kmph) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   8 ,   3 ,   1 , $Trk_Curve_R300m_60kmph) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   8 ,   4 ,   1 , $Trk_Curve_R300m_60kmph) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   9 , $Trk_Curve_R300m_60kmph       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   9 ,   1 ,   1 , $Trk_Curve_R300m_60kmph) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   9 ,   2 ,   1 , $Trk_Curve_R300m_60kmph) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,   9 ,   3 ,   1 , $Trk_Curve_R300m_60kmph) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,  10 , $Trk_Curve_R300m_60kmph       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,  10 ,   1 ,   1 , $Trk_Curve_R300m_60kmph) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,  10 ,   2 ,   1 , $Trk_Curve_R300m_60kmph) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,  10 ,   3 ,   1 , $Trk_Curve_R300m_60kmph) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,  11 , $Trk_Curve_R300m_60kmph       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,  11 ,   1 , $Trk_Curve_R300m_60kmph ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,  11 ,   2 ,   1 , $Trk_Curve_R300m_60kmph) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,  11 ,   3 ,   1 , $Trk_Curve_R300m_60kmph) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.plot.par (          1 ,  11 ,   4 ,   1 , $Trk_Curve_R300m_60kmph) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
track.cart.h.type (       1 ,       $Trk_Curve_R300m_60kmph       ) = 1                       ! Type
track.cart.h.par (        1 ,   1 , $Trk_Curve_R300m_60kmph       ) = 5.00000000000000000E+01 ! [m] L
track.cart.h.par (       10 ,   1 , $Trk_Curve_R300m_60kmph       ) = 1.50000000000000000E+00 ! [m] Lsmo/2
track.cart.h.type (       2 ,       $Trk_Curve_R300m_60kmph       ) = 4                       ! Type
track.cart.h.txt (        2 ,       $Trk_Curve_R300m_60kmph       ) = ''                      ! Comment
track.cart.h.par (        1 ,   2 , $Trk_Curve_R300m_60kmph       ) = 5.00000000000000000E+01 ! [m] L
track.cart.h.par (        2 ,   2 , $Trk_Curve_R300m_60kmph       ) = 0.00000000000000000E+00 ! [m] R1
track.cart.h.par (        3 ,   2 , $Trk_Curve_R300m_60kmph       ) = 3.00000000000000000E+02 ! [m] R2
track.cart.h.par (       10 ,   2 , $Trk_Curve_R300m_60kmph       ) = 1.50000000000000000E+00 ! [m] Lsmo/2
track.cart.h.type (       3 ,       $Trk_Curve_R300m_60kmph       ) = 2                       ! Type
track.cart.h.txt (        3 ,       $Trk_Curve_R300m_60kmph       ) = ''                      ! Comment
track.cart.h.par (        1 ,   3 , $Trk_Curve_R300m_60kmph       ) = 1.00000000000000000E+03 ! [m] L
track.cart.h.par (        2 ,   3 , $Trk_Curve_R300m_60kmph       ) = 3.00000000000000000E+02 ! [m] R
track.cart.h.par (       10 ,   3 , $Trk_Curve_R300m_60kmph       ) = 1.50000000000000000E+00 ! [m] Lsmo/2
track.cart.h.type (       4 ,       $Trk_Curve_R300m_60kmph       ) = 4                       ! Type
track.cart.h.txt (        4 ,       $Trk_Curve_R300m_60kmph       ) = ''                      ! Comment
track.cart.h.par (        1 ,   4 , $Trk_Curve_R300m_60kmph       ) = 5.00000000000000000E+01 ! [m] L
track.cart.h.par (        2 ,   4 , $Trk_Curve_R300m_60kmph       ) = 3.00000000000000000E+02 ! [m] R1
track.cart.h.par (        3 ,   4 , $Trk_Curve_R300m_60kmph       ) = 0.00000000000000000E+00 ! [m] R2
track.cart.h.par (       10 ,   4 , $Trk_Curve_R300m_60kmph       ) = 1.50000000000000000E+00 ! [m] Lsmo/2
track.cart.h.type (       5 ,       $Trk_Curve_R300m_60kmph       ) = 1                       ! Type
track.cart.h.txt (        5 ,       $Trk_Curve_R300m_60kmph       ) = ''                      ! Comment
track.cart.h.par (        1 ,   5 , $Trk_Curve_R300m_60kmph       ) = 5.00000000000000000E+02 ! [m] L
track.cart.h.par (       10 ,   5 , $Trk_Curve_R300m_60kmph       ) = 1.50000000000000000E+00 ! [m] Lsmo/2
track.cart.v.type (       1 ,       $Trk_Curve_R300m_60kmph       ) = 201                     ! Type
track.cart.v.par (        1 ,   1 , $Trk_Curve_R300m_60kmph       ) = 1.00000000000000000E+02 ! [m] L
track.cart.v.par (        2 ,   1 , $Trk_Curve_R300m_60kmph       ) = 0.00000000000000000E+00 ! [-] P
track.cart.v.par (       10 ,   1 , $Trk_Curve_R300m_60kmph       ) = 1.50000000000000000E+00 ! [m] Lsmo/2
track.cart.s.type (       1 ,       $Trk_Curve_R300m_60kmph       ) = 101                     ! Type
track.cart.s.par (        1 ,   1 , $Trk_Curve_R300m_60kmph       ) = 5.00000000000000000E+01 ! [m] L
track.cart.s.par (        2 ,   1 , $Trk_Curve_R300m_60kmph       ) = 0.00000000000000000E+00 ! [m] U
track.cart.s.par (       10 ,   1 , $Trk_Curve_R300m_60kmph       ) = 1.50000000000000000E+00 ! [m] Lsmo/2
track.cart.s.type (       2 ,       $Trk_Curve_R300m_60kmph       ) = 103                     ! Type
track.cart.s.txt (        2 ,       $Trk_Curve_R300m_60kmph       ) = ''                      ! Comment
track.cart.s.par (        1 ,   2 , $Trk_Curve_R300m_60kmph       ) = 5.00000000000000000E+01 ! [m] L
track.cart.s.par (        2 ,   2 , $Trk_Curve_R300m_60kmph       ) = 0.00000000000000000E+00 ! [m] U1
track.cart.s.par (        3 ,   2 , $Trk_Curve_R300m_60kmph       ) = 1.19999999999999996E-01 ! [m] U2
track.cart.s.par (       10 ,   2 , $Trk_Curve_R300m_60kmph       ) = 1.50000000000000000E+00 ! [m] Lsmo/2
track.cart.s.type (       3 ,       $Trk_Curve_R300m_60kmph       ) = 101                     ! Type
track.cart.s.txt (        3 ,       $Trk_Curve_R300m_60kmph       ) = ''                      ! Comment
track.cart.s.par (        1 ,   3 , $Trk_Curve_R300m_60kmph       ) = 1.00000000000000000E+03 ! [m] L
track.cart.s.par (        2 ,   3 , $Trk_Curve_R300m_60kmph       ) = 1.19999999999999996E-01 ! [m] U
track.cart.s.par (       10 ,   3 , $Trk_Curve_R300m_60kmph       ) = 1.50000000000000000E+00 ! [m] Lsmo/2
track.cart.s.type (       4 ,       $Trk_Curve_R300m_60kmph       ) = 103                     ! Type
track.cart.s.txt (        4 ,       $Trk_Curve_R300m_60kmph       ) = ''                      ! Comment
track.cart.s.par (        1 ,   4 , $Trk_Curve_R300m_60kmph       ) = 5.00000000000000000E+01 ! [m] L
track.cart.s.par (        2 ,   4 , $Trk_Curve_R300m_60kmph       ) = 1.19999999999999996E-01 ! [m] U1
track.cart.s.par (        3 ,   4 , $Trk_Curve_R300m_60kmph       ) = 0.00000000000000000E+00 ! [m] U2
track.cart.s.par (       10 ,   4 , $Trk_Curve_R300m_60kmph       ) = 1.50000000000000000E+00 ! [m] Lsmo/2
track.cart.s.type (       5 ,       $Trk_Curve_R300m_60kmph       ) = 101                     ! Type
track.cart.s.txt (        5 ,       $Trk_Curve_R300m_60kmph       ) = ''                      ! Comment
track.cart.s.par (        1 ,   5 , $Trk_Curve_R300m_60kmph       ) = 5.00000000000000000E+02 ! [m] L
track.cart.s.par (        2 ,   5 , $Trk_Curve_R300m_60kmph       ) = 0.00000000000000000E+00 ! [m] U
track.cart.s.par (       10 ,   5 , $Trk_Curve_R300m_60kmph       ) = 1.50000000000000000E+00 ! [m] Lsmo/2
track.cart.w.type (       1 ,       $Trk_Curve_R300m_60kmph       ) = 301                     ! Type
track.cart.w.par (        1 ,   1 , $Trk_Curve_R300m_60kmph       ) = 1.00000000000000000E+02 ! [m] L
track.cart.w.par (        2 ,   1 , $Trk_Curve_R300m_60kmph       ) = 0.00000000000000000E+00 ! [m] W
track.cart.w.par (       10 ,   1 , $Trk_Curve_R300m_60kmph       ) = 0.00000000000000000E+00 ! [m] Lsmo/2

!**********************************************************************
! Excitations
!**********************************************************************
excit.type (                        $E_Vehicle_RefVelX            ) = 4                       ! Type
excit.txt (                         $E_Vehicle_RefVelX            ) = '纵向参考速度，覆盖子装配体的相关设置[br]3、6应保持一致，均为稳态运行速度；[br]5、7应保持一致，均为定速切换时间点' ! Comment
excit.par (               1 ,       $E_Vehicle_RefVelX            ) = 1.00000000000000000E+00 ! [-] Number of position switches
excit.par (               2 ,       $E_Vehicle_RefVelX            ) = $_VehicleVelCtrl_StartVel ! [-] f_Begin(1)
excit.par (               3 ,       $E_Vehicle_RefVelX            ) = $_VehicleVelCtrl_EndVel ! [-] f_End(  1)
excit.par (               4 ,       $E_Vehicle_RefVelX            ) = 0.00000000000000000E+00 ! [s] t_Begin(1)
excit.par (               5 ,       $E_Vehicle_RefVelX            ) = $_VehicleVelCtrl_Time   ! [s] t_End(  1)
excit.par (               6 ,       $E_Vehicle_RefVelX            ) = $_VehicleVelCtrl_EndVel ! [-] f_End(  2)
excit.par (               7 ,       $E_Vehicle_RefVelX            ) = $_VehicleVelCtrl_Time   ! [s] t_Begin(2)
excit.par (               8 ,       $E_Vehicle_RefVelX            ) = 0.00000000000000000E+00 ! [s] t_End(  2)
excit.par (               9 ,       $E_Vehicle_RefVelX            ) = 0.00000000000000000E+00 ! [-] f_End(  3)
excit.par (              10 ,       $E_Vehicle_RefVelX            ) = 0.00000000000000000E+00 ! [s] t_Begin(3)
excit.par (              11 ,       $E_Vehicle_RefVelX            ) = 0.00000000000000000E+00 ! [s] t_End(  3)
excit.par (              12 ,       $E_Vehicle_RefVelX            ) = 0.00000000000000000E+00 ! [-] f_End(  4)
excit.par (              13 ,       $E_Vehicle_RefVelX            ) = 0.00000000000000000E+00 ! [s] t_Begin(4)
excit.par (              14 ,       $E_Vehicle_RefVelX            ) = 0.00000000000000000E+00 ! [s] t_End(  4)
excit.par (              15 ,       $E_Vehicle_RefVelX            ) = 0.00000000000000000E+00 ! [-] Repeat sequence
excit.par (              16 ,       $E_Vehicle_RefVelX            ) = 0.00000000000000000E+00 ! [-] Repeat offset Delta-f
excit.par (              17 ,       $E_Vehicle_RefVelX            ) = 0.00000000000000000E+00 ! [s] Repeat offset Delta-t (>0)
excit.plot.par (          1 ,       $E_Vehicle_RefVelX            ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   1 , $E_Vehicle_RefVelX            ) = 1.02400000000000000E+03 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   2 , $E_Vehicle_RefVelX            ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   3 , $E_Vehicle_RefVelX            ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   4 , $E_Vehicle_RefVelX            ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   5 , $E_Vehicle_RefVelX            ) = 8.00000000000000000E+01 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   6 ,   1 , $E_Vehicle_RefVelX      ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   7 ,   1 , $E_Vehicle_RefVelX      ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   8 ,   1 , $E_Vehicle_RefVelX      ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter

excit.type (                        $E_Vehicle_RefVelX_LeftWheels ) = 4                       ! Type
excit.txt (                         $E_Vehicle_RefVelX_LeftWheels ) = '(60/3.6)/300*(300+1.5/2)[br]降低至：16.6123[br][br]' ! Comment
excit.par (               1 ,       $E_Vehicle_RefVelX_LeftWheels ) = 2.00000000000000000E+00 ! [-] Number of position switches
excit.par (               2 ,       $E_Vehicle_RefVelX_LeftWheels ) = { 60/3.6 }              ! [-] f_Begin(1)
excit.par (               3 ,       $E_Vehicle_RefVelX_LeftWheels ) = { 60/3.6 }              ! [-] f_End(  1)
excit.par (               4 ,       $E_Vehicle_RefVelX_LeftWheels ) = 0.00000000000000000E+00 ! [s] t_Begin(1)
excit.par (               5 ,       $E_Vehicle_RefVelX_LeftWheels ) = 3.00000000000000000E+00 ! [s] t_End(  1)
excit.par (               6 ,       $E_Vehicle_RefVelX_LeftWheels ) = { (60/3.6)/300*(300+1.5/2) } ! [-] f_End(  2)
excit.par (               7 ,       $E_Vehicle_RefVelX_LeftWheels ) = 3.00000000000000000E+00 ! [s] t_Begin(2)
excit.par (               8 ,       $E_Vehicle_RefVelX_LeftWheels ) = 6.00000000000000000E+00 ! [s] t_End(  2)
excit.par (               9 ,       $E_Vehicle_RefVelX_LeftWheels ) = { (60/3.6)/300*(300+1.5/2) } ! [-] f_End(  3)
excit.par (              10 ,       $E_Vehicle_RefVelX_LeftWheels ) = 6.00000000000000000E+00 ! [s] t_Begin(3)
excit.par (              11 ,       $E_Vehicle_RefVelX_LeftWheels ) = 0.00000000000000000E+00 ! [s] t_End(  3)
excit.par (              12 ,       $E_Vehicle_RefVelX_LeftWheels ) = 0.00000000000000000E+00 ! [-] f_End(  4)
excit.par (              13 ,       $E_Vehicle_RefVelX_LeftWheels ) = 0.00000000000000000E+00 ! [s] t_Begin(4)
excit.par (              14 ,       $E_Vehicle_RefVelX_LeftWheels ) = 0.00000000000000000E+00 ! [s] t_End(  4)
excit.par (              15 ,       $E_Vehicle_RefVelX_LeftWheels ) = 0.00000000000000000E+00 ! [-] Repeat sequence
excit.par (              16 ,       $E_Vehicle_RefVelX_LeftWheels ) = 0.00000000000000000E+00 ! [-] Repeat offset Delta-f
excit.par (              17 ,       $E_Vehicle_RefVelX_LeftWheels ) = 0.00000000000000000E+00 ! [s] Repeat offset Delta-t (>0)
excit.plot.par (          1 ,       $E_Vehicle_RefVelX_LeftWheels ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   1 , $E_Vehicle_RefVelX_LeftWheels ) = 1.02400000000000000E+03 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   2 , $E_Vehicle_RefVelX_LeftWheels ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   3 , $E_Vehicle_RefVelX_LeftWheels ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   4 , $E_Vehicle_RefVelX_LeftWheels ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   5 , $E_Vehicle_RefVelX_LeftWheels ) = 8.00000000000000000E+01 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   6 ,   1 , $E_Vehicle_RefVelX_LeftWheels) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   7 ,   1 , $E_Vehicle_RefVelX_LeftWheels) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   8 ,   1 , $E_Vehicle_RefVelX_LeftWheels) = 1.00000000000000000E+00 ! [-] Unknown plot parameter

excit.type (                        $E_Vehicle_RefVelX_RightWheels) = 4                       ! Type
excit.txt (                         $E_Vehicle_RefVelX_RightWheels) = '16.5362[br](60/3.6)/300*(300-1.5/2)' ! Comment
excit.par (               1 ,       $E_Vehicle_RefVelX_RightWheels) = 2.00000000000000000E+00 ! [-] Number of position switches
excit.par (               2 ,       $E_Vehicle_RefVelX_RightWheels) = { 60/3.6 }              ! [-] f_Begin(1)
excit.par (               3 ,       $E_Vehicle_RefVelX_RightWheels) = { 60/3.6 }              ! [-] f_End(  1)
excit.par (               4 ,       $E_Vehicle_RefVelX_RightWheels) = 0.00000000000000000E+00 ! [s] t_Begin(1)
excit.par (               5 ,       $E_Vehicle_RefVelX_RightWheels) = 3.00000000000000000E+00 ! [s] t_End(  1)
excit.par (               6 ,       $E_Vehicle_RefVelX_RightWheels) = { (60/3.6)/300*(300-1.5/2) } ! [-] f_End(  2)
excit.par (               7 ,       $E_Vehicle_RefVelX_RightWheels) = 3.00000000000000000E+00 ! [s] t_Begin(2)
excit.par (               8 ,       $E_Vehicle_RefVelX_RightWheels) = 6.00000000000000000E+00 ! [s] t_End(  2)
excit.par (               9 ,       $E_Vehicle_RefVelX_RightWheels) = { (60/3.6)/300*(300-1.5/2) } ! [-] f_End(  3)
excit.par (              10 ,       $E_Vehicle_RefVelX_RightWheels) = 6.00000000000000000E+00 ! [s] t_Begin(3)
excit.par (              11 ,       $E_Vehicle_RefVelX_RightWheels) = 0.00000000000000000E+00 ! [s] t_End(  3)
excit.par (              12 ,       $E_Vehicle_RefVelX_RightWheels) = 0.00000000000000000E+00 ! [-] f_End(  4)
excit.par (              13 ,       $E_Vehicle_RefVelX_RightWheels) = 0.00000000000000000E+00 ! [s] t_Begin(4)
excit.par (              14 ,       $E_Vehicle_RefVelX_RightWheels) = 0.00000000000000000E+00 ! [s] t_End(  4)
excit.par (              15 ,       $E_Vehicle_RefVelX_RightWheels) = 0.00000000000000000E+00 ! [-] Repeat sequence
excit.par (              16 ,       $E_Vehicle_RefVelX_RightWheels) = 0.00000000000000000E+00 ! [-] Repeat offset Delta-f
excit.par (              17 ,       $E_Vehicle_RefVelX_RightWheels) = 0.00000000000000000E+00 ! [s] Repeat offset Delta-t (>0)
excit.plot.par (          1 ,       $E_Vehicle_RefVelX_RightWheels) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   1 , $E_Vehicle_RefVelX_RightWheels) = 1.02400000000000000E+03 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   2 , $E_Vehicle_RefVelX_RightWheels) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   3 , $E_Vehicle_RefVelX_RightWheels) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   4 , $E_Vehicle_RefVelX_RightWheels) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   5 , $E_Vehicle_RefVelX_RightWheels) = 8.00000000000000000E+01 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   6 ,   1 , $E_Vehicle_RefVelX_RightWheels) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   7 ,   1 , $E_Vehicle_RefVelX_RightWheels) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   8 ,   1 , $E_Vehicle_RefVelX_RightWheels) = 1.00000000000000000E+00 ! [-] Unknown plot parameter

excit.type (                        $E_LatExt                     ) = 101                     ! Type
excit.par (               1 ,       $E_LatExt                     ) = 0.00000000000000000E+00 ! [-] Offset f0
excit.par (               2 ,       $E_LatExt                     ) = 5.00000000000000010E-03 ! [-] Amplitude A
excit.par (               3 ,       $E_LatExt                     ) = 2.00000000000000011E-01 ! [m⁻¹rad ] Distance ang. frequency Omega
excit.par (               4 ,       $E_LatExt                     ) = 0.00000000000000000E+00 ! [rad] Phase p
excit.par (               5 ,       $E_LatExt                     ) = 0.00000000000000000E+00 ! [-] Exponent n
excit.plot.par (          1 ,       $E_LatExt                     ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   1 , $E_LatExt                     ) = 1.02400000000000000E+03 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   2 , $E_LatExt                     ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   3 , $E_LatExt                     ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   4 , $E_LatExt                     ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   5 , $E_LatExt                     ) = 1.00000000000000000E+02 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   6 ,   1 , $E_LatExt               ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   7 ,   1 , $E_LatExt               ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   8 ,   1 , $E_LatExt               ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter

excit.type (                        $E_AAR5_LAT                   ) = 108                     ! Type
excit.par (               1 ,       $E_AAR5_LAT                   ) = 0.00000000000000000E+00 ! [-] Amplitude description
excit.par (               2 ,       $E_AAR5_LAT                   ) = 2.00000000000000000E+00 ! [-] Random generator start value
excit.par (               3 ,       $E_AAR5_LAT                   ) = $PSD_AAR5_LAT           ! [-] Power Spectral Density
excit.par (               4 ,       $E_AAR5_LAT                   ) = 1.92000000000000000E+03 ! [-] Number of frequencies
excit.par (               5 ,       $E_AAR5_LAT                   ) = 6.56000000000000028E-01 ! [m⁻¹] Upper frequency limit
excit.par (               6 ,       $E_AAR5_LAT                   ) = 2.40000000000000005E-02 ! [m⁻¹] Lower frequency limit
excit.par (               7 ,       $E_AAR5_LAT                   ) = 0.00000000000000000E+00 ! [-] Delay
excit.par (               9 ,       $E_AAR5_LAT                   ) = 0.00000000000000000E+00 ! [-] Relative amplitude limit
excit.par (              11 ,       $E_AAR5_LAT                   ) = 0.00000000000000000E+00 ! [m] Start position of excitation
excit.par (              15 ,       $E_AAR5_LAT                   ) = 0.00000000000000000E+00 ! [-] Frequency interval type
excit.par (              28 ,       $E_AAR5_LAT                   ) = 0.00000000000000000E+00 ! [m] Range for averaging
excit.par (              30 ,       $E_AAR5_LAT                   ) = 0.00000000000000000E+00 ! [-] Start/End distance given
excit.par (              31 ,       $E_AAR5_LAT                   ) = 0.00000000000000000E+00 ! [m] Start distance
excit.par (              32 ,       $E_AAR5_LAT                   ) = 2.00000000000000000E+03 ! [m] End distance
excit.plot.par (          1 ,       $E_AAR5_LAT                   ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   1 , $E_AAR5_LAT                   ) = 1.02400000000000000E+03 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   2 , $E_AAR5_LAT                   ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   3 , $E_AAR5_LAT                   ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   4 , $E_AAR5_LAT                   ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   5 , $E_AAR5_LAT                   ) = 1.00000000000000000E+02 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   6 ,   1 , $E_AAR5_LAT             ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   7 ,   1 , $E_AAR5_LAT             ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   8 ,   1 , $E_AAR5_LAT             ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter

excit.type (                        $E_AAR5_VER                   ) = 108                     ! Type
excit.par (               1 ,       $E_AAR5_VER                   ) = 0.00000000000000000E+00 ! [-] Amplitude description
excit.par (               2 ,       $E_AAR5_VER                   ) = 2.00000000000000000E+00 ! [-] Random generator start value
excit.par (               3 ,       $E_AAR5_VER                   ) = $PSD_AAR5_VER           ! [-] Power Spectral Density
excit.par (               4 ,       $E_AAR5_VER                   ) = 1.92000000000000000E+03 ! [-] Number of frequencies
excit.par (               5 ,       $E_AAR5_VER                   ) = 6.56000000000000028E-01 ! [m⁻¹] Upper frequency limit
excit.par (               6 ,       $E_AAR5_VER                   ) = 2.40000000000000005E-02 ! [m⁻¹] Lower frequency limit
excit.par (               7 ,       $E_AAR5_VER                   ) = 0.00000000000000000E+00 ! [-] Delay
excit.par (               9 ,       $E_AAR5_VER                   ) = 0.00000000000000000E+00 ! [-] Relative amplitude limit
excit.par (              11 ,       $E_AAR5_VER                   ) = 0.00000000000000000E+00 ! [m] Start position of excitation
excit.par (              15 ,       $E_AAR5_VER                   ) = 0.00000000000000000E+00 ! [-] Frequency interval type
excit.par (              28 ,       $E_AAR5_VER                   ) = 0.00000000000000000E+00 ! [m] Range for averaging
excit.par (              30 ,       $E_AAR5_VER                   ) = 0.00000000000000000E+00 ! [-] Start/End distance given
excit.par (              31 ,       $E_AAR5_VER                   ) = 0.00000000000000000E+00 ! [m] Start distance
excit.par (              32 ,       $E_AAR5_VER                   ) = 2.00000000000000000E+03 ! [m] End distance
excit.plot.par (          1 ,       $E_AAR5_VER                   ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   1 , $E_AAR5_VER                   ) = 1.02400000000000000E+03 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   2 , $E_AAR5_VER                   ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   3 , $E_AAR5_VER                   ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   4 , $E_AAR5_VER                   ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   5 , $E_AAR5_VER                   ) = 1.00000000000000000E+02 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   6 ,   1 , $E_AAR5_VER             ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   7 ,   1 , $E_AAR5_VER             ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   8 ,   1 , $E_AAR5_VER             ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter

excit.type (                        $E_AAR5_GAU                   ) = 108                     ! Type
excit.par (               1 ,       $E_AAR5_GAU                   ) = 0.00000000000000000E+00 ! [-] Amplitude description
excit.par (               2 ,       $E_AAR5_GAU                   ) = 2.00000000000000000E+00 ! [-] Random generator start value
excit.par (               3 ,       $E_AAR5_GAU                   ) = $PSD_AAR5_GAU           ! [-] Power Spectral Density
excit.par (               4 ,       $E_AAR5_GAU                   ) = 1.92000000000000000E+03 ! [-] Number of frequencies
excit.par (               5 ,       $E_AAR5_GAU                   ) = 6.56000000000000028E-01 ! [m⁻¹] Upper frequency limit
excit.par (               6 ,       $E_AAR5_GAU                   ) = 2.40000000000000005E-02 ! [m⁻¹] Lower frequency limit
excit.par (               7 ,       $E_AAR5_GAU                   ) = 0.00000000000000000E+00 ! [-] Delay
excit.par (               9 ,       $E_AAR5_GAU                   ) = 0.00000000000000000E+00 ! [-] Relative amplitude limit
excit.par (              11 ,       $E_AAR5_GAU                   ) = 0.00000000000000000E+00 ! [m] Start position of excitation
excit.par (              15 ,       $E_AAR5_GAU                   ) = 0.00000000000000000E+00 ! [-] Frequency interval type
excit.par (              28 ,       $E_AAR5_GAU                   ) = 0.00000000000000000E+00 ! [m] Range for averaging
excit.par (              30 ,       $E_AAR5_GAU                   ) = 0.00000000000000000E+00 ! [-] Start/End distance given
excit.par (              31 ,       $E_AAR5_GAU                   ) = 0.00000000000000000E+00 ! [m] Start distance
excit.par (              32 ,       $E_AAR5_GAU                   ) = 2.00000000000000000E+03 ! [m] End distance
excit.plot.par (          1 ,       $E_AAR5_GAU                   ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   1 , $E_AAR5_GAU                   ) = 1.02400000000000000E+03 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   2 , $E_AAR5_GAU                   ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   3 , $E_AAR5_GAU                   ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   4 , $E_AAR5_GAU                   ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   5 , $E_AAR5_GAU                   ) = 1.00000000000000000E+02 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   6 ,   1 , $E_AAR5_GAU             ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   7 ,   1 , $E_AAR5_GAU             ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   8 ,   1 , $E_AAR5_GAU             ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter

excit.type (                        $E_AAR6_LAT                   ) = 108                     ! Type
excit.par (               1 ,       $E_AAR6_LAT                   ) = 0.00000000000000000E+00 ! [-] Amplitude description
excit.par (               2 ,       $E_AAR6_LAT                   ) = 2.00000000000000000E+00 ! [-] Random generator start value
excit.par (               3 ,       $E_AAR6_LAT                   ) = $PSD_AAR6_LAT           ! [-] Power Spectral Density
excit.par (               4 ,       $E_AAR6_LAT                   ) = 1.92000000000000000E+03 ! [-] Number of frequencies
excit.par (               5 ,       $E_AAR6_LAT                   ) = 6.56000000000000028E-01 ! [m⁻¹] Upper frequency limit
excit.par (               6 ,       $E_AAR6_LAT                   ) = 2.00000000000000004E-02 ! [m⁻¹] Lower frequency limit
excit.par (               7 ,       $E_AAR6_LAT                   ) = 0.00000000000000000E+00 ! [-] Delay
excit.par (               9 ,       $E_AAR6_LAT                   ) = 0.00000000000000000E+00 ! [-] Relative amplitude limit
excit.par (              11 ,       $E_AAR6_LAT                   ) = 0.00000000000000000E+00 ! [m] Start position of excitation
excit.par (              15 ,       $E_AAR6_LAT                   ) = 0.00000000000000000E+00 ! [-] Frequency interval type
excit.par (              28 ,       $E_AAR6_LAT                   ) = 0.00000000000000000E+00 ! [m] Range for averaging
excit.par (              30 ,       $E_AAR6_LAT                   ) = 0.00000000000000000E+00 ! [-] Start/End distance given
excit.par (              31 ,       $E_AAR6_LAT                   ) = 0.00000000000000000E+00 ! [m] Start distance
excit.par (              32 ,       $E_AAR6_LAT                   ) = 1.00000000000000000E+03 ! [m] End distance
excit.plot.par (          1 ,       $E_AAR6_LAT                   ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   1 , $E_AAR6_LAT                   ) = 1.02400000000000000E+03 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   2 , $E_AAR6_LAT                   ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   3 , $E_AAR6_LAT                   ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   4 , $E_AAR6_LAT                   ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   5 , $E_AAR6_LAT                   ) = 1.00000000000000000E+02 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   6 ,   1 , $E_AAR6_LAT             ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   7 ,   1 , $E_AAR6_LAT             ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   8 ,   1 , $E_AAR6_LAT             ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter

excit.type (                        $E_AAR6_VER                   ) = 108                     ! Type
excit.par (               1 ,       $E_AAR6_VER                   ) = 0.00000000000000000E+00 ! [-] Amplitude description
excit.par (               2 ,       $E_AAR6_VER                   ) = 2.00000000000000000E+00 ! [-] Random generator start value
excit.par (               3 ,       $E_AAR6_VER                   ) = $PSD_AAR6_VER           ! [-] Power Spectral Density
excit.par (               4 ,       $E_AAR6_VER                   ) = 1.92000000000000000E+03 ! [-] Number of frequencies
excit.par (               5 ,       $E_AAR6_VER                   ) = 6.56000000000000028E-01 ! [m⁻¹] Upper frequency limit
excit.par (               6 ,       $E_AAR6_VER                   ) = 2.00000000000000004E-02 ! [m⁻¹] Lower frequency limit
excit.par (               7 ,       $E_AAR6_VER                   ) = 0.00000000000000000E+00 ! [-] Delay
excit.par (               9 ,       $E_AAR6_VER                   ) = 0.00000000000000000E+00 ! [-] Relative amplitude limit
excit.par (              11 ,       $E_AAR6_VER                   ) = 0.00000000000000000E+00 ! [m] Start position of excitation
excit.par (              15 ,       $E_AAR6_VER                   ) = 0.00000000000000000E+00 ! [-] Frequency interval type
excit.par (              28 ,       $E_AAR6_VER                   ) = 0.00000000000000000E+00 ! [m] Range for averaging
excit.par (              30 ,       $E_AAR6_VER                   ) = 0.00000000000000000E+00 ! [-] Start/End distance given
excit.par (              31 ,       $E_AAR6_VER                   ) = 0.00000000000000000E+00 ! [m] Start distance
excit.par (              32 ,       $E_AAR6_VER                   ) = 1.00000000000000000E+03 ! [m] End distance
excit.plot.par (          1 ,       $E_AAR6_VER                   ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   1 , $E_AAR6_VER                   ) = 1.02400000000000000E+03 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   2 , $E_AAR6_VER                   ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   3 , $E_AAR6_VER                   ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   4 , $E_AAR6_VER                   ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   5 , $E_AAR6_VER                   ) = 1.00000000000000000E+02 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   6 ,   1 , $E_AAR6_VER             ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   7 ,   1 , $E_AAR6_VER             ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   8 ,   1 , $E_AAR6_VER             ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter

excit.type (                        $E_AAR6_GAU                   ) = 108                     ! Type
excit.par (               1 ,       $E_AAR6_GAU                   ) = 0.00000000000000000E+00 ! [-] Amplitude description
excit.par (               2 ,       $E_AAR6_GAU                   ) = 2.00000000000000000E+00 ! [-] Random generator start value
excit.par (               3 ,       $E_AAR6_GAU                   ) = $PSD_AAR6_GAU           ! [-] Power Spectral Density
excit.par (               4 ,       $E_AAR6_GAU                   ) = 1.92000000000000000E+03 ! [-] Number of frequencies
excit.par (               5 ,       $E_AAR6_GAU                   ) = 6.56000000000000028E-01 ! [m⁻¹] Upper frequency limit
excit.par (               6 ,       $E_AAR6_GAU                   ) = 2.00000000000000004E-02 ! [m⁻¹] Lower frequency limit
excit.par (               7 ,       $E_AAR6_GAU                   ) = 0.00000000000000000E+00 ! [-] Delay
excit.par (               9 ,       $E_AAR6_GAU                   ) = 0.00000000000000000E+00 ! [-] Relative amplitude limit
excit.par (              11 ,       $E_AAR6_GAU                   ) = 0.00000000000000000E+00 ! [m] Start position of excitation
excit.par (              15 ,       $E_AAR6_GAU                   ) = 0.00000000000000000E+00 ! [-] Frequency interval type
excit.par (              28 ,       $E_AAR6_GAU                   ) = 0.00000000000000000E+00 ! [m] Range for averaging
excit.par (              30 ,       $E_AAR6_GAU                   ) = 0.00000000000000000E+00 ! [-] Start/End distance given
excit.par (              31 ,       $E_AAR6_GAU                   ) = 0.00000000000000000E+00 ! [m] Start distance
excit.par (              32 ,       $E_AAR6_GAU                   ) = 1.00000000000000000E+03 ! [m] End distance
excit.plot.par (          1 ,       $E_AAR6_GAU                   ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   1 , $E_AAR6_GAU                   ) = 1.02400000000000000E+03 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   2 , $E_AAR6_GAU                   ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   3 , $E_AAR6_GAU                   ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   4 , $E_AAR6_GAU                   ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   5 , $E_AAR6_GAU                   ) = 1.00000000000000000E+02 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   6 ,   1 , $E_AAR6_GAU             ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   7 ,   1 , $E_AAR6_GAU             ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   8 ,   1 , $E_AAR6_GAU             ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter

!**********************************************************************
! u-Vector
!**********************************************************************
uele.type (                         $UE_CurveLeft                 ) = 1                       ! Type
uele.excit (                        $UE_CurveLeft                 ) = $E_Vehicle_RefVelX_LeftWheels ! Referenced Excitation

uele.type (                         $UE_CurveRight                ) = 1                       ! Type
uele.excit (                        $UE_CurveRight                ) = $E_Vehicle_RefVelX_RightWheels ! Referenced Excitation

!**********************************************************************
! Y Output
!**********************************************************************
yout.type (                         $y_spcktime                   ) = 20                      ! Type

yout.type (                         $y_cb_vx                      ) = 14                      ! Type
yout.par (                1 ,       $y_cb_vx                      ) = $J_Carbody              ! [-] Connection/Joint
yout.par (                2 ,       $y_cb_vx                      ) = 1.00000000000000000E+00 ! [-] State

yout.type (                         $y_cb_x                       ) = 13                      ! Type
yout.par (                1 ,       $y_cb_x                       ) = $J_Carbody              ! [-] Connection/Joint
yout.par (                2 ,       $y_cb_x                       ) = 1.00000000000000000E+00 ! [-] State

yout.type (                         $y_cb_y                       ) = 13                      ! Type
yout.par (                1 ,       $y_cb_y                       ) = $J_Carbody              ! [-] Connection/Joint
yout.par (                2 ,       $y_cb_y                       ) = 2.00000000000000000E+00 ! [-] State

yout.type (                         $y_cb_z                       ) = 13                      ! Type
yout.par (                1 ,       $y_cb_z                       ) = $J_Carbody              ! [-] Connection/Joint
yout.par (                2 ,       $y_cb_z                       ) = 3.00000000000000000E+00 ! [-] State

yout.type (                         $y_cb_roll                    ) = 13                      ! Type
yout.par (                1 ,       $y_cb_roll                    ) = $J_Carbody              ! [-] Connection/Joint
yout.par (                2 ,       $y_cb_roll                    ) = 4.00000000000000000E+00 ! [-] State

yout.type (                         $y_cb_yaw                     ) = 13                      ! Type
yout.par (                1 ,       $y_cb_yaw                     ) = $J_Carbody              ! [-] Connection/Joint
yout.par (                2 ,       $y_cb_yaw                     ) = 5.00000000000000000E+00 ! [-] State

yout.type (                         $y_cb_pitch                   ) = 13                      ! Type
yout.par (                1 ,       $y_cb_pitch                   ) = $J_Carbody              ! [-] Connection/Joint
yout.par (                2 ,       $y_cb_pitch                   ) = 6.00000000000000000E+00 ! [-] State

yout.type (                         $y_w01_rotw                   ) = 14                      ! Type
yout.txt (                          $y_w01_rotw                   ) = 'IRW 车轮转速'      ! Comment
yout.par (                1 ,       $y_w01_rotw                   ) = $S_IRWBogie_Front.$S_IRW_Front.$J_IRW_L ! [-] Connection/Joint
yout.par (                2 ,       $y_w01_rotw                   ) = 1.00000000000000000E+00 ! [-] State

yout.type (                         $y_w02_rotw                   ) = 14                      ! Type
yout.txt (                          $y_w02_rotw                   ) = 'IRW 车轮转速'      ! Comment
yout.par (                1 ,       $y_w02_rotw                   ) = $S_IRWBogie_Front.$S_IRW_Front.$J_IRW_R ! [-] Connection/Joint
yout.par (                2 ,       $y_w02_rotw                   ) = 1.00000000000000000E+00 ! [-] State

yout.type (                         $y_w03_rotw                   ) = 14                      ! Type
yout.txt (                          $y_w03_rotw                   ) = 'IRW 车轮转速'      ! Comment
yout.par (                1 ,       $y_w03_rotw                   ) = $S_IRWBogie_Front.$S_IRW_Rear.$J_IRW_L ! [-] Connection/Joint
yout.par (                2 ,       $y_w03_rotw                   ) = 1.00000000000000000E+00 ! [-] State

yout.type (                         $y_w04_rotw                   ) = 14                      ! Type
yout.txt (                          $y_w04_rotw                   ) = 'IRW 车轮转速'      ! Comment
yout.par (                1 ,       $y_w04_rotw                   ) = $S_IRWBogie_Front.$S_IRW_Rear.$J_IRW_R ! [-] Connection/Joint
yout.par (                2 ,       $y_w04_rotw                   ) = 1.00000000000000000E+00 ! [-] State

yout.type (                         $y_w05_rotw                   ) = 14                      ! Type
yout.txt (                          $y_w05_rotw                   ) = 'IRW 车轮转速'      ! Comment
yout.par (                1 ,       $y_w05_rotw                   ) = $S_IRWBogie_Rear.$S_IRW_Front.$J_IRW_L ! [-] Connection/Joint
yout.par (                2 ,       $y_w05_rotw                   ) = 1.00000000000000000E+00 ! [-] State

yout.type (                         $y_w06_rotw                   ) = 14                      ! Type
yout.txt (                          $y_w06_rotw                   ) = 'IRW 车轮转速'      ! Comment
yout.par (                1 ,       $y_w06_rotw                   ) = $S_IRWBogie_Rear.$S_IRW_Front.$J_IRW_R ! [-] Connection/Joint
yout.par (                2 ,       $y_w06_rotw                   ) = 1.00000000000000000E+00 ! [-] State

yout.type (                         $y_w07_rotw                   ) = 14                      ! Type
yout.txt (                          $y_w07_rotw                   ) = 'IRW 车轮转速'      ! Comment
yout.par (                1 ,       $y_w07_rotw                   ) = $S_IRWBogie_Rear.$S_IRW_Rear.$J_IRW_L ! [-] Connection/Joint
yout.par (                2 ,       $y_w07_rotw                   ) = 1.00000000000000000E+00 ! [-] State

yout.type (                         $y_w08_rotw                   ) = 14                      ! Type
yout.txt (                          $y_w08_rotw                   ) = 'IRW 车轮转速'      ! Comment
yout.par (                1 ,       $y_w08_rotw                   ) = $S_IRWBogie_Rear.$S_IRW_Rear.$J_IRW_R ! [-] Connection/Joint
yout.par (                2 ,       $y_w08_rotw                   ) = 1.00000000000000000E+00 ! [-] State

yout.type (                         $y_f01_x                      ) = 13                      ! Type
yout.par (                1 ,       $y_f01_x                      ) = $S_IRWBogie_Front.$J_Frame ! [-] Connection/Joint
yout.par (                2 ,       $y_f01_x                      ) = 1.00000000000000000E+00 ! [-] State

yout.type (                         $y_f01_y                      ) = 13                      ! Type
yout.par (                1 ,       $y_f01_y                      ) = $S_IRWBogie_Front.$J_Frame ! [-] Connection/Joint
yout.par (                2 ,       $y_f01_y                      ) = 2.00000000000000000E+00 ! [-] State

yout.type (                         $y_f01_z                      ) = 13                      ! Type
yout.par (                1 ,       $y_f01_z                      ) = $S_IRWBogie_Front.$J_Frame ! [-] Connection/Joint
yout.par (                2 ,       $y_f01_z                      ) = 3.00000000000000000E+00 ! [-] State

yout.type (                         $y_f01_roll                   ) = 13                      ! Type
yout.par (                1 ,       $y_f01_roll                   ) = $S_IRWBogie_Front.$J_Frame ! [-] Connection/Joint
yout.par (                2 ,       $y_f01_roll                   ) = 4.00000000000000000E+00 ! [-] State

yout.type (                         $y_f01_yaw                    ) = 13                      ! Type
yout.par (                1 ,       $y_f01_yaw                    ) = $S_IRWBogie_Front.$J_Frame ! [-] Connection/Joint
yout.par (                2 ,       $y_f01_yaw                    ) = 5.00000000000000000E+00 ! [-] State

yout.type (                         $y_f01_pitch                  ) = 13                      ! Type
yout.par (                1 ,       $y_f01_pitch                  ) = $S_IRWBogie_Front.$J_Frame ! [-] Connection/Joint
yout.par (                2 ,       $y_f01_pitch                  ) = 6.00000000000000000E+00 ! [-] State

yout.type (                         $y_f02_x                      ) = 13                      ! Type
yout.par (                1 ,       $y_f02_x                      ) = $S_IRWBogie_Rear.$J_Frame ! [-] Connection/Joint
yout.par (                2 ,       $y_f02_x                      ) = 1.00000000000000000E+00 ! [-] State

yout.type (                         $y_f02_y                      ) = 13                      ! Type
yout.par (                1 ,       $y_f02_y                      ) = $S_IRWBogie_Rear.$J_Frame ! [-] Connection/Joint
yout.par (                2 ,       $y_f02_y                      ) = 2.00000000000000000E+00 ! [-] State

yout.type (                         $y_f02_z                      ) = 13                      ! Type
yout.par (                1 ,       $y_f02_z                      ) = $S_IRWBogie_Rear.$J_Frame ! [-] Connection/Joint
yout.par (                2 ,       $y_f02_z                      ) = 3.00000000000000000E+00 ! [-] State

yout.type (                         $y_f02_roll                   ) = 13                      ! Type
yout.par (                1 ,       $y_f02_roll                   ) = $S_IRWBogie_Rear.$J_Frame ! [-] Connection/Joint
yout.par (                2 ,       $y_f02_roll                   ) = 4.00000000000000000E+00 ! [-] State

yout.type (                         $y_f02_yaw                    ) = 13                      ! Type
yout.par (                1 ,       $y_f02_yaw                    ) = $S_IRWBogie_Rear.$J_Frame ! [-] Connection/Joint
yout.par (                2 ,       $y_f02_yaw                    ) = 5.00000000000000000E+00 ! [-] State

yout.type (                         $y_f02_pitch                  ) = 13                      ! Type
yout.par (                1 ,       $y_f02_pitch                  ) = $S_IRWBogie_Rear.$J_Frame ! [-] Connection/Joint
yout.par (                2 ,       $y_f02_pitch                  ) = 6.00000000000000000E+00 ! [-] State

yout.type (                         $y_ws01_x                     ) = 13                      ! Type
yout.par (                1 ,       $y_ws01_x                     ) = $S_IRWBogie_Front.$S_IRW_Front.$J_DumAxle ! [-] Connection/Joint
yout.par (                2 ,       $y_ws01_x                     ) = 1.00000000000000000E+00 ! [-] State

yout.type (                         $y_ws01_y                     ) = 13                      ! Type
yout.par (                1 ,       $y_ws01_y                     ) = $S_IRWBogie_Front.$S_IRW_Front.$J_DumAxle ! [-] Connection/Joint
yout.par (                2 ,       $y_ws01_y                     ) = 2.00000000000000000E+00 ! [-] State

yout.type (                         $y_ws01_z                     ) = 13                      ! Type
yout.par (                1 ,       $y_ws01_z                     ) = $S_IRWBogie_Front.$S_IRW_Front.$J_DumAxle ! [-] Connection/Joint
yout.par (                2 ,       $y_ws01_z                     ) = 3.00000000000000000E+00 ! [-] State

yout.type (                         $y_ws01_roll                  ) = 13                      ! Type
yout.par (                1 ,       $y_ws01_roll                  ) = $S_IRWBogie_Front.$S_IRW_Front.$J_DumAxle ! [-] Connection/Joint
yout.par (                2 ,       $y_ws01_roll                  ) = 4.00000000000000000E+00 ! [-] State

yout.type (                         $y_ws01_yaw                   ) = 13                      ! Type
yout.par (                1 ,       $y_ws01_yaw                   ) = $S_IRWBogie_Front.$S_IRW_Front.$J_DumAxle ! [-] Connection/Joint
yout.par (                2 ,       $y_ws01_yaw                   ) = 5.00000000000000000E+00 ! [-] State

yout.type (                         $y_ws01_pitch                 ) = 13                      ! Type
yout.par (                1 ,       $y_ws01_pitch                 ) = $S_IRWBogie_Front.$S_IRW_Front.$J_DumAxle ! [-] Connection/Joint
yout.par (                2 ,       $y_ws01_pitch                 ) = 6.00000000000000000E+00 ! [-] State

yout.type (                         $y_ws02_x                     ) = 13                      ! Type
yout.par (                1 ,       $y_ws02_x                     ) = $S_IRWBogie_Front.$S_IRW_Rear.$J_DumAxle ! [-] Connection/Joint
yout.par (                2 ,       $y_ws02_x                     ) = 1.00000000000000000E+00 ! [-] State

yout.type (                         $y_ws02_y                     ) = 13                      ! Type
yout.par (                1 ,       $y_ws02_y                     ) = $S_IRWBogie_Front.$S_IRW_Rear.$J_DumAxle ! [-] Connection/Joint
yout.par (                2 ,       $y_ws02_y                     ) = 2.00000000000000000E+00 ! [-] State

yout.type (                         $y_ws02_z                     ) = 13                      ! Type
yout.par (                1 ,       $y_ws02_z                     ) = $S_IRWBogie_Front.$S_IRW_Rear.$J_DumAxle ! [-] Connection/Joint
yout.par (                2 ,       $y_ws02_z                     ) = 3.00000000000000000E+00 ! [-] State

yout.type (                         $y_ws02_roll                  ) = 13                      ! Type
yout.par (                1 ,       $y_ws02_roll                  ) = $S_IRWBogie_Front.$S_IRW_Rear.$J_DumAxle ! [-] Connection/Joint
yout.par (                2 ,       $y_ws02_roll                  ) = 4.00000000000000000E+00 ! [-] State

yout.type (                         $y_ws02_yaw                   ) = 13                      ! Type
yout.par (                1 ,       $y_ws02_yaw                   ) = $S_IRWBogie_Front.$S_IRW_Rear.$J_DumAxle ! [-] Connection/Joint
yout.par (                2 ,       $y_ws02_yaw                   ) = 5.00000000000000000E+00 ! [-] State

yout.type (                         $y_ws02_pitch                 ) = 13                      ! Type
yout.par (                1 ,       $y_ws02_pitch                 ) = $S_IRWBogie_Front.$S_IRW_Rear.$J_DumAxle ! [-] Connection/Joint
yout.par (                2 ,       $y_ws02_pitch                 ) = 6.00000000000000000E+00 ! [-] State

yout.type (                         $y_ws03_x                     ) = 13                      ! Type
yout.par (                1 ,       $y_ws03_x                     ) = $S_IRWBogie_Rear.$S_IRW_Front.$J_DumAxle ! [-] Connection/Joint
yout.par (                2 ,       $y_ws03_x                     ) = 1.00000000000000000E+00 ! [-] State

yout.type (                         $y_ws03_y                     ) = 13                      ! Type
yout.par (                1 ,       $y_ws03_y                     ) = $S_IRWBogie_Rear.$S_IRW_Front.$J_DumAxle ! [-] Connection/Joint
yout.par (                2 ,       $y_ws03_y                     ) = 2.00000000000000000E+00 ! [-] State

yout.type (                         $y_ws03_z                     ) = 13                      ! Type
yout.par (                1 ,       $y_ws03_z                     ) = $S_IRWBogie_Rear.$S_IRW_Front.$J_DumAxle ! [-] Connection/Joint
yout.par (                2 ,       $y_ws03_z                     ) = 3.00000000000000000E+00 ! [-] State

yout.type (                         $y_ws03_roll                  ) = 13                      ! Type
yout.par (                1 ,       $y_ws03_roll                  ) = $S_IRWBogie_Rear.$S_IRW_Front.$J_DumAxle ! [-] Connection/Joint
yout.par (                2 ,       $y_ws03_roll                  ) = 4.00000000000000000E+00 ! [-] State

yout.type (                         $y_ws03_yaw                   ) = 13                      ! Type
yout.par (                1 ,       $y_ws03_yaw                   ) = $S_IRWBogie_Rear.$S_IRW_Front.$J_DumAxle ! [-] Connection/Joint
yout.par (                2 ,       $y_ws03_yaw                   ) = 5.00000000000000000E+00 ! [-] State

yout.type (                         $y_ws03_pitch                 ) = 13                      ! Type
yout.par (                1 ,       $y_ws03_pitch                 ) = $S_IRWBogie_Rear.$S_IRW_Front.$J_DumAxle ! [-] Connection/Joint
yout.par (                2 ,       $y_ws03_pitch                 ) = 6.00000000000000000E+00 ! [-] State

yout.type (                         $y_ws04_x                     ) = 13                      ! Type
yout.par (                1 ,       $y_ws04_x                     ) = $S_IRWBogie_Rear.$S_IRW_Rear.$J_DumAxle ! [-] Connection/Joint
yout.par (                2 ,       $y_ws04_x                     ) = 1.00000000000000000E+00 ! [-] State

yout.type (                         $y_ws04_y                     ) = 13                      ! Type
yout.par (                1 ,       $y_ws04_y                     ) = $S_IRWBogie_Rear.$S_IRW_Rear.$J_DumAxle ! [-] Connection/Joint
yout.par (                2 ,       $y_ws04_y                     ) = 2.00000000000000000E+00 ! [-] State

yout.type (                         $y_ws04_z                     ) = 13                      ! Type
yout.par (                1 ,       $y_ws04_z                     ) = $S_IRWBogie_Rear.$S_IRW_Rear.$J_DumAxle ! [-] Connection/Joint
yout.par (                2 ,       $y_ws04_z                     ) = 3.00000000000000000E+00 ! [-] State

yout.type (                         $y_ws04_roll                  ) = 13                      ! Type
yout.par (                1 ,       $y_ws04_roll                  ) = $S_IRWBogie_Rear.$S_IRW_Rear.$J_DumAxle ! [-] Connection/Joint
yout.par (                2 ,       $y_ws04_roll                  ) = 4.00000000000000000E+00 ! [-] State

yout.type (                         $y_ws04_yaw                   ) = 13                      ! Type
yout.par (                1 ,       $y_ws04_yaw                   ) = $S_IRWBogie_Rear.$S_IRW_Rear.$J_DumAxle ! [-] Connection/Joint
yout.par (                2 ,       $y_ws04_yaw                   ) = 5.00000000000000000E+00 ! [-] State

yout.type (                         $y_ws04_pitch                 ) = 13                      ! Type
yout.par (                1 ,       $y_ws04_pitch                 ) = $S_IRWBogie_Rear.$S_IRW_Rear.$J_DumAxle ! [-] Connection/Joint
yout.par (                2 ,       $y_ws04_pitch                 ) = 6.00000000000000000E+00 ! [-] State

yout.type (                         $y_w01_rota                   ) = 13                      ! Type
yout.par (                1 ,       $y_w01_rota                   ) = $S_IRWBogie_Front.$S_IRW_Front.$J_IRW_L ! [-] Connection/Joint
yout.par (                2 ,       $y_w01_rota                   ) = 1.00000000000000000E+00 ! [-] State

yout.type (                         $y_w02_rota                   ) = 13                      ! Type
yout.par (                1 ,       $y_w02_rota                   ) = $S_IRWBogie_Front.$S_IRW_Front.$J_IRW_R ! [-] Connection/Joint
yout.par (                2 ,       $y_w02_rota                   ) = 1.00000000000000000E+00 ! [-] State

yout.type (                         $y_w03_rota                   ) = 13                      ! Type
yout.par (                1 ,       $y_w03_rota                   ) = $S_IRWBogie_Front.$S_IRW_Rear.$J_IRW_L ! [-] Connection/Joint
yout.par (                2 ,       $y_w03_rota                   ) = 1.00000000000000000E+00 ! [-] State

yout.type (                         $y_w04_rota                   ) = 13                      ! Type
yout.par (                1 ,       $y_w04_rota                   ) = $S_IRWBogie_Front.$S_IRW_Rear.$J_IRW_R ! [-] Connection/Joint
yout.par (                2 ,       $y_w04_rota                   ) = 1.00000000000000000E+00 ! [-] State

yout.type (                         $y_w05_rota                   ) = 13                      ! Type
yout.par (                1 ,       $y_w05_rota                   ) = $S_IRWBogie_Rear.$S_IRW_Front.$J_IRW_L ! [-] Connection/Joint
yout.par (                2 ,       $y_w05_rota                   ) = 1.00000000000000000E+00 ! [-] State

yout.type (                         $y_w06_rota                   ) = 13                      ! Type
yout.par (                1 ,       $y_w06_rota                   ) = $S_IRWBogie_Rear.$S_IRW_Front.$J_IRW_R ! [-] Connection/Joint
yout.par (                2 ,       $y_w06_rota                   ) = 1.00000000000000000E+00 ! [-] State

yout.type (                         $y_w07_rota                   ) = 13                      ! Type
yout.par (                1 ,       $y_w07_rota                   ) = $S_IRWBogie_Rear.$S_IRW_Rear.$J_IRW_L ! [-] Connection/Joint
yout.par (                2 ,       $y_w07_rota                   ) = 1.00000000000000000E+00 ! [-] State

yout.type (                         $y_w08_rota                   ) = 13                      ! Type
yout.par (                1 ,       $y_w08_rota                   ) = $S_IRWBogie_Rear.$S_IRW_Rear.$J_IRW_R ! [-] Connection/Joint
yout.par (                2 ,       $y_w08_rota                   ) = 1.00000000000000000E+00 ! [-] State

yout.type (                         $y_bar01_pitch                ) = 13                      ! Type
yout.par (                1 ,       $y_bar01_pitch                ) = $S_IRWBogie_Front.$J_LongiBar_A ! [-] Connection/Joint
yout.par (                2 ,       $y_bar01_pitch                ) = 3.00000000000000000E+00 ! [-] State

yout.type (                         $y_bar02_pitch                ) = 13                      ! Type
yout.par (                1 ,       $y_bar02_pitch                ) = $S_IRWBogie_Front.$J_LongiBar_B ! [-] Connection/Joint
yout.par (                2 ,       $y_bar02_pitch                ) = 3.00000000000000000E+00 ! [-] State

yout.type (                         $y_bar03_pitch                ) = 13                      ! Type
yout.par (                1 ,       $y_bar03_pitch                ) = $S_IRWBogie_Front.$J_LongiBar_C ! [-] Connection/Joint
yout.par (                2 ,       $y_bar03_pitch                ) = 3.00000000000000000E+00 ! [-] State

yout.type (                         $y_bar04_pitch                ) = 13                      ! Type
yout.par (                1 ,       $y_bar04_pitch                ) = $S_IRWBogie_Front.$J_LongiBar_D ! [-] Connection/Joint
yout.par (                2 ,       $y_bar04_pitch                ) = 3.00000000000000000E+00 ! [-] State

yout.type (                         $y_bar05_pitch                ) = 13                      ! Type
yout.par (                1 ,       $y_bar05_pitch                ) = $S_IRWBogie_Rear.$J_LongiBar_A ! [-] Connection/Joint
yout.par (                2 ,       $y_bar05_pitch                ) = 3.00000000000000000E+00 ! [-] State

yout.type (                         $y_bar06_pitch                ) = 13                      ! Type
yout.par (                1 ,       $y_bar06_pitch                ) = $S_IRWBogie_Rear.$J_LongiBar_B ! [-] Connection/Joint
yout.par (                2 ,       $y_bar06_pitch                ) = 3.00000000000000000E+00 ! [-] State

yout.type (                         $y_bar07_pitch                ) = 13                      ! Type
yout.par (                1 ,       $y_bar07_pitch                ) = $S_IRWBogie_Rear.$J_LongiBar_C ! [-] Connection/Joint
yout.par (                2 ,       $y_bar07_pitch                ) = 3.00000000000000000E+00 ! [-] State

yout.type (                         $y_bar08_pitch                ) = 13                      ! Type
yout.par (                1 ,       $y_bar08_pitch                ) = $S_IRWBogie_Rear.$J_LongiBar_D ! [-] Connection/Joint
yout.par (                2 ,       $y_bar08_pitch                ) = 3.00000000000000000E+00 ! [-] State

yout.type (                         $y_ws01_vy                    ) = 14                      ! Type
yout.par (                1 ,       $y_ws01_vy                    ) = $S_IRWBogie_Front.$S_IRW_Front.$J_DumAxle ! [-] Connection/Joint
yout.par (                2 ,       $y_ws01_vy                    ) = 2.00000000000000000E+00 ! [-] State

yout.type (                         $y_ws02_vy                    ) = 14                      ! Type
yout.par (                1 ,       $y_ws02_vy                    ) = $S_IRWBogie_Front.$S_IRW_Rear.$J_DumAxle ! [-] Connection/Joint
yout.par (                2 ,       $y_ws02_vy                    ) = 2.00000000000000000E+00 ! [-] State

yout.type (                         $y_ws03_vy                    ) = 14                      ! Type
yout.par (                1 ,       $y_ws03_vy                    ) = $S_IRWBogie_Rear.$S_IRW_Front.$J_DumAxle ! [-] Connection/Joint
yout.par (                2 ,       $y_ws03_vy                    ) = 2.00000000000000000E+00 ! [-] State

yout.type (                         $y_ws04_vy                    ) = 14                      ! Type
yout.par (                1 ,       $y_ws04_vy                    ) = $S_IRWBogie_Rear.$S_IRW_Rear.$J_DumAxle ! [-] Connection/Joint
yout.par (                2 ,       $y_ws04_vy                    ) = 2.00000000000000000E+00 ! [-] State

yout.type (                         $y_ws01_vyaw                  ) = 14                      ! Type
yout.par (                1 ,       $y_ws01_vyaw                  ) = $S_IRWBogie_Front.$S_IRW_Front.$J_DumAxle ! [-] Connection/Joint
yout.par (                2 ,       $y_ws01_vyaw                  ) = 5.00000000000000000E+00 ! [-] State

yout.type (                         $y_ws02_vyaw                  ) = 14                      ! Type
yout.par (                1 ,       $y_ws02_vyaw                  ) = $S_IRWBogie_Front.$S_IRW_Rear.$J_DumAxle ! [-] Connection/Joint
yout.par (                2 ,       $y_ws02_vyaw                  ) = 5.00000000000000000E+00 ! [-] State

yout.type (                         $y_ws03_vyaw                  ) = 14                      ! Type
yout.par (                1 ,       $y_ws03_vyaw                  ) = $S_IRWBogie_Rear.$S_IRW_Front.$J_DumAxle ! [-] Connection/Joint
yout.par (                2 ,       $y_ws03_vyaw                  ) = 5.00000000000000000E+00 ! [-] State

yout.type (                         $y_ws04_vyaw                  ) = 14                      ! Type
yout.par (                1 ,       $y_ws04_vyaw                  ) = $S_IRWBogie_Rear.$S_IRW_Rear.$J_DumAxle ! [-] Connection/Joint
yout.par (                2 ,       $y_ws04_vyaw                  ) = 5.00000000000000000E+00 ! [-] State

!**********************************************************************
! Sensors
!**********************************************************************
sensor.from (                       $S_accF                       ) = $M_Isys_Track_Moved     ! From Marker
sensor.to (                         $S_accF                       ) = $M_Carbody_accF         ! To Marker

sensor.from (                       $S_accTest                    ) = $M_Isys_Track_Moved     ! From Marker
sensor.to (                         $S_accTest                    ) = $M_Carbody_accF         ! To Marker

sensor.from (                       $S_WLR01                      ) = $S_IRWBogie_Front.$S_IRW_Front.$M_IRW_Motor_L ! From Marker
sensor.to (                         $S_WLR01                      ) = $S_IRWBogie_Front.$S_IRW_Front.$M_IRW_Motor_R ! To Marker


! Overwritten substructure values
substr.add.searchpath (   1 ,       $S_IRWBogie_Front.$S_IRW_Front) = '../database'           ! Substructure-specific search path

substr.add.searchpath (   1 ,       $S_IRWBogie_Front.$S_IRW_Rear ) = '../database'           ! Substructure-specific search path

view.fclip.value (                  $S_IRWBogie_Front.$V_WorkingView) = 1.67378377914428711E+00 ! Front clipping plane value
view.bclip.value (                  $S_IRWBogie_Front.$V_WorkingView) = 2.00324523925781250E+03 ! Back clipping plane value

subvar.str (                        $S_IRWBogie_Front.$_VelCtrl_P ) = '$_VehicleVelCtrl_P'    ! Definition

subvar.str (                        $S_IRWBogie_Front.$_VelCtrl_I ) = '$_VehicleVelCtrl_I'    ! Definition

body.m (                            $S_IRWBogie_Front.$B_Frame    ) = $_Mt                    ! Mass of the Body
body.cg.pos (             3 ,       $S_IRWBogie_Front.$B_Frame    ) = $_ht                    ! Center of gravity
body.I.tens (             1 ,   1 , $S_IRWBogie_Front.$B_Frame    ) = $_Itx                   ! Moments of inertia
body.I.tens (             2 ,   2 , $S_IRWBogie_Front.$B_Frame    ) = $_Ity                   ! Moments of inertia
body.I.tens (             3 ,   3 , $S_IRWBogie_Front.$B_Frame    ) = $_Itz                   ! Moments of inertia

marker.pos (              1 ,       $S_IRWBogie_Front.$M_Frame_LongiBar_A) = { 855/2000 - $_Lx3 } ! Position
marker.pos (              2 ,       $S_IRWBogie_Front.$M_Frame_LongiBar_A) = { -$_Lx1/2 }     ! Position

marker.pos (              1 ,       $S_IRWBogie_Front.$M_Frame_LongiBar_B) = { 855/2000 - $_Lx3 } ! Position
marker.pos (              2 ,       $S_IRWBogie_Front.$M_Frame_LongiBar_B) = { $_Lx1/2 }      ! Position

marker.pos (              1 ,       $S_IRWBogie_Front.$M_Frame_LongiBar_C) = { -855/2000 + + $_Lx3 } ! Position
marker.pos (              2 ,       $S_IRWBogie_Front.$M_Frame_LongiBar_C) = { -$_Lx1/2 }     ! Position

marker.pos (              1 ,       $S_IRWBogie_Front.$M_Frame_LongiBar_D) = { -855/2000 + $_Lx3 } ! Position
marker.pos (              2 ,       $S_IRWBogie_Front.$M_Frame_LongiBar_D) = { $_Lx1/2 }      ! Position

joint.st.pos (            1 ,       $S_IRWBogie_Front.$J_Frame    ) = { 7.5+2.5/2 }           ! Position
joint.st.vel (            1 ,       $S_IRWBogie_Front.$J_Frame    ) = 1.66666666666666679E+01 ! Velocity


joint.from (                        $S_IRWBogie_Front.$J_DUM      ) = $M_Carbody_Front        ! From Marker
joint.type (                        $S_IRWBogie_Front.$J_DUM      ) = 0                       ! Type
joint.par (               1 ,       $S_IRWBogie_Front.$J_DUM      ) = 0.00000000000000000E+00 ! [rad] Rotation about alpha
joint.par (               2 ,       $S_IRWBogie_Front.$J_DUM      ) = 0.00000000000000000E+00 ! [rad] Rotation about beta
joint.par (               3 ,       $S_IRWBogie_Front.$J_DUM      ) = 0.00000000000000000E+00 ! [rad] Rotation about gamma
joint.par (               4 ,       $S_IRWBogie_Front.$J_DUM      ) = 0.00000000000000000E+00 ! [m] Translation in x
joint.par (               5 ,       $S_IRWBogie_Front.$J_DUM      ) = 0.00000000000000000E+00 ! [m] Translation in y
joint.par (               6 ,       $S_IRWBogie_Front.$J_DUM      ) = 0.00000000000000000E+00 ! [m] Translation in z
joint.par (               7 ,       $S_IRWBogie_Front.$J_DUM      ) = 0.00000000000000000E+00 ! [-] Rotation sequence


marker.pos (              2 ,       $S_IRWBogie_Front.$M_LongiBar_A_FrameSide) = { -$_L_bar/2 } ! Position

marker.pos (              2 ,       $S_IRWBogie_Front.$M_LongiBar_A_WheelSide) = { $_L_bar/2 } ! Position

joint.st.pos (            1 ,       $S_IRWBogie_Front.$J_LongiBar_A) = 0.00000000000000000E+00 ! Position
joint.st.pos (            2 ,       $S_IRWBogie_Front.$J_LongiBar_A) = 0.00000000000000000E+00 ! Position
joint.st.pos (            3 ,       $S_IRWBogie_Front.$J_LongiBar_A) = { -atan($_Ldy/$_Ldx)+pi/2+pi } ! Position
joint.st.vel (            1 ,       $S_IRWBogie_Front.$J_LongiBar_A) = 0.00000000000000000E+00 ! Velocity
joint.st.vel (            2 ,       $S_IRWBogie_Front.$J_LongiBar_A) = 0.00000000000000000E+00 ! Velocity
joint.st.vel (            3 ,       $S_IRWBogie_Front.$J_LongiBar_A) = 0.00000000000000000E+00 ! Velocity

prim.par (                2 ,       $S_IRWBogie_Front.$P_LongiBar_A) = $_L_bar                ! [m] Height


marker.pos (              2 ,       $S_IRWBogie_Front.$M_LongiBar_B_FrameSide) = { -$_L_bar/2 } ! Position

marker.pos (              2 ,       $S_IRWBogie_Front.$M_LongiBar_B_WheelSide) = { $_L_bar/2 } ! Position

joint.st.pos (            1 ,       $S_IRWBogie_Front.$J_LongiBar_B) = 0.00000000000000000E+00 ! Position
joint.st.pos (            2 ,       $S_IRWBogie_Front.$J_LongiBar_B) = 0.00000000000000000E+00 ! Position
joint.st.pos (            3 ,       $S_IRWBogie_Front.$J_LongiBar_B) = { atan($_Ldy/$_Ldx)+pi/2+pi } ! Position
joint.st.vel (            1 ,       $S_IRWBogie_Front.$J_LongiBar_B) = 0.00000000000000000E+00 ! Velocity
joint.st.vel (            2 ,       $S_IRWBogie_Front.$J_LongiBar_B) = 0.00000000000000000E+00 ! Velocity
joint.st.vel (            3 ,       $S_IRWBogie_Front.$J_LongiBar_B) = 0.00000000000000000E+00 ! Velocity

prim.par (                2 ,       $S_IRWBogie_Front.$P_LongiBar_B) = $_L_bar                ! [m] Height


marker.pos (              2 ,       $S_IRWBogie_Front.$M_LongiBar_C_FrameSide) = { -$_L_bar/2 } ! Position

marker.pos (              2 ,       $S_IRWBogie_Front.$M_LongiBar_C_WheelSide) = { $_L_bar/2 } ! Position

joint.st.pos (            1 ,       $S_IRWBogie_Front.$J_LongiBar_C) = 0.00000000000000000E+00 ! Position
joint.st.pos (            2 ,       $S_IRWBogie_Front.$J_LongiBar_C) = 0.00000000000000000E+00 ! Position
joint.st.pos (            3 ,       $S_IRWBogie_Front.$J_LongiBar_C) = { atan($_Ldy/$_Ldx)+pi/2 } ! Position
joint.st.vel (            1 ,       $S_IRWBogie_Front.$J_LongiBar_C) = 0.00000000000000000E+00 ! Velocity
joint.st.vel (            2 ,       $S_IRWBogie_Front.$J_LongiBar_C) = 0.00000000000000000E+00 ! Velocity
joint.st.vel (            3 ,       $S_IRWBogie_Front.$J_LongiBar_C) = 0.00000000000000000E+00 ! Velocity

prim.par (                2 ,       $S_IRWBogie_Front.$P_LongiBar_C) = $_L_bar                ! [m] Height


marker.pos (              2 ,       $S_IRWBogie_Front.$M_LongiBar_D_FrameSide) = { -$_L_bar/2 } ! Position

marker.pos (              2 ,       $S_IRWBogie_Front.$M_LongiBar_D_WheelSide) = { $_L_bar/2 } ! Position

joint.st.pos (            1 ,       $S_IRWBogie_Front.$J_LongiBar_D) = 0.00000000000000000E+00 ! Position
joint.st.pos (            2 ,       $S_IRWBogie_Front.$J_LongiBar_D) = 0.00000000000000000E+00 ! Position
joint.st.pos (            3 ,       $S_IRWBogie_Front.$J_LongiBar_D) = { -atan($_Ldy/$_Ldx)+pi/2 } ! Position
joint.st.vel (            1 ,       $S_IRWBogie_Front.$J_LongiBar_D) = 0.00000000000000000E+00 ! Velocity
joint.st.vel (            2 ,       $S_IRWBogie_Front.$J_LongiBar_D) = 0.00000000000000000E+00 ! Velocity
joint.st.vel (            3 ,       $S_IRWBogie_Front.$J_LongiBar_D) = 0.00000000000000000E+00 ! Velocity

prim.par (                2 ,       $S_IRWBogie_Front.$P_LongiBar_D) = $_L_bar                ! [m] Height


constr.f (                1 ,       $S_IRWBogie_Front.$L_LockLR_A ) = 0.00000000000000000E+00 ! Forces
constr.f (                2 ,       $S_IRWBogie_Front.$L_LockLR_A ) = 0.00000000000000000E+00 ! Forces
constr.f (                3 ,       $S_IRWBogie_Front.$L_LockLR_A ) = 0.00000000000000000E+00 ! Forces
constr.f (                4 ,       $S_IRWBogie_Front.$L_LockLR_A ) = 0.00000000000000000E+00 ! Forces
constr.f (                5 ,       $S_IRWBogie_Front.$L_LockLR_A ) = 0.00000000000000000E+00 ! Forces
constr.f (                6 ,       $S_IRWBogie_Front.$L_LockLR_A ) = 0.00000000000000000E+00 ! Forces
constr.disabled (                   $S_IRWBogie_Front.$L_LockLR_A ) = 1                       ! Disabled
constr.par (              3 ,       $S_IRWBogie_Front.$L_LockLR_A ) = 0.00000000000000000E+00 ! [m] Translation in x
constr.par (              4 ,       $S_IRWBogie_Front.$L_LockLR_A ) = 0.00000000000000000E+00 ! [m] Translation in y
constr.par (              5 ,       $S_IRWBogie_Front.$L_LockLR_A ) = 0.00000000000000000E+00 ! [m] Translation in z
constr.par (              6 ,       $S_IRWBogie_Front.$L_LockLR_A ) = 0.00000000000000000E+00 ! [-] Rotation sequence
constr.par (              7 ,       $S_IRWBogie_Front.$L_LockLR_A ) = 0.00000000000000000E+00 ! [rad] Rotation about al
constr.par (              8 ,       $S_IRWBogie_Front.$L_LockLR_A ) = 0.00000000000000000E+00 ! [rad] Rotation about be
constr.par (              9 ,       $S_IRWBogie_Front.$L_LockLR_A ) = 0.00000000000000000E+00 ! [rad] Rotation about ga

constr.f (                1 ,       $S_IRWBogie_Front.$L_LockLR_B ) = 0.00000000000000000E+00 ! Forces
constr.f (                2 ,       $S_IRWBogie_Front.$L_LockLR_B ) = 0.00000000000000000E+00 ! Forces
constr.f (                3 ,       $S_IRWBogie_Front.$L_LockLR_B ) = 0.00000000000000000E+00 ! Forces
constr.f (                4 ,       $S_IRWBogie_Front.$L_LockLR_B ) = 0.00000000000000000E+00 ! Forces
constr.f (                5 ,       $S_IRWBogie_Front.$L_LockLR_B ) = 0.00000000000000000E+00 ! Forces
constr.f (                6 ,       $S_IRWBogie_Front.$L_LockLR_B ) = 0.00000000000000000E+00 ! Forces
constr.disabled (                   $S_IRWBogie_Front.$L_LockLR_B ) = 1                       ! Disabled
constr.par (              3 ,       $S_IRWBogie_Front.$L_LockLR_B ) = 0.00000000000000000E+00 ! [m] Translation in x
constr.par (              4 ,       $S_IRWBogie_Front.$L_LockLR_B ) = 0.00000000000000000E+00 ! [m] Translation in y
constr.par (              5 ,       $S_IRWBogie_Front.$L_LockLR_B ) = 0.00000000000000000E+00 ! [m] Translation in z
constr.par (              6 ,       $S_IRWBogie_Front.$L_LockLR_B ) = 0.00000000000000000E+00 ! [-] Rotation sequence
constr.par (              7 ,       $S_IRWBogie_Front.$L_LockLR_B ) = 0.00000000000000000E+00 ! [rad] Rotation about al
constr.par (              8 ,       $S_IRWBogie_Front.$L_LockLR_B ) = 0.00000000000000000E+00 ! [rad] Rotation about be
constr.par (              9 ,       $S_IRWBogie_Front.$L_LockLR_B ) = 0.00000000000000000E+00 ! [rad] Rotation about ga

force.preld.calc (        4 ,       $S_IRWBogie_Front.$F_PS_Spring_A1) = 0                    ! Select Preload cal.
force.txt (                         $S_IRWBogie_Front.$F_PS_Spring_A1) = '注意项目4的符号（负号）' ! Comment
force.par (               4 ,       $S_IRWBogie_Front.$F_PS_Spring_A1) = { -($_Mc+2*$_Mt)*9.81/16 } ! [N] Nominal force F_nom_z
force.par (              20 ,       $S_IRWBogie_Front.$F_PS_Spring_A1) = $_Kpx                ! [N/m] Transl. par. stiffness cp_x
force.par (              21 ,       $S_IRWBogie_Front.$F_PS_Spring_A1) = $_Kpy                ! [N/m] Transl. par. stiffness cp_y
force.par (              22 ,       $S_IRWBogie_Front.$F_PS_Spring_A1) = $_Kpz                ! [N/m] Transl. par. stiffness cp_z
force.par (              28 ,       $S_IRWBogie_Front.$F_PS_Spring_A1) = $_sprCpz             ! [Ns/m] Transl. par. damping dp_z

force.preld.calc (        4 ,       $S_IRWBogie_Front.$F_PS_Spring_B1) = 0                    ! Select Preload cal.
force.txt (                         $S_IRWBogie_Front.$F_PS_Spring_B1) = '注意项目4的符号（负号）' ! Comment
force.par (               4 ,       $S_IRWBogie_Front.$F_PS_Spring_B1) = { -($_Mc+2*$_Mt)*9.81/16 } ! [N] Nominal force F_nom_z
force.par (              20 ,       $S_IRWBogie_Front.$F_PS_Spring_B1) = $_Kpx                ! [N/m] Transl. par. stiffness cp_x
force.par (              21 ,       $S_IRWBogie_Front.$F_PS_Spring_B1) = $_Kpy                ! [N/m] Transl. par. stiffness cp_y
force.par (              22 ,       $S_IRWBogie_Front.$F_PS_Spring_B1) = $_Kpz                ! [N/m] Transl. par. stiffness cp_z
force.par (              28 ,       $S_IRWBogie_Front.$F_PS_Spring_B1) = $_sprCpz             ! [Ns/m] Transl. par. damping dp_z

force.preld.calc (        4 ,       $S_IRWBogie_Front.$F_PS_Spring_C1) = 0                    ! Select Preload cal.
force.txt (                         $S_IRWBogie_Front.$F_PS_Spring_C1) = '注意项目4的符号（负号）' ! Comment
force.par (               4 ,       $S_IRWBogie_Front.$F_PS_Spring_C1) = { -($_Mc+2*$_Mt)*9.81/16 } ! [N] Nominal force F_nom_z
force.par (              20 ,       $S_IRWBogie_Front.$F_PS_Spring_C1) = $_Kpx                ! [N/m] Transl. par. stiffness cp_x
force.par (              21 ,       $S_IRWBogie_Front.$F_PS_Spring_C1) = $_Kpy                ! [N/m] Transl. par. stiffness cp_y
force.par (              22 ,       $S_IRWBogie_Front.$F_PS_Spring_C1) = $_Kpz                ! [N/m] Transl. par. stiffness cp_z
force.par (              28 ,       $S_IRWBogie_Front.$F_PS_Spring_C1) = $_sprCpz             ! [Ns/m] Transl. par. damping dp_z

force.preld.calc (        4 ,       $S_IRWBogie_Front.$F_PS_Spring_D1) = 0                    ! Select Preload cal.
force.txt (                         $S_IRWBogie_Front.$F_PS_Spring_D1) = '注意项目4的符号（负号）' ! Comment
force.par (               4 ,       $S_IRWBogie_Front.$F_PS_Spring_D1) = { -($_Mc+2*$_Mt)*9.81/16 } ! [N] Nominal force F_nom_z
force.par (              20 ,       $S_IRWBogie_Front.$F_PS_Spring_D1) = $_Kpx                ! [N/m] Transl. par. stiffness cp_x
force.par (              21 ,       $S_IRWBogie_Front.$F_PS_Spring_D1) = $_Kpy                ! [N/m] Transl. par. stiffness cp_y
force.par (              22 ,       $S_IRWBogie_Front.$F_PS_Spring_D1) = $_Kpz                ! [N/m] Transl. par. stiffness cp_z
force.par (              28 ,       $S_IRWBogie_Front.$F_PS_Spring_D1) = $_sprCpz             ! [Ns/m] Transl. par. damping dp_z

force.preld.calc (        4 ,       $S_IRWBogie_Front.$F_PS_Spring_A2) = 0                    ! Select Preload cal.
force.txt (                         $S_IRWBogie_Front.$F_PS_Spring_A2) = '注意项目4的符号（负号）' ! Comment
force.par (               4 ,       $S_IRWBogie_Front.$F_PS_Spring_A2) = { -($_Mc+2*$_Mt)*9.81/16 } ! [N] Nominal force F_nom_z
force.par (              20 ,       $S_IRWBogie_Front.$F_PS_Spring_A2) = $_Kpx                ! [N/m] Transl. par. stiffness cp_x
force.par (              21 ,       $S_IRWBogie_Front.$F_PS_Spring_A2) = $_Kpy                ! [N/m] Transl. par. stiffness cp_y
force.par (              22 ,       $S_IRWBogie_Front.$F_PS_Spring_A2) = $_Kpz                ! [N/m] Transl. par. stiffness cp_z
force.par (              28 ,       $S_IRWBogie_Front.$F_PS_Spring_A2) = $_sprCpz             ! [Ns/m] Transl. par. damping dp_z

force.preld.calc (        4 ,       $S_IRWBogie_Front.$F_PS_Spring_B2) = 0                    ! Select Preload cal.
force.txt (                         $S_IRWBogie_Front.$F_PS_Spring_B2) = '注意项目4的符号（负号）' ! Comment
force.par (               4 ,       $S_IRWBogie_Front.$F_PS_Spring_B2) = { -($_Mc+2*$_Mt)*9.81/16 } ! [N] Nominal force F_nom_z
force.par (              20 ,       $S_IRWBogie_Front.$F_PS_Spring_B2) = $_Kpx                ! [N/m] Transl. par. stiffness cp_x
force.par (              21 ,       $S_IRWBogie_Front.$F_PS_Spring_B2) = $_Kpy                ! [N/m] Transl. par. stiffness cp_y
force.par (              22 ,       $S_IRWBogie_Front.$F_PS_Spring_B2) = $_Kpz                ! [N/m] Transl. par. stiffness cp_z
force.par (              28 ,       $S_IRWBogie_Front.$F_PS_Spring_B2) = $_sprCpz             ! [Ns/m] Transl. par. damping dp_z

force.preld.calc (        4 ,       $S_IRWBogie_Front.$F_PS_Spring_C2) = 0                    ! Select Preload cal.
force.txt (                         $S_IRWBogie_Front.$F_PS_Spring_C2) = '注意项目4的符号（负号）' ! Comment
force.par (               4 ,       $S_IRWBogie_Front.$F_PS_Spring_C2) = { -($_Mc+2*$_Mt)*9.81/16 } ! [N] Nominal force F_nom_z
force.par (              20 ,       $S_IRWBogie_Front.$F_PS_Spring_C2) = $_Kpx                ! [N/m] Transl. par. stiffness cp_x
force.par (              21 ,       $S_IRWBogie_Front.$F_PS_Spring_C2) = $_Kpy                ! [N/m] Transl. par. stiffness cp_y
force.par (              22 ,       $S_IRWBogie_Front.$F_PS_Spring_C2) = $_Kpz                ! [N/m] Transl. par. stiffness cp_z
force.par (              28 ,       $S_IRWBogie_Front.$F_PS_Spring_C2) = $_sprCpz             ! [Ns/m] Transl. par. damping dp_z

force.preld.calc (        4 ,       $S_IRWBogie_Front.$F_PS_Spring_D2) = 0                    ! Select Preload cal.
force.txt (                         $S_IRWBogie_Front.$F_PS_Spring_D2) = '注意项目4的符号（负号）' ! Comment
force.par (               4 ,       $S_IRWBogie_Front.$F_PS_Spring_D2) = { -($_Mc+2*$_Mt)*9.81/16 } ! [N] Nominal force F_nom_z
force.par (              20 ,       $S_IRWBogie_Front.$F_PS_Spring_D2) = $_Kpx                ! [N/m] Transl. par. stiffness cp_x
force.par (              21 ,       $S_IRWBogie_Front.$F_PS_Spring_D2) = $_Kpy                ! [N/m] Transl. par. stiffness cp_y
force.par (              22 ,       $S_IRWBogie_Front.$F_PS_Spring_D2) = $_Kpz                ! [N/m] Transl. par. stiffness cp_z
force.par (              28 ,       $S_IRWBogie_Front.$F_PS_Spring_D2) = $_sprCpz             ! [Ns/m] Transl. par. damping dp_z

force.preld.calc (        3 ,       $S_IRWBogie_Front.$F_PS_Dmp_A ) = 0                       ! Select Preload cal.
force.preld.calc (        4 ,       $S_IRWBogie_Front.$F_PS_Dmp_A ) = 0                       ! Select Preload cal.
force.par (               3 ,       $S_IRWBogie_Front.$F_PS_Dmp_A ) = 0.00000000000000000E+00 ! [N] Nominal force in z
force.par (               4 ,       $S_IRWBogie_Front.$F_PS_Dmp_A ) = 0.00000000000000000E+00 ! [N/m] Stiffness in x
force.par (               7 ,       $S_IRWBogie_Front.$F_PS_Dmp_A ) = 1.00000000000000000E+02 ! [Ns/m] Damping in x
force.par (               8 ,       $S_IRWBogie_Front.$F_PS_Dmp_A ) = 1.00000000000000000E+02 ! [Ns/m] Damping in y
force.par (               9 ,       $S_IRWBogie_Front.$F_PS_Dmp_A ) = $_Cpz                   ! [Ns/m] Damping in z

force.preld.calc (        3 ,       $S_IRWBogie_Front.$F_PS_Dmp_B ) = 0                       ! Select Preload cal.
force.preld.calc (        4 ,       $S_IRWBogie_Front.$F_PS_Dmp_B ) = 0                       ! Select Preload cal.
force.par (               3 ,       $S_IRWBogie_Front.$F_PS_Dmp_B ) = 0.00000000000000000E+00 ! [N] Nominal force in z
force.par (               4 ,       $S_IRWBogie_Front.$F_PS_Dmp_B ) = 0.00000000000000000E+00 ! [N/m] Stiffness in x
force.par (               7 ,       $S_IRWBogie_Front.$F_PS_Dmp_B ) = 1.00000000000000000E+02 ! [Ns/m] Damping in x
force.par (               8 ,       $S_IRWBogie_Front.$F_PS_Dmp_B ) = 1.00000000000000000E+02 ! [Ns/m] Damping in y
force.par (               9 ,       $S_IRWBogie_Front.$F_PS_Dmp_B ) = $_Cpz                   ! [Ns/m] Damping in z

force.preld.calc (        3 ,       $S_IRWBogie_Front.$F_PS_Dmp_C ) = 0                       ! Select Preload cal.
force.preld.calc (        4 ,       $S_IRWBogie_Front.$F_PS_Dmp_C ) = 0                       ! Select Preload cal.
force.par (               3 ,       $S_IRWBogie_Front.$F_PS_Dmp_C ) = 0.00000000000000000E+00 ! [N] Nominal force in z
force.par (               4 ,       $S_IRWBogie_Front.$F_PS_Dmp_C ) = 0.00000000000000000E+00 ! [N/m] Stiffness in x
force.par (               7 ,       $S_IRWBogie_Front.$F_PS_Dmp_C ) = 1.00000000000000000E+02 ! [Ns/m] Damping in x
force.par (               8 ,       $S_IRWBogie_Front.$F_PS_Dmp_C ) = 1.00000000000000000E+02 ! [Ns/m] Damping in y
force.par (               9 ,       $S_IRWBogie_Front.$F_PS_Dmp_C ) = $_Cpz                   ! [Ns/m] Damping in z

force.preld.calc (        3 ,       $S_IRWBogie_Front.$F_PS_Dmp_D ) = 0                       ! Select Preload cal.
force.preld.calc (        4 ,       $S_IRWBogie_Front.$F_PS_Dmp_D ) = 0                       ! Select Preload cal.
force.par (               3 ,       $S_IRWBogie_Front.$F_PS_Dmp_D ) = 0.00000000000000000E+00 ! [N] Nominal force in z
force.par (               4 ,       $S_IRWBogie_Front.$F_PS_Dmp_D ) = 0.00000000000000000E+00 ! [N/m] Stiffness in x
force.par (               7 ,       $S_IRWBogie_Front.$F_PS_Dmp_D ) = 1.00000000000000000E+02 ! [Ns/m] Damping in x
force.par (               8 ,       $S_IRWBogie_Front.$F_PS_Dmp_D ) = 1.00000000000000000E+02 ! [Ns/m] Damping in y
force.par (               9 ,       $S_IRWBogie_Front.$F_PS_Dmp_D ) = $_Cpz                   ! [Ns/m] Damping in z

force.preld.calc (        3 ,       $S_IRWBogie_Front.$F_AirSpring_A) = 0                     ! Select Preload cal.
force.par (               3 ,       $S_IRWBogie_Front.$F_AirSpring_A) = { $_Mc*9.81/4 }       ! [N] Nominal force in z
force.par (               4 ,       $S_IRWBogie_Front.$F_AirSpring_A) = $_Ksx                 ! [N/m] Stiffness in x
force.par (               5 ,       $S_IRWBogie_Front.$F_AirSpring_A) = $_Ksy                 ! [N/m] Stiffness in y
force.par (               6 ,       $S_IRWBogie_Front.$F_AirSpring_A) = $_Ksz                 ! [N/m] Stiffness in z
force.par (               9 ,       $S_IRWBogie_Front.$F_AirSpring_A) = $_Csz                 ! [Ns/m] Damping in z

force.preld.calc (        3 ,       $S_IRWBogie_Front.$F_AirSpring_B) = 0                     ! Select Preload cal.
force.par (               3 ,       $S_IRWBogie_Front.$F_AirSpring_B) = { $_Mc*9.81/4 }       ! [N] Nominal force in z
force.par (               4 ,       $S_IRWBogie_Front.$F_AirSpring_B) = $_Ksx                 ! [N/m] Stiffness in x
force.par (               5 ,       $S_IRWBogie_Front.$F_AirSpring_B) = $_Ksy                 ! [N/m] Stiffness in y
force.par (               6 ,       $S_IRWBogie_Front.$F_AirSpring_B) = $_Ksz                 ! [N/m] Stiffness in z
force.par (               9 ,       $S_IRWBogie_Front.$F_AirSpring_B) = $_Csz                 ! [Ns/m] Damping in z

force.disabled (                    $S_IRWBogie_Front.$F_SSLatDmp ) = 0                       ! Disabled
force.par (               9 ,       $S_IRWBogie_Front.$F_SSLatDmp ) = $_Kld                   ! [N/m] Transl. ser. stiffness cs_y
force.par (              15 ,       $S_IRWBogie_Front.$F_SSLatDmp ) = $_Cld                   ! [Ns/m] Transl. ser. damping  ds_y

force.disabled (                    $S_IRWBogie_Front.$F_AntiRoll ) = 0                       ! Disabled
force.par (               4 ,       $S_IRWBogie_Front.$F_AntiRoll ) = $_Kaar                  ! [Nm/rad] Stiffness in al
force.par (               7 ,       $S_IRWBogie_Front.$F_AntiRoll ) = { $_Kaar/100 }          ! [Nms/rad] Damping in al

force.disabled (                    $S_IRWBogie_Front.$F_SS_TractionRod_A) = 0                ! Disabled
force.par (               4 ,       $S_IRWBogie_Front.$F_SS_TractionRod_A) = $_Kstr           ! [N/m] Stiffness in x

force.disabled (                    $S_IRWBogie_Front.$F_SS_TractionRod_B) = 0                ! Disabled
force.par (               4 ,       $S_IRWBogie_Front.$F_SS_TractionRod_B) = $_Kstr           ! [N/m] Stiffness in x

force.preld.calc (        3 ,       $S_IRWBogie_Front.$F_PS_BarFixed_A) = 1                   ! Select Preload cal.
force.disabled (                    $S_IRWBogie_Front.$F_PS_BarFixed_A) = 0                   ! Disabled
force.par (               3 ,       $S_IRWBogie_Front.$F_PS_BarFixed_A) = 0.00000000000000000E+00 ! [N] Nominal force in z

force.preld.calc (        3 ,       $S_IRWBogie_Front.$F_PS_BarFixed_B) = 1                   ! Select Preload cal.
force.disabled (                    $S_IRWBogie_Front.$F_PS_BarFixed_B) = 0                   ! Disabled
force.par (               3 ,       $S_IRWBogie_Front.$F_PS_BarFixed_B) = 0.00000000000000000E+00 ! [N] Nominal force in z

force.preld.calc (        3 ,       $S_IRWBogie_Front.$F_PS_BarFixed_C) = 1                   ! Select Preload cal.
force.disabled (                    $S_IRWBogie_Front.$F_PS_BarFixed_C) = 0                   ! Disabled
force.par (               3 ,       $S_IRWBogie_Front.$F_PS_BarFixed_C) = 0.00000000000000000E+00 ! [N] Nominal force in z

force.preld.calc (        3 ,       $S_IRWBogie_Front.$F_PS_BarFixed_D) = 1                   ! Select Preload cal.
force.disabled (                    $S_IRWBogie_Front.$F_PS_BarFixed_D) = 0                   ! Disabled
force.par (               3 ,       $S_IRWBogie_Front.$F_PS_BarFixed_D) = 0.00000000000000000E+00 ! [N] Nominal force in z

force.disabled (                    $S_IRWBogie_Front.$F_AntiHuntingDmp_A) = 0                ! Disabled
force.par (               7 ,       $S_IRWBogie_Front.$F_AntiHuntingDmp_A) = $_Chx            ! [Ns/m] Damping in x

force.disabled (                    $S_IRWBogie_Front.$F_AntiHuntingDmp_B) = 0                ! Disabled
force.par (               7 ,       $S_IRWBogie_Front.$F_AntiHuntingDmp_B) = $_Chx            ! [Ns/m] Damping in x

force.disabled (                    $S_IRWBogie_Front.$F_Motor_A  ) = 1                       ! Disabled

force.disabled (                    $S_IRWBogie_Front.$F_Motor_B  ) = 1                       ! Disabled

force.disabled (                    $S_IRWBogie_Front.$F_Motor_C  ) = 1                       ! Disabled

force.disabled (                    $S_IRWBogie_Front.$F_Motor_D  ) = 1                       ! Disabled

force.disabled (                    $S_IRWBogie_Front.$F_Motor_A_Simat) = 0                   ! Disabled
force.par (               2 ,       $S_IRWBogie_Front.$F_Motor_A_Simat) = null                ! [-] u-Vector Element force y
force.par (               5 ,       $S_IRWBogie_Front.$F_Motor_A_Simat) = $S_IRWBogie_Front.$UE_UA_Simat ! [-] u-Vector Element torque y

force.disabled (                    $S_IRWBogie_Front.$F_Motor_B_Simat) = 0                   ! Disabled
force.par (               2 ,       $S_IRWBogie_Front.$F_Motor_B_Simat) = null                ! [-] u-Vector Element force y
force.par (               5 ,       $S_IRWBogie_Front.$F_Motor_B_Simat) = $S_IRWBogie_Front.$UE_UB_Simat ! [-] u-Vector Element torque y

force.disabled (                    $S_IRWBogie_Front.$F_Motor_C_Simat) = 0                   ! Disabled
force.par (               2 ,       $S_IRWBogie_Front.$F_Motor_C_Simat) = null                ! [-] u-Vector Element force y
force.par (               5 ,       $S_IRWBogie_Front.$F_Motor_C_Simat) = $S_IRWBogie_Front.$UE_UC_Simat ! [-] u-Vector Element torque y

force.disabled (                    $S_IRWBogie_Front.$F_Motor_D_Simat) = 0                   ! Disabled
force.par (               2 ,       $S_IRWBogie_Front.$F_Motor_D_Simat) = null                ! [-] u-Vector Element force y
force.par (               5 ,       $S_IRWBogie_Front.$F_Motor_D_Simat) = $S_IRWBogie_Front.$UE_UD_Simat ! [-] u-Vector Element torque y

control.par (            10 ,       $S_IRWBogie_Front.$C_Ref_Speed_AllWheels) = $S_IRWBogie_Front.$UE_Ref_Vel_X ! [-]  Ch 1: u-Vector Element

control.par (            13 ,       $S_IRWBogie_Front.$C_RotToVelX_A) = { -860/2000 }         ! [-]  Ch 1: Gain factor C

control.par (             4 ,       $S_IRWBogie_Front.$C_VelDiff_A_Left) = $C_CurveLeft       ! [-] Input Element ch. 2

control.st.dyn (          2 ,       $S_IRWBogie_Front.$C_VelCtrl_A) = 0.00000000000000000E+00 ! Dynamic States
control.st.equi (         2 ,       $S_IRWBogie_Front.$C_VelCtrl_A) = 0                       ! Equilibrium
control.par (            14 ,       $S_IRWBogie_Front.$C_VelCtrl_A) = 6.00000000000000000E+00 ! [-] Controller type
control.par (            15 ,       $S_IRWBogie_Front.$C_VelCtrl_A) = $_VehicleVelCtrl_P      ! [-] Proportional gain factor
control.par (            16 ,       $S_IRWBogie_Front.$C_VelCtrl_A) = $_VehicleVelCtrl_I      ! [s] Integral time constant
control.par (            17 ,       $S_IRWBogie_Front.$C_VelCtrl_A) = 0.00000000000000000E+00 ! [s] Derivative time constant
control.par (            18 ,       $S_IRWBogie_Front.$C_VelCtrl_A) = 1.00000000000000005E-04 ! [s] Lowpass time constant T1
control.par (            19 ,       $S_IRWBogie_Front.$C_VelCtrl_A) = 0.00000000000000000E+00 ! [s] Lowpass time constant T2
control.par (            20 ,       $S_IRWBogie_Front.$C_VelCtrl_A) = 0.00000000000000000E+00 ! [s] Lowpass time constant T3
control.par (            21 ,       $S_IRWBogie_Front.$C_VelCtrl_A) = 0.00000000000000000E+00 ! [s] Lowpass time constant T4
control.par (            23 ,       $S_IRWBogie_Front.$C_VelCtrl_A) = 0.00000000000000000E+00 ! [-] Scale numerator

control.par (             4 ,       $S_IRWBogie_Front.$C_VelDiff_B_Right) = $C_CurveRight     ! [-] Input Element ch. 2

control.st.dyn (          2 ,       $S_IRWBogie_Front.$C_VelCtrl_B) = 0.00000000000000000E+00 ! Dynamic States
control.st.equi (         2 ,       $S_IRWBogie_Front.$C_VelCtrl_B) = 0                       ! Equilibrium
control.par (            14 ,       $S_IRWBogie_Front.$C_VelCtrl_B) = 6.00000000000000000E+00 ! [-] Controller type
control.par (            15 ,       $S_IRWBogie_Front.$C_VelCtrl_B) = $_VehicleVelCtrl_P      ! [-] Proportional gain factor
control.par (            16 ,       $S_IRWBogie_Front.$C_VelCtrl_B) = $_VehicleVelCtrl_I      ! [s] Integral time constant
control.par (            17 ,       $S_IRWBogie_Front.$C_VelCtrl_B) = 0.00000000000000000E+00 ! [s] Derivative time constant
control.par (            18 ,       $S_IRWBogie_Front.$C_VelCtrl_B) = 1.00000000000000005E-04 ! [s] Lowpass time constant T1
control.par (            19 ,       $S_IRWBogie_Front.$C_VelCtrl_B) = 0.00000000000000000E+00 ! [s] Lowpass time constant T2
control.par (            20 ,       $S_IRWBogie_Front.$C_VelCtrl_B) = 0.00000000000000000E+00 ! [s] Lowpass time constant T3
control.par (            21 ,       $S_IRWBogie_Front.$C_VelCtrl_B) = 0.00000000000000000E+00 ! [s] Lowpass time constant T4
control.par (            23 ,       $S_IRWBogie_Front.$C_VelCtrl_B) = 0.00000000000000000E+00 ! [-] Scale numerator

control.par (             4 ,       $S_IRWBogie_Front.$C_VelDiff_C_Left) = $C_CurveLeft       ! [-] Input Element ch. 2

control.st.dyn (          2 ,       $S_IRWBogie_Front.$C_VelCtrl_C) = 0.00000000000000000E+00 ! Dynamic States
control.st.equi (         2 ,       $S_IRWBogie_Front.$C_VelCtrl_C) = 0                       ! Equilibrium
control.par (            14 ,       $S_IRWBogie_Front.$C_VelCtrl_C) = 6.00000000000000000E+00 ! [-] Controller type
control.par (            15 ,       $S_IRWBogie_Front.$C_VelCtrl_C) = $_VehicleVelCtrl_P      ! [-] Proportional gain factor
control.par (            16 ,       $S_IRWBogie_Front.$C_VelCtrl_C) = $_VehicleVelCtrl_I      ! [s] Integral time constant
control.par (            17 ,       $S_IRWBogie_Front.$C_VelCtrl_C) = 0.00000000000000000E+00 ! [s] Derivative time constant
control.par (            18 ,       $S_IRWBogie_Front.$C_VelCtrl_C) = 1.00000000000000005E-04 ! [s] Lowpass time constant T1
control.par (            19 ,       $S_IRWBogie_Front.$C_VelCtrl_C) = 0.00000000000000000E+00 ! [s] Lowpass time constant T2
control.par (            20 ,       $S_IRWBogie_Front.$C_VelCtrl_C) = 0.00000000000000000E+00 ! [s] Lowpass time constant T3
control.par (            21 ,       $S_IRWBogie_Front.$C_VelCtrl_C) = 0.00000000000000000E+00 ! [s] Lowpass time constant T4
control.par (            23 ,       $S_IRWBogie_Front.$C_VelCtrl_C) = 0.00000000000000000E+00 ! [-] Scale numerator

control.par (             4 ,       $S_IRWBogie_Front.$C_VelDiff_D_Right) = $C_CurveRight     ! [-] Input Element ch. 2

control.st.dyn (          2 ,       $S_IRWBogie_Front.$C_VelCtrl_D) = 0.00000000000000000E+00 ! Dynamic States
control.st.equi (         2 ,       $S_IRWBogie_Front.$C_VelCtrl_D) = 0                       ! Equilibrium
control.par (            14 ,       $S_IRWBogie_Front.$C_VelCtrl_D) = 6.00000000000000000E+00 ! [-] Controller type
control.par (            15 ,       $S_IRWBogie_Front.$C_VelCtrl_D) = $_VehicleVelCtrl_P      ! [-] Proportional gain factor
control.par (            16 ,       $S_IRWBogie_Front.$C_VelCtrl_D) = $_VehicleVelCtrl_I      ! [s] Integral time constant
control.par (            17 ,       $S_IRWBogie_Front.$C_VelCtrl_D) = 0.00000000000000000E+00 ! [s] Derivative time constant
control.par (            18 ,       $S_IRWBogie_Front.$C_VelCtrl_D) = 1.00000000000000005E-04 ! [s] Lowpass time constant T1
control.par (            19 ,       $S_IRWBogie_Front.$C_VelCtrl_D) = 0.00000000000000000E+00 ! [s] Lowpass time constant T2
control.par (            20 ,       $S_IRWBogie_Front.$C_VelCtrl_D) = 0.00000000000000000E+00 ! [s] Lowpass time constant T3
control.par (            21 ,       $S_IRWBogie_Front.$C_VelCtrl_D) = 0.00000000000000000E+00 ! [s] Lowpass time constant T4
control.par (            23 ,       $S_IRWBogie_Front.$C_VelCtrl_D) = 0.00000000000000000E+00 ! [-] Scale numerator

uele.excit (                        $S_IRWBogie_Front.$UE_Ref_Vel_X) = $E_Vehicle_RefVelX     ! Referenced Excitation

view.fclip.value (                  $S_IRWBogie_Front.$S_IRW_Front.$V_WorkingView) = 1.01161129772663116E-01 ! Front clipping plane value
view.bclip.value (                  $S_IRWBogie_Front.$S_IRW_Front.$V_WorkingView) = 1.01161125183105469E+02 ! Back clipping plane value

joint.st.pos (            1 ,       $S_IRWBogie_Front.$S_IRW_Front.$J_DumAxle) = { 17500/2000+2.5/2 } ! Position
joint.st.vel (            1 ,       $S_IRWBogie_Front.$S_IRW_Front.$J_DumAxle) = 1.66666666666666679E+01 ! Velocity


joint.st.vel (            1 ,       $S_IRWBogie_Front.$S_IRW_Front.$J_IRW_L) = -3.87327161635993491E+01 ! Velocity


joint.st.vel (            1 ,       $S_IRWBogie_Front.$S_IRW_Front.$J_IRW_R) = -3.87327161637308706E+01 ! Velocity


marker.pos (              2 ,       $S_IRWBogie_Front.$S_IRW_Front.$M_AxleBridge_LongiBar_A) = { -$_Lx2/2 } ! Position

marker.pos (              2 ,       $S_IRWBogie_Front.$S_IRW_Front.$M_AxleBridge_LongiBar_B) = { $_Lx2/2 } ! Position


force.st.desc (           1 ,       $S_IRWBogie_Front.$S_IRW_Front.$F_RWContact_RWP_IRW_Left) = -2.62447781552461491E-04 ! Descriptive states

force.st.desc (           1 ,       $S_IRWBogie_Front.$S_IRW_Front.$F_RWContact_RWP_IRW_Right) = -2.62447782889062243E-04 ! Descriptive states

view.fclip.value (                  $S_IRWBogie_Front.$S_IRW_Rear.$V_WorkingView) = 1.01161129772663116E-01 ! Front clipping plane value
view.bclip.value (                  $S_IRWBogie_Front.$S_IRW_Rear.$V_WorkingView) = 1.01161125183105469E+02 ! Back clipping plane value

joint.st.pos (            1 ,       $S_IRWBogie_Front.$S_IRW_Rear.$J_DumAxle) = { 17500/2000-2.5/2 } ! Position
joint.st.vel (            1 ,       $S_IRWBogie_Front.$S_IRW_Rear.$J_DumAxle) = 1.66666666666666679E+01 ! Velocity


joint.st.vel (            1 ,       $S_IRWBogie_Front.$S_IRW_Rear.$J_IRW_L) = -3.87327161636119541E+01 ! Velocity


joint.st.vel (            1 ,       $S_IRWBogie_Front.$S_IRW_Rear.$J_IRW_R) = -3.87327161638101742E+01 ! Velocity


marker.pos (              2 ,       $S_IRWBogie_Front.$S_IRW_Rear.$M_AxleBridge_LongiBar_A) = { -$_Lx2/2 } ! Position

marker.pos (              2 ,       $S_IRWBogie_Front.$S_IRW_Rear.$M_AxleBridge_LongiBar_B) = { $_Lx2/2 } ! Position


force.st.desc (           1 ,       $S_IRWBogie_Front.$S_IRW_Rear.$F_RWContact_RWP_IRW_Left) = -2.62447781680553364E-04 ! Descriptive states

force.st.desc (           1 ,       $S_IRWBogie_Front.$S_IRW_Rear.$F_RWContact_RWP_IRW_Right) = -2.62447783695009403E-04 ! Descriptive states

substr.add.searchpath (   1 ,       $S_IRWBogie_Rear.$S_IRW_Front ) = '../database'           ! Substructure-specific search path

substr.add.searchpath (   1 ,       $S_IRWBogie_Rear.$S_IRW_Rear  ) = '../database'           ! Substructure-specific search path

view.fclip.value (                  $S_IRWBogie_Rear.$V_WorkingView) = 1.67378377914428711E+00 ! Front clipping plane value
view.bclip.value (                  $S_IRWBogie_Rear.$V_WorkingView) = 2.00324523925781250E+03 ! Back clipping plane value

subvar.str (                        $S_IRWBogie_Rear.$_VelCtrl_P  ) = '$_VehicleVelCtrl_P'    ! Definition

subvar.str (                        $S_IRWBogie_Rear.$_VelCtrl_I  ) = '$_VehicleVelCtrl_I'    ! Definition

body.m (                            $S_IRWBogie_Rear.$B_Frame     ) = $_Mt                    ! Mass of the Body
body.cg.pos (             3 ,       $S_IRWBogie_Rear.$B_Frame     ) = $_ht                    ! Center of gravity
body.I.tens (             1 ,   1 , $S_IRWBogie_Rear.$B_Frame     ) = $_Itx                   ! Moments of inertia
body.I.tens (             2 ,   2 , $S_IRWBogie_Rear.$B_Frame     ) = $_Ity                   ! Moments of inertia
body.I.tens (             3 ,   3 , $S_IRWBogie_Rear.$B_Frame     ) = $_Itz                   ! Moments of inertia

marker.pos (              1 ,       $S_IRWBogie_Rear.$M_Frame_LongiBar_A) = { 855/2000 - $_Lx3 } ! Position
marker.pos (              2 ,       $S_IRWBogie_Rear.$M_Frame_LongiBar_A) = { -$_Lx1/2 }      ! Position

marker.pos (              1 ,       $S_IRWBogie_Rear.$M_Frame_LongiBar_B) = { 855/2000 -  $_Lx3 } ! Position
marker.pos (              2 ,       $S_IRWBogie_Rear.$M_Frame_LongiBar_B) = { $_Lx1/2 }       ! Position

marker.pos (              1 ,       $S_IRWBogie_Rear.$M_Frame_LongiBar_C) = { -855/2000 + $_Lx3 } ! Position
marker.pos (              2 ,       $S_IRWBogie_Rear.$M_Frame_LongiBar_C) = { -$_Lx1/2 }      ! Position

marker.pos (              1 ,       $S_IRWBogie_Rear.$M_Frame_LongiBar_D) = { -855/2000 + $_Lx3 } ! Position
marker.pos (              2 ,       $S_IRWBogie_Rear.$M_Frame_LongiBar_D) = { $_Lx1/2 }       ! Position

joint.st.pos (            1 ,       $S_IRWBogie_Rear.$J_Frame     ) = { -7.5-2.5/2 }          ! Position
joint.st.vel (            1 ,       $S_IRWBogie_Rear.$J_Frame     ) = 1.66666666666666679E+01 ! Velocity


joint.from (                        $S_IRWBogie_Rear.$J_DUM       ) = $M_Carbody_Rear         ! From Marker
joint.type (                        $S_IRWBogie_Rear.$J_DUM       ) = 0                       ! Type
joint.par (               1 ,       $S_IRWBogie_Rear.$J_DUM       ) = 0.00000000000000000E+00 ! [rad] Rotation about alpha
joint.par (               2 ,       $S_IRWBogie_Rear.$J_DUM       ) = 0.00000000000000000E+00 ! [rad] Rotation about beta
joint.par (               4 ,       $S_IRWBogie_Rear.$J_DUM       ) = 0.00000000000000000E+00 ! [m] Translation in x
joint.par (               5 ,       $S_IRWBogie_Rear.$J_DUM       ) = 0.00000000000000000E+00 ! [m] Translation in y
joint.par (               6 ,       $S_IRWBogie_Rear.$J_DUM       ) = 0.00000000000000000E+00 ! [m] Translation in z
joint.par (               7 ,       $S_IRWBogie_Rear.$J_DUM       ) = 0.00000000000000000E+00 ! [-] Rotation sequence


marker.pos (              2 ,       $S_IRWBogie_Rear.$M_LongiBar_A_FrameSide) = { -$_L_bar/2 } ! Position

marker.pos (              2 ,       $S_IRWBogie_Rear.$M_LongiBar_A_WheelSide) = { $_L_bar/2 } ! Position

joint.st.pos (            1 ,       $S_IRWBogie_Rear.$J_LongiBar_A) = 0.00000000000000000E+00 ! Position
joint.st.pos (            2 ,       $S_IRWBogie_Rear.$J_LongiBar_A) = 0.00000000000000000E+00 ! Position
joint.st.pos (            3 ,       $S_IRWBogie_Rear.$J_LongiBar_A) = { -atan($_Ldy/$_Ldx)+pi/2+pi } ! Position
joint.st.vel (            1 ,       $S_IRWBogie_Rear.$J_LongiBar_A) = 0.00000000000000000E+00 ! Velocity
joint.st.vel (            2 ,       $S_IRWBogie_Rear.$J_LongiBar_A) = 0.00000000000000000E+00 ! Velocity
joint.st.vel (            3 ,       $S_IRWBogie_Rear.$J_LongiBar_A) = 0.00000000000000000E+00 ! Velocity

prim.par (                2 ,       $S_IRWBogie_Rear.$P_LongiBar_A) = $_L_bar                 ! [m] Height


marker.pos (              2 ,       $S_IRWBogie_Rear.$M_LongiBar_B_FrameSide) = { -$_L_bar/2 } ! Position

marker.pos (              2 ,       $S_IRWBogie_Rear.$M_LongiBar_B_WheelSide) = { $_L_bar/2 } ! Position

joint.st.pos (            1 ,       $S_IRWBogie_Rear.$J_LongiBar_B) = 0.00000000000000000E+00 ! Position
joint.st.pos (            2 ,       $S_IRWBogie_Rear.$J_LongiBar_B) = 0.00000000000000000E+00 ! Position
joint.st.pos (            3 ,       $S_IRWBogie_Rear.$J_LongiBar_B) = { atan($_Ldy/$_Ldx)+pi/2+pi } ! Position
joint.st.vel (            1 ,       $S_IRWBogie_Rear.$J_LongiBar_B) = 0.00000000000000000E+00 ! Velocity
joint.st.vel (            2 ,       $S_IRWBogie_Rear.$J_LongiBar_B) = 0.00000000000000000E+00 ! Velocity
joint.st.vel (            3 ,       $S_IRWBogie_Rear.$J_LongiBar_B) = 0.00000000000000000E+00 ! Velocity

prim.par (                2 ,       $S_IRWBogie_Rear.$P_LongiBar_B) = $_L_bar                 ! [m] Height


marker.pos (              2 ,       $S_IRWBogie_Rear.$M_LongiBar_C_FrameSide) = { -$_L_bar/2 } ! Position

marker.pos (              2 ,       $S_IRWBogie_Rear.$M_LongiBar_C_WheelSide) = { $_L_bar/2 } ! Position

joint.st.pos (            1 ,       $S_IRWBogie_Rear.$J_LongiBar_C) = 0.00000000000000000E+00 ! Position
joint.st.pos (            2 ,       $S_IRWBogie_Rear.$J_LongiBar_C) = 0.00000000000000000E+00 ! Position
joint.st.pos (            3 ,       $S_IRWBogie_Rear.$J_LongiBar_C) = { atan($_Ldy/$_Ldx)+pi/2 } ! Position
joint.st.vel (            1 ,       $S_IRWBogie_Rear.$J_LongiBar_C) = 0.00000000000000000E+00 ! Velocity
joint.st.vel (            2 ,       $S_IRWBogie_Rear.$J_LongiBar_C) = 0.00000000000000000E+00 ! Velocity
joint.st.vel (            3 ,       $S_IRWBogie_Rear.$J_LongiBar_C) = 0.00000000000000000E+00 ! Velocity

prim.par (                2 ,       $S_IRWBogie_Rear.$P_LongiBar_C) = $_L_bar                 ! [m] Height


marker.pos (              2 ,       $S_IRWBogie_Rear.$M_LongiBar_D_FrameSide) = { -$_L_bar/2 } ! Position

marker.pos (              2 ,       $S_IRWBogie_Rear.$M_LongiBar_D_WheelSide) = { $_L_bar/2 } ! Position

joint.st.pos (            1 ,       $S_IRWBogie_Rear.$J_LongiBar_D) = 0.00000000000000000E+00 ! Position
joint.st.pos (            2 ,       $S_IRWBogie_Rear.$J_LongiBar_D) = 0.00000000000000000E+00 ! Position
joint.st.pos (            3 ,       $S_IRWBogie_Rear.$J_LongiBar_D) = { -atan($_Ldy/$_Ldx)+pi/2 } ! Position
joint.st.vel (            1 ,       $S_IRWBogie_Rear.$J_LongiBar_D) = 0.00000000000000000E+00 ! Velocity
joint.st.vel (            2 ,       $S_IRWBogie_Rear.$J_LongiBar_D) = 0.00000000000000000E+00 ! Velocity
joint.st.vel (            3 ,       $S_IRWBogie_Rear.$J_LongiBar_D) = 0.00000000000000000E+00 ! Velocity

prim.par (                2 ,       $S_IRWBogie_Rear.$P_LongiBar_D) = $_L_bar                 ! [m] Height


constr.f (                1 ,       $S_IRWBogie_Rear.$L_LockLR_A  ) = 0.00000000000000000E+00 ! Forces
constr.f (                2 ,       $S_IRWBogie_Rear.$L_LockLR_A  ) = 0.00000000000000000E+00 ! Forces
constr.f (                3 ,       $S_IRWBogie_Rear.$L_LockLR_A  ) = 0.00000000000000000E+00 ! Forces
constr.f (                4 ,       $S_IRWBogie_Rear.$L_LockLR_A  ) = 0.00000000000000000E+00 ! Forces
constr.f (                5 ,       $S_IRWBogie_Rear.$L_LockLR_A  ) = 0.00000000000000000E+00 ! Forces
constr.f (                6 ,       $S_IRWBogie_Rear.$L_LockLR_A  ) = 0.00000000000000000E+00 ! Forces
constr.disabled (                   $S_IRWBogie_Rear.$L_LockLR_A  ) = 1                       ! Disabled
constr.par (              3 ,       $S_IRWBogie_Rear.$L_LockLR_A  ) = 0.00000000000000000E+00 ! [m] Translation in x
constr.par (              4 ,       $S_IRWBogie_Rear.$L_LockLR_A  ) = 0.00000000000000000E+00 ! [m] Translation in y
constr.par (              5 ,       $S_IRWBogie_Rear.$L_LockLR_A  ) = 0.00000000000000000E+00 ! [m] Translation in z
constr.par (              6 ,       $S_IRWBogie_Rear.$L_LockLR_A  ) = 0.00000000000000000E+00 ! [-] Rotation sequence
constr.par (              7 ,       $S_IRWBogie_Rear.$L_LockLR_A  ) = 0.00000000000000000E+00 ! [rad] Rotation about al
constr.par (              8 ,       $S_IRWBogie_Rear.$L_LockLR_A  ) = 0.00000000000000000E+00 ! [rad] Rotation about be
constr.par (              9 ,       $S_IRWBogie_Rear.$L_LockLR_A  ) = 0.00000000000000000E+00 ! [rad] Rotation about ga

constr.f (                1 ,       $S_IRWBogie_Rear.$L_LockLR_B  ) = 0.00000000000000000E+00 ! Forces
constr.f (                2 ,       $S_IRWBogie_Rear.$L_LockLR_B  ) = 0.00000000000000000E+00 ! Forces
constr.f (                3 ,       $S_IRWBogie_Rear.$L_LockLR_B  ) = 0.00000000000000000E+00 ! Forces
constr.f (                4 ,       $S_IRWBogie_Rear.$L_LockLR_B  ) = 0.00000000000000000E+00 ! Forces
constr.f (                5 ,       $S_IRWBogie_Rear.$L_LockLR_B  ) = 0.00000000000000000E+00 ! Forces
constr.f (                6 ,       $S_IRWBogie_Rear.$L_LockLR_B  ) = 0.00000000000000000E+00 ! Forces
constr.disabled (                   $S_IRWBogie_Rear.$L_LockLR_B  ) = 1                       ! Disabled
constr.par (              3 ,       $S_IRWBogie_Rear.$L_LockLR_B  ) = 0.00000000000000000E+00 ! [m] Translation in x
constr.par (              4 ,       $S_IRWBogie_Rear.$L_LockLR_B  ) = 0.00000000000000000E+00 ! [m] Translation in y
constr.par (              5 ,       $S_IRWBogie_Rear.$L_LockLR_B  ) = 0.00000000000000000E+00 ! [m] Translation in z
constr.par (              6 ,       $S_IRWBogie_Rear.$L_LockLR_B  ) = 0.00000000000000000E+00 ! [-] Rotation sequence
constr.par (              7 ,       $S_IRWBogie_Rear.$L_LockLR_B  ) = 0.00000000000000000E+00 ! [rad] Rotation about al
constr.par (              8 ,       $S_IRWBogie_Rear.$L_LockLR_B  ) = 0.00000000000000000E+00 ! [rad] Rotation about be
constr.par (              9 ,       $S_IRWBogie_Rear.$L_LockLR_B  ) = 0.00000000000000000E+00 ! [rad] Rotation about ga

force.preld.calc (        4 ,       $S_IRWBogie_Rear.$F_PS_Spring_A1) = 0                     ! Select Preload cal.
force.par (               4 ,       $S_IRWBogie_Rear.$F_PS_Spring_A1) = { -($_Mc+2*$_Mt)*9.81/16 } ! [N] Nominal force F_nom_z
force.par (              20 ,       $S_IRWBogie_Rear.$F_PS_Spring_A1) = $_Kpx                 ! [N/m] Transl. par. stiffness cp_x
force.par (              21 ,       $S_IRWBogie_Rear.$F_PS_Spring_A1) = $_Kpy                 ! [N/m] Transl. par. stiffness cp_y
force.par (              22 ,       $S_IRWBogie_Rear.$F_PS_Spring_A1) = $_Kpz                 ! [N/m] Transl. par. stiffness cp_z
force.par (              28 ,       $S_IRWBogie_Rear.$F_PS_Spring_A1) = $_sprCpz              ! [Ns/m] Transl. par. damping dp_z

force.preld.calc (        4 ,       $S_IRWBogie_Rear.$F_PS_Spring_B1) = 0                     ! Select Preload cal.
force.par (               4 ,       $S_IRWBogie_Rear.$F_PS_Spring_B1) = { -($_Mc+2*$_Mt)*9.81/16 } ! [N] Nominal force F_nom_z
force.par (              20 ,       $S_IRWBogie_Rear.$F_PS_Spring_B1) = $_Kpx                 ! [N/m] Transl. par. stiffness cp_x
force.par (              21 ,       $S_IRWBogie_Rear.$F_PS_Spring_B1) = $_Kpy                 ! [N/m] Transl. par. stiffness cp_y
force.par (              22 ,       $S_IRWBogie_Rear.$F_PS_Spring_B1) = $_Kpz                 ! [N/m] Transl. par. stiffness cp_z
force.par (              28 ,       $S_IRWBogie_Rear.$F_PS_Spring_B1) = $_sprCpz              ! [Ns/m] Transl. par. damping dp_z

force.preld.calc (        4 ,       $S_IRWBogie_Rear.$F_PS_Spring_C1) = 0                     ! Select Preload cal.
force.par (               4 ,       $S_IRWBogie_Rear.$F_PS_Spring_C1) = { -($_Mc+2*$_Mt)*9.81/16 } ! [N] Nominal force F_nom_z
force.par (              20 ,       $S_IRWBogie_Rear.$F_PS_Spring_C1) = $_Kpx                 ! [N/m] Transl. par. stiffness cp_x
force.par (              21 ,       $S_IRWBogie_Rear.$F_PS_Spring_C1) = $_Kpy                 ! [N/m] Transl. par. stiffness cp_y
force.par (              22 ,       $S_IRWBogie_Rear.$F_PS_Spring_C1) = $_Kpz                 ! [N/m] Transl. par. stiffness cp_z
force.par (              28 ,       $S_IRWBogie_Rear.$F_PS_Spring_C1) = $_sprCpz              ! [Ns/m] Transl. par. damping dp_z

force.preld.calc (        4 ,       $S_IRWBogie_Rear.$F_PS_Spring_D1) = 0                     ! Select Preload cal.
force.par (               4 ,       $S_IRWBogie_Rear.$F_PS_Spring_D1) = { -($_Mc+2*$_Mt)*9.81/16 } ! [N] Nominal force F_nom_z
force.par (              20 ,       $S_IRWBogie_Rear.$F_PS_Spring_D1) = $_Kpx                 ! [N/m] Transl. par. stiffness cp_x
force.par (              21 ,       $S_IRWBogie_Rear.$F_PS_Spring_D1) = $_Kpy                 ! [N/m] Transl. par. stiffness cp_y
force.par (              22 ,       $S_IRWBogie_Rear.$F_PS_Spring_D1) = $_Kpz                 ! [N/m] Transl. par. stiffness cp_z
force.par (              28 ,       $S_IRWBogie_Rear.$F_PS_Spring_D1) = $_sprCpz              ! [Ns/m] Transl. par. damping dp_z

force.preld.calc (        4 ,       $S_IRWBogie_Rear.$F_PS_Spring_A2) = 0                     ! Select Preload cal.
force.par (               4 ,       $S_IRWBogie_Rear.$F_PS_Spring_A2) = { -($_Mc+2*$_Mt)*9.81/16 } ! [N] Nominal force F_nom_z
force.par (              20 ,       $S_IRWBogie_Rear.$F_PS_Spring_A2) = $_Kpx                 ! [N/m] Transl. par. stiffness cp_x
force.par (              21 ,       $S_IRWBogie_Rear.$F_PS_Spring_A2) = $_Kpy                 ! [N/m] Transl. par. stiffness cp_y
force.par (              22 ,       $S_IRWBogie_Rear.$F_PS_Spring_A2) = $_Kpz                 ! [N/m] Transl. par. stiffness cp_z
force.par (              28 ,       $S_IRWBogie_Rear.$F_PS_Spring_A2) = $_sprCpz              ! [Ns/m] Transl. par. damping dp_z

force.preld.calc (        4 ,       $S_IRWBogie_Rear.$F_PS_Spring_B2) = 0                     ! Select Preload cal.
force.par (               4 ,       $S_IRWBogie_Rear.$F_PS_Spring_B2) = { -($_Mc+2*$_Mt)*9.81/16 } ! [N] Nominal force F_nom_z
force.par (              20 ,       $S_IRWBogie_Rear.$F_PS_Spring_B2) = $_Kpx                 ! [N/m] Transl. par. stiffness cp_x
force.par (              21 ,       $S_IRWBogie_Rear.$F_PS_Spring_B2) = $_Kpy                 ! [N/m] Transl. par. stiffness cp_y
force.par (              22 ,       $S_IRWBogie_Rear.$F_PS_Spring_B2) = $_Kpz                 ! [N/m] Transl. par. stiffness cp_z
force.par (              28 ,       $S_IRWBogie_Rear.$F_PS_Spring_B2) = $_sprCpz              ! [Ns/m] Transl. par. damping dp_z

force.preld.calc (        4 ,       $S_IRWBogie_Rear.$F_PS_Spring_C2) = 0                     ! Select Preload cal.
force.par (               4 ,       $S_IRWBogie_Rear.$F_PS_Spring_C2) = { -($_Mc+2*$_Mt)*9.81/16 } ! [N] Nominal force F_nom_z
force.par (              20 ,       $S_IRWBogie_Rear.$F_PS_Spring_C2) = $_Kpx                 ! [N/m] Transl. par. stiffness cp_x
force.par (              21 ,       $S_IRWBogie_Rear.$F_PS_Spring_C2) = $_Kpy                 ! [N/m] Transl. par. stiffness cp_y
force.par (              22 ,       $S_IRWBogie_Rear.$F_PS_Spring_C2) = $_Kpz                 ! [N/m] Transl. par. stiffness cp_z
force.par (              28 ,       $S_IRWBogie_Rear.$F_PS_Spring_C2) = $_sprCpz              ! [Ns/m] Transl. par. damping dp_z

force.preld.calc (        4 ,       $S_IRWBogie_Rear.$F_PS_Spring_D2) = 0                     ! Select Preload cal.
force.par (               4 ,       $S_IRWBogie_Rear.$F_PS_Spring_D2) = { -($_Mc+2*$_Mt)*9.81/16 } ! [N] Nominal force F_nom_z
force.par (              20 ,       $S_IRWBogie_Rear.$F_PS_Spring_D2) = $_Kpx                 ! [N/m] Transl. par. stiffness cp_x
force.par (              21 ,       $S_IRWBogie_Rear.$F_PS_Spring_D2) = $_Kpy                 ! [N/m] Transl. par. stiffness cp_y
force.par (              22 ,       $S_IRWBogie_Rear.$F_PS_Spring_D2) = $_Kpz                 ! [N/m] Transl. par. stiffness cp_z
force.par (              28 ,       $S_IRWBogie_Rear.$F_PS_Spring_D2) = $_sprCpz              ! [Ns/m] Transl. par. damping dp_z

force.preld.calc (        3 ,       $S_IRWBogie_Rear.$F_PS_Dmp_A  ) = 0                       ! Select Preload cal.
force.preld.calc (        4 ,       $S_IRWBogie_Rear.$F_PS_Dmp_A  ) = 0                       ! Select Preload cal.
force.par (               3 ,       $S_IRWBogie_Rear.$F_PS_Dmp_A  ) = 0.00000000000000000E+00 ! [N] Nominal force in z
force.par (               4 ,       $S_IRWBogie_Rear.$F_PS_Dmp_A  ) = 0.00000000000000000E+00 ! [N/m] Stiffness in x
force.par (               7 ,       $S_IRWBogie_Rear.$F_PS_Dmp_A  ) = 1.00000000000000000E+02 ! [Ns/m] Damping in x
force.par (               8 ,       $S_IRWBogie_Rear.$F_PS_Dmp_A  ) = 1.00000000000000000E+02 ! [Ns/m] Damping in y
force.par (               9 ,       $S_IRWBogie_Rear.$F_PS_Dmp_A  ) = $_Cpz                   ! [Ns/m] Damping in z

force.preld.calc (        3 ,       $S_IRWBogie_Rear.$F_PS_Dmp_B  ) = 0                       ! Select Preload cal.
force.preld.calc (        4 ,       $S_IRWBogie_Rear.$F_PS_Dmp_B  ) = 0                       ! Select Preload cal.
force.par (               3 ,       $S_IRWBogie_Rear.$F_PS_Dmp_B  ) = 0.00000000000000000E+00 ! [N] Nominal force in z
force.par (               4 ,       $S_IRWBogie_Rear.$F_PS_Dmp_B  ) = 0.00000000000000000E+00 ! [N/m] Stiffness in x
force.par (               7 ,       $S_IRWBogie_Rear.$F_PS_Dmp_B  ) = 1.00000000000000000E+02 ! [Ns/m] Damping in x
force.par (               8 ,       $S_IRWBogie_Rear.$F_PS_Dmp_B  ) = 1.00000000000000000E+02 ! [Ns/m] Damping in y
force.par (               9 ,       $S_IRWBogie_Rear.$F_PS_Dmp_B  ) = $_Cpz                   ! [Ns/m] Damping in z

force.preld.calc (        3 ,       $S_IRWBogie_Rear.$F_PS_Dmp_C  ) = 0                       ! Select Preload cal.
force.preld.calc (        4 ,       $S_IRWBogie_Rear.$F_PS_Dmp_C  ) = 0                       ! Select Preload cal.
force.par (               3 ,       $S_IRWBogie_Rear.$F_PS_Dmp_C  ) = 0.00000000000000000E+00 ! [N] Nominal force in z
force.par (               4 ,       $S_IRWBogie_Rear.$F_PS_Dmp_C  ) = 0.00000000000000000E+00 ! [N/m] Stiffness in x
force.par (               7 ,       $S_IRWBogie_Rear.$F_PS_Dmp_C  ) = 1.00000000000000000E+02 ! [Ns/m] Damping in x
force.par (               8 ,       $S_IRWBogie_Rear.$F_PS_Dmp_C  ) = 1.00000000000000000E+02 ! [Ns/m] Damping in y
force.par (               9 ,       $S_IRWBogie_Rear.$F_PS_Dmp_C  ) = $_Cpz                   ! [Ns/m] Damping in z

force.preld.calc (        3 ,       $S_IRWBogie_Rear.$F_PS_Dmp_D  ) = 0                       ! Select Preload cal.
force.preld.calc (        4 ,       $S_IRWBogie_Rear.$F_PS_Dmp_D  ) = 0                       ! Select Preload cal.
force.par (               3 ,       $S_IRWBogie_Rear.$F_PS_Dmp_D  ) = 0.00000000000000000E+00 ! [N] Nominal force in z
force.par (               4 ,       $S_IRWBogie_Rear.$F_PS_Dmp_D  ) = 0.00000000000000000E+00 ! [N/m] Stiffness in x
force.par (               7 ,       $S_IRWBogie_Rear.$F_PS_Dmp_D  ) = 1.00000000000000000E+02 ! [Ns/m] Damping in x
force.par (               8 ,       $S_IRWBogie_Rear.$F_PS_Dmp_D  ) = 1.00000000000000000E+02 ! [Ns/m] Damping in y
force.par (               9 ,       $S_IRWBogie_Rear.$F_PS_Dmp_D  ) = $_Cpz                   ! [Ns/m] Damping in z

force.preld.calc (        3 ,       $S_IRWBogie_Rear.$F_AirSpring_A) = 0                      ! Select Preload cal.
force.par (               3 ,       $S_IRWBogie_Rear.$F_AirSpring_A) = { $_Mc*9.81/4 }        ! [N] Nominal force in z
force.par (               4 ,       $S_IRWBogie_Rear.$F_AirSpring_A) = $_Ksx                  ! [N/m] Stiffness in x
force.par (               5 ,       $S_IRWBogie_Rear.$F_AirSpring_A) = $_Ksy                  ! [N/m] Stiffness in y
force.par (               6 ,       $S_IRWBogie_Rear.$F_AirSpring_A) = $_Ksz                  ! [N/m] Stiffness in z
force.par (               9 ,       $S_IRWBogie_Rear.$F_AirSpring_A) = $_Csz                  ! [Ns/m] Damping in z

force.preld.calc (        3 ,       $S_IRWBogie_Rear.$F_AirSpring_B) = 0                      ! Select Preload cal.
force.par (               3 ,       $S_IRWBogie_Rear.$F_AirSpring_B) = { $_Mc*9.81/4 }        ! [N] Nominal force in z
force.par (               4 ,       $S_IRWBogie_Rear.$F_AirSpring_B) = $_Ksx                  ! [N/m] Stiffness in x
force.par (               5 ,       $S_IRWBogie_Rear.$F_AirSpring_B) = $_Ksy                  ! [N/m] Stiffness in y
force.par (               6 ,       $S_IRWBogie_Rear.$F_AirSpring_B) = $_Ksz                  ! [N/m] Stiffness in z
force.par (               9 ,       $S_IRWBogie_Rear.$F_AirSpring_B) = $_Csz                  ! [Ns/m] Damping in z

force.disabled (                    $S_IRWBogie_Rear.$F_SSLatDmp  ) = 0                       ! Disabled
force.par (               9 ,       $S_IRWBogie_Rear.$F_SSLatDmp  ) = $_Kld                   ! [N/m] Transl. ser. stiffness cs_y
force.par (              15 ,       $S_IRWBogie_Rear.$F_SSLatDmp  ) = $_Cld                   ! [Ns/m] Transl. ser. damping  ds_y

force.disabled (                    $S_IRWBogie_Rear.$F_AntiRoll  ) = 0                       ! Disabled
force.par (               4 ,       $S_IRWBogie_Rear.$F_AntiRoll  ) = $_Kaar                  ! [Nm/rad] Stiffness in al
force.par (               7 ,       $S_IRWBogie_Rear.$F_AntiRoll  ) = { $_Kaar/100 }          ! [Nms/rad] Damping in al

force.disabled (                    $S_IRWBogie_Rear.$F_SS_TractionRod_A) = 0                 ! Disabled
force.par (               4 ,       $S_IRWBogie_Rear.$F_SS_TractionRod_A) = $_Kstr            ! [N/m] Stiffness in x

force.disabled (                    $S_IRWBogie_Rear.$F_SS_TractionRod_B) = 0                 ! Disabled
force.par (               4 ,       $S_IRWBogie_Rear.$F_SS_TractionRod_B) = $_Kstr            ! [N/m] Stiffness in x

force.preld.calc (        3 ,       $S_IRWBogie_Rear.$F_PS_BarFixed_A) = 1                    ! Select Preload cal.
force.disabled (                    $S_IRWBogie_Rear.$F_PS_BarFixed_A) = 0                    ! Disabled
force.par (               3 ,       $S_IRWBogie_Rear.$F_PS_BarFixed_A) = 0.00000000000000000E+00 ! [N] Nominal force in z

force.preld.calc (        3 ,       $S_IRWBogie_Rear.$F_PS_BarFixed_B) = 1                    ! Select Preload cal.
force.disabled (                    $S_IRWBogie_Rear.$F_PS_BarFixed_B) = 0                    ! Disabled
force.par (               3 ,       $S_IRWBogie_Rear.$F_PS_BarFixed_B) = 0.00000000000000000E+00 ! [N] Nominal force in z

force.preld.calc (        3 ,       $S_IRWBogie_Rear.$F_PS_BarFixed_C) = 1                    ! Select Preload cal.
force.disabled (                    $S_IRWBogie_Rear.$F_PS_BarFixed_C) = 0                    ! Disabled
force.par (               3 ,       $S_IRWBogie_Rear.$F_PS_BarFixed_C) = 0.00000000000000000E+00 ! [N] Nominal force in z

force.preld.calc (        3 ,       $S_IRWBogie_Rear.$F_PS_BarFixed_D) = 1                    ! Select Preload cal.
force.disabled (                    $S_IRWBogie_Rear.$F_PS_BarFixed_D) = 0                    ! Disabled
force.par (               3 ,       $S_IRWBogie_Rear.$F_PS_BarFixed_D) = 0.00000000000000000E+00 ! [N] Nominal force in z

force.disabled (                    $S_IRWBogie_Rear.$F_AntiHuntingDmp_A) = 0                 ! Disabled
force.par (               7 ,       $S_IRWBogie_Rear.$F_AntiHuntingDmp_A) = $_Chx             ! [Ns/m] Damping in x

force.disabled (                    $S_IRWBogie_Rear.$F_AntiHuntingDmp_B) = 0                 ! Disabled
force.par (               7 ,       $S_IRWBogie_Rear.$F_AntiHuntingDmp_B) = $_Chx             ! [Ns/m] Damping in x

force.disabled (                    $S_IRWBogie_Rear.$F_Motor_A   ) = 1                       ! Disabled

force.disabled (                    $S_IRWBogie_Rear.$F_Motor_B   ) = 1                       ! Disabled

force.disabled (                    $S_IRWBogie_Rear.$F_Motor_C   ) = 1                       ! Disabled

force.disabled (                    $S_IRWBogie_Rear.$F_Motor_D   ) = 1                       ! Disabled

force.disabled (                    $S_IRWBogie_Rear.$F_Motor_A_Simat) = 0                    ! Disabled
force.par (               2 ,       $S_IRWBogie_Rear.$F_Motor_A_Simat) = null                 ! [-] u-Vector Element force y
force.par (               5 ,       $S_IRWBogie_Rear.$F_Motor_A_Simat) = $S_IRWBogie_Rear.$UE_UA_Simat ! [-] u-Vector Element torque y

force.disabled (                    $S_IRWBogie_Rear.$F_Motor_B_Simat) = 0                    ! Disabled
force.par (               2 ,       $S_IRWBogie_Rear.$F_Motor_B_Simat) = null                 ! [-] u-Vector Element force y
force.par (               5 ,       $S_IRWBogie_Rear.$F_Motor_B_Simat) = $S_IRWBogie_Rear.$UE_UB_Simat ! [-] u-Vector Element torque y

force.disabled (                    $S_IRWBogie_Rear.$F_Motor_C_Simat) = 0                    ! Disabled
force.par (               2 ,       $S_IRWBogie_Rear.$F_Motor_C_Simat) = null                 ! [-] u-Vector Element force y
force.par (               5 ,       $S_IRWBogie_Rear.$F_Motor_C_Simat) = $S_IRWBogie_Rear.$UE_UC_Simat ! [-] u-Vector Element torque y

force.disabled (                    $S_IRWBogie_Rear.$F_Motor_D_Simat) = 0                    ! Disabled
force.par (               2 ,       $S_IRWBogie_Rear.$F_Motor_D_Simat) = null                 ! [-] u-Vector Element force y
force.par (               5 ,       $S_IRWBogie_Rear.$F_Motor_D_Simat) = $S_IRWBogie_Rear.$UE_UD_Simat ! [-] u-Vector Element torque y

control.par (             4 ,       $S_IRWBogie_Rear.$C_VelDiff_A_Left) = $C_CurveLeft        ! [-] Input Element ch. 2

control.st.dyn (          2 ,       $S_IRWBogie_Rear.$C_VelCtrl_A ) = 0.00000000000000000E+00 ! Dynamic States
control.st.equi (         2 ,       $S_IRWBogie_Rear.$C_VelCtrl_A ) = 0                       ! Equilibrium
control.par (            14 ,       $S_IRWBogie_Rear.$C_VelCtrl_A ) = 6.00000000000000000E+00 ! [-] Controller type
control.par (            15 ,       $S_IRWBogie_Rear.$C_VelCtrl_A ) = $_VehicleVelCtrl_P      ! [-] Proportional gain factor
control.par (            16 ,       $S_IRWBogie_Rear.$C_VelCtrl_A ) = $_VehicleVelCtrl_I      ! [s] Integral time constant
control.par (            17 ,       $S_IRWBogie_Rear.$C_VelCtrl_A ) = 0.00000000000000000E+00 ! [s] Derivative time constant
control.par (            18 ,       $S_IRWBogie_Rear.$C_VelCtrl_A ) = 1.00000000000000005E-04 ! [s] Lowpass time constant T1
control.par (            19 ,       $S_IRWBogie_Rear.$C_VelCtrl_A ) = 0.00000000000000000E+00 ! [s] Lowpass time constant T2
control.par (            20 ,       $S_IRWBogie_Rear.$C_VelCtrl_A ) = 0.00000000000000000E+00 ! [s] Lowpass time constant T3
control.par (            21 ,       $S_IRWBogie_Rear.$C_VelCtrl_A ) = 0.00000000000000000E+00 ! [s] Lowpass time constant T4
control.par (            23 ,       $S_IRWBogie_Rear.$C_VelCtrl_A ) = 0.00000000000000000E+00 ! [-] Scale numerator

control.par (             4 ,       $S_IRWBogie_Rear.$C_VelDiff_B_Right) = $C_CurveRight      ! [-] Input Element ch. 2

control.st.dyn (          2 ,       $S_IRWBogie_Rear.$C_VelCtrl_B ) = 0.00000000000000000E+00 ! Dynamic States
control.st.equi (         2 ,       $S_IRWBogie_Rear.$C_VelCtrl_B ) = 0                       ! Equilibrium
control.par (            14 ,       $S_IRWBogie_Rear.$C_VelCtrl_B ) = 6.00000000000000000E+00 ! [-] Controller type
control.par (            15 ,       $S_IRWBogie_Rear.$C_VelCtrl_B ) = $_VehicleVelCtrl_P      ! [-] Proportional gain factor
control.par (            16 ,       $S_IRWBogie_Rear.$C_VelCtrl_B ) = $_VehicleVelCtrl_I      ! [s] Integral time constant
control.par (            17 ,       $S_IRWBogie_Rear.$C_VelCtrl_B ) = 0.00000000000000000E+00 ! [s] Derivative time constant
control.par (            18 ,       $S_IRWBogie_Rear.$C_VelCtrl_B ) = 1.00000000000000005E-04 ! [s] Lowpass time constant T1
control.par (            19 ,       $S_IRWBogie_Rear.$C_VelCtrl_B ) = 0.00000000000000000E+00 ! [s] Lowpass time constant T2
control.par (            20 ,       $S_IRWBogie_Rear.$C_VelCtrl_B ) = 0.00000000000000000E+00 ! [s] Lowpass time constant T3
control.par (            21 ,       $S_IRWBogie_Rear.$C_VelCtrl_B ) = 0.00000000000000000E+00 ! [s] Lowpass time constant T4
control.par (            23 ,       $S_IRWBogie_Rear.$C_VelCtrl_B ) = 0.00000000000000000E+00 ! [-] Scale numerator

control.par (             4 ,       $S_IRWBogie_Rear.$C_VelDiff_C_Left) = $C_CurveLeft        ! [-] Input Element ch. 2

control.st.dyn (          2 ,       $S_IRWBogie_Rear.$C_VelCtrl_C ) = 0.00000000000000000E+00 ! Dynamic States
control.st.equi (         2 ,       $S_IRWBogie_Rear.$C_VelCtrl_C ) = 0                       ! Equilibrium
control.par (            14 ,       $S_IRWBogie_Rear.$C_VelCtrl_C ) = 6.00000000000000000E+00 ! [-] Controller type
control.par (            15 ,       $S_IRWBogie_Rear.$C_VelCtrl_C ) = $_VehicleVelCtrl_P      ! [-] Proportional gain factor
control.par (            16 ,       $S_IRWBogie_Rear.$C_VelCtrl_C ) = $_VehicleVelCtrl_I      ! [s] Integral time constant
control.par (            17 ,       $S_IRWBogie_Rear.$C_VelCtrl_C ) = 0.00000000000000000E+00 ! [s] Derivative time constant
control.par (            18 ,       $S_IRWBogie_Rear.$C_VelCtrl_C ) = 1.00000000000000005E-04 ! [s] Lowpass time constant T1
control.par (            19 ,       $S_IRWBogie_Rear.$C_VelCtrl_C ) = 0.00000000000000000E+00 ! [s] Lowpass time constant T2
control.par (            20 ,       $S_IRWBogie_Rear.$C_VelCtrl_C ) = 0.00000000000000000E+00 ! [s] Lowpass time constant T3
control.par (            21 ,       $S_IRWBogie_Rear.$C_VelCtrl_C ) = 0.00000000000000000E+00 ! [s] Lowpass time constant T4
control.par (            23 ,       $S_IRWBogie_Rear.$C_VelCtrl_C ) = 0.00000000000000000E+00 ! [-] Scale numerator

control.par (             4 ,       $S_IRWBogie_Rear.$C_VelDiff_D_Right) = $C_CurveRight      ! [-] Input Element ch. 2

control.st.dyn (          2 ,       $S_IRWBogie_Rear.$C_VelCtrl_D ) = 0.00000000000000000E+00 ! Dynamic States
control.st.equi (         2 ,       $S_IRWBogie_Rear.$C_VelCtrl_D ) = 0                       ! Equilibrium
control.par (            14 ,       $S_IRWBogie_Rear.$C_VelCtrl_D ) = 6.00000000000000000E+00 ! [-] Controller type
control.par (            15 ,       $S_IRWBogie_Rear.$C_VelCtrl_D ) = $_VehicleVelCtrl_P      ! [-] Proportional gain factor
control.par (            16 ,       $S_IRWBogie_Rear.$C_VelCtrl_D ) = $_VehicleVelCtrl_I      ! [s] Integral time constant
control.par (            17 ,       $S_IRWBogie_Rear.$C_VelCtrl_D ) = 0.00000000000000000E+00 ! [s] Derivative time constant
control.par (            18 ,       $S_IRWBogie_Rear.$C_VelCtrl_D ) = 1.00000000000000005E-04 ! [s] Lowpass time constant T1
control.par (            19 ,       $S_IRWBogie_Rear.$C_VelCtrl_D ) = 0.00000000000000000E+00 ! [s] Lowpass time constant T2
control.par (            20 ,       $S_IRWBogie_Rear.$C_VelCtrl_D ) = 0.00000000000000000E+00 ! [s] Lowpass time constant T3
control.par (            21 ,       $S_IRWBogie_Rear.$C_VelCtrl_D ) = 0.00000000000000000E+00 ! [s] Lowpass time constant T4
control.par (            23 ,       $S_IRWBogie_Rear.$C_VelCtrl_D ) = 0.00000000000000000E+00 ! [-] Scale numerator

uele.excit (                        $S_IRWBogie_Rear.$UE_Ref_Vel_X) = $E_Vehicle_RefVelX      ! Referenced Excitation

uinp.idx (                          $S_IRWBogie_Rear.$UI_UA_Simat ) = 5                       ! External index

uinp.idx (                          $S_IRWBogie_Rear.$UI_UB_Simat ) = 6                       ! External index

uinp.idx (                          $S_IRWBogie_Rear.$UI_UC_Simat ) = 7                       ! External index

uinp.idx (                          $S_IRWBogie_Rear.$UI_UD_Simat ) = 8                       ! External index

view.fclip.value (                  $S_IRWBogie_Rear.$S_IRW_Front.$V_WorkingView) = 1.01161129772663116E-01 ! Front clipping plane value
view.bclip.value (                  $S_IRWBogie_Rear.$S_IRW_Front.$V_WorkingView) = 1.01161125183105469E+02 ! Back clipping plane value

joint.st.pos (            1 ,       $S_IRWBogie_Rear.$S_IRW_Front.$J_DumAxle) = { -17500/2000+2.5/2 } ! Position
joint.st.vel (            1 ,       $S_IRWBogie_Rear.$S_IRW_Front.$J_DumAxle) = 1.66666666666666679E+01 ! Velocity


joint.st.vel (            1 ,       $S_IRWBogie_Rear.$S_IRW_Front.$J_IRW_L) = -3.87327161635993491E+01 ! Velocity


joint.st.vel (            1 ,       $S_IRWBogie_Rear.$S_IRW_Front.$J_IRW_R) = -3.87327161637308706E+01 ! Velocity


marker.pos (              2 ,       $S_IRWBogie_Rear.$S_IRW_Front.$M_AxleBridge_LongiBar_A) = { -$_Lx2/2 } ! Position

marker.pos (              2 ,       $S_IRWBogie_Rear.$S_IRW_Front.$M_AxleBridge_LongiBar_B) = { $_Lx2/2 } ! Position


force.st.desc (           1 ,       $S_IRWBogie_Rear.$S_IRW_Front.$F_RWContact_RWP_IRW_Left) = -2.62447781552461491E-04 ! Descriptive states

force.st.desc (           1 ,       $S_IRWBogie_Rear.$S_IRW_Front.$F_RWContact_RWP_IRW_Right) = -2.62447782889062243E-04 ! Descriptive states

view.fclip.value (                  $S_IRWBogie_Rear.$S_IRW_Rear.$V_WorkingView) = 1.01161129772663116E-01 ! Front clipping plane value
view.bclip.value (                  $S_IRWBogie_Rear.$S_IRW_Rear.$V_WorkingView) = 1.01161125183105469E+02 ! Back clipping plane value

joint.st.pos (            1 ,       $S_IRWBogie_Rear.$S_IRW_Rear.$J_DumAxle) = { -17500/2000-2.5/2 } ! Position
joint.st.vel (            1 ,       $S_IRWBogie_Rear.$S_IRW_Rear.$J_DumAxle) = 1.66666666666666679E+01 ! Velocity


joint.st.vel (            1 ,       $S_IRWBogie_Rear.$S_IRW_Rear.$J_IRW_L) = -3.87327161636119541E+01 ! Velocity


joint.st.vel (            1 ,       $S_IRWBogie_Rear.$S_IRW_Rear.$J_IRW_R) = -3.87327161638101742E+01 ! Velocity


marker.pos (              2 ,       $S_IRWBogie_Rear.$S_IRW_Rear.$M_AxleBridge_LongiBar_A) = { -$_Lx2/2 } ! Position

marker.pos (              2 ,       $S_IRWBogie_Rear.$S_IRW_Rear.$M_AxleBridge_LongiBar_B) = { $_Lx2/2 } ! Position


force.st.desc (           1 ,       $S_IRWBogie_Rear.$S_IRW_Rear.$F_RWContact_RWP_IRW_Left) = -2.62447781680553364E-04 ! Descriptive states

force.st.desc (           1 ,       $S_IRWBogie_Rear.$S_IRW_Rear.$F_RWContact_RWP_IRW_Right) = -2.62447783695009403E-04 ! Descriptive states

model.data.redundancy                                               = 'eJxjZGBgYETCDGj8wS6empxsYmJkYphsYp5mZGhsYm6SBiIMElOTLJOSDJIAofMI2+AAAAAAAAAA' ! Constraint redundancy data
model.data.dependency                                               = 'eJxjY6AeYKOiWSDAPMjVUdO/jDgwsvxwtBsERuMZVX6w2J2anGxiYmRimGxinmZkaGxibpIGIgwSU5Msk5IMkgBcrgkRPAQAAAAAAAA=' ! Solver state dependency data
